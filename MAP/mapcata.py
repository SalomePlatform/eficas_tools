
from Accas import *

JdC = JDC_CATA (code = 'MAP',
                execmodul = None,
                )

import types
class Tuple:
  def __init__(self,ntuple):
    self.ntuple=ntuple

  def __convert__(self,valeur):
    if type(valeur) == types.StringType:
      return None
    if len(valeur) != self.ntuple:
      return None
    return valeur

  def info(self):
    return "Tuple de %s elements" % self.ntuple

  __repr__=info
  __str__=info

# ======================================================================
# Catalog entry for the MAP function : c_solver_primary_chemistry
# ======================================================================
C_SOLVER_PRIMARY_CHEMISTRY_DATA=PROC(nom='C_SOLVER_PRIMARY_CHEMISTRY_DATA',op=None,
UIinfo ={'groupes':('solver',)},
input_temp=SIMP(typ='R',fr= "value of the temperature in Celsius",ang= "value of the temperature in Celsius",docu= "",statut= "o",into=None,min=1,max=1,val_min=20.0,val_max=320.0,defaut=None),
input_bore=SIMP(typ='R',fr= "boron content (in ppm) in the primary water",ang= "boron content (in ppm) in the primary water",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=2000.0,defaut=None),
input_lithium=SIMP(typ='R',fr= "lithium content (in ppm) in the primary water",ang= "lithium content (in ppm) in the primary water",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1000.0,defaut=None),
save_out=SIMP(typ=bool,fr= "boolean, if true output results in an output file",ang= "boolean, if true output results in an output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Pathname for the ouput file",ang= "Pathname for the ouput file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_post_polymer_graphic
# ======================================================================
C_POST_POLYMER_GRAPHIC_DATA=PROC(nom='C_POST_POLYMER_GRAPHIC_DATA',op=None,
UIinfo ={'groupes':('post',)},
study_name=SIMP(typ='TXM',fr= "Describes the name of the study",ang= "Describes the name of the study",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_directory=SIMP(typ='TXM',fr= "Name of directory where input data are located.",ang= "Name of directory where input data are located.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "Name of file where input data are stored.",ang= "Name of file where input data are stored.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "Names of graphics",ang= "Names of graphics",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of the nodes that have to be plot.if graphic_nodes is a list, all the nodes in the list will be plot for each graph. If the list contain only 'all', all the nodes will be plot. If the nodes are differents for each graph, graphic_nodes will be a list of list. The first list level will have the same lenth as graphic_names (same order) the second list level will contain the nodes for the graph",ang= "List of the nodes that have to be plot.if graphic_nodes is a list, all the nodes in the list will be plot for each graph. If the list contain only 'all', all the nodes will be plot. If the nodes are differents for each graph, graphic_nodes will be a list of list. The first list level will have the same lenth as graphic_names (same order) the second list level will contain the nodes for the graph",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "list of the boolean that indiacte if the X and Y axes will be plot in log. if graphic_log is a list of 1 boolean, ex True, the log will be applied for the 2 axes of all the graphs. if graphic_log is a list of 2 boolean, the 1st boolean will be link to the X axe, the second to the Y axe of all the graphs, If the log information is different for each graph, graphic_log will be a list of list. The first list level will have the same lenth as graphic_names (same order) the second list level will contain the same information as the 2 previous options",ang= "list of the boolean that indiacte if the X and Y axes will be plot in log. if graphic_log is a list of 1 boolean, ex True, the log will be applied for the 2 axes of all the graphs. if graphic_log is a list of 2 boolean, the 1st boolean will be link to the X axe, the second to the Y axe of all the graphs, If the log information is different for each graph, graphic_log will be a list of list. The first list level will have the same lenth as graphic_names (same order) the second list level will contain the same information as the 2 previous options",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "list of parameter name on which graph we wish to add other plots",ang= "list of parameter name on which graph we wish to add other plots",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "list of list of name of the experiemental plot that will be add. The first list level will have the same lenth as graphic_names (same order) the second list level will contain the experiemental names for the graph",ang= "list of list of name of the experiemental plot that will be add. The first list level will have the same lenth as graphic_names (same order) the second list level will contain the experiemental names for the graph",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "list of list of file name of the experiemental data that will be add. The first list level will have the same lenth as graphic_names (same order) the second list level will contain the experiemental file names",ang= "list of list of file name of the experiemental data that will be add. The first list level will have the same lenth as graphic_names (same order) the second list level will contain the experiemental file names",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "list of parameter name that have to be plot",ang= "list of parameter name that have to be plot",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "list of the nodes that have to be plot. if graphic_nodes is a list, all the nodes in the list will be plot for each graph. If the list contain only 'all', all the nodes will be plot. If the nodes are differents for each graph, graphic_nodes will be a list of list. The first list level will have the same lenth as graphic_space_names (same order) the second list level will contain the nodes for the graph",ang= "list of the nodes that have to be plot. if graphic_nodes is a list, all the nodes in the list will be plot for each graph. If the list contain only 'all', all the nodes will be plot. If the nodes are differents for each graph, graphic_nodes will be a list of list. The first list level will have the same lenth as graphic_space_names (same order) the second list level will contain the nodes for the graph",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "list of the time that have to be plot. if graphic_time is a list, all the time in the list will be plot for each graph. If the list contain only 'all', all the times will be plot. If the times are differents for each graph, graphic_nodes will be a list of list. The first list level will have the same lenth as graphic_space_names (same order) the second list level will contain the times for the graph",ang= "list of the time that have to be plot. if graphic_time is a list, all the time in the list will be plot for each graph. If the list contain only 'all', all the times will be plot. If the times are differents for each graph, graphic_nodes will be a list of list. The first list level will have the same lenth as graphic_space_names (same order) the second list level will contain the times for the graph",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "list of the boolean that indiacte if the X and Y axes will be plot in log. +if graphic_log is a list of 1 boolean, ex True, the log will be applied for the 2 axes of all the graphs if graphic_log is a list of 2 boolean, the 1st boolean will be link to the X axe, the second to the Y axe of all the graphs. If the log information is different for each graph, graphic_log will be a list of list. The first list level will have the same lenth as graphic_space_names (same order) the second list level will contain the same information as the 2 previous options",ang= "list of the boolean that indiacte if the X and Y axes will be plot in log. +if graphic_log is a list of 1 boolean, ex True, the log will be applied for the 2 axes of all the graphs if graphic_log is a list of 2 boolean, the 1st boolean will be link to the X axe, the second to the Y axe of all the graphs. If the log information is different for each graph, graphic_log will be a list of list. The first list level will have the same lenth as graphic_space_names (same order) the second list level will contain the same information as the 2 previous options",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_post_grid_field
# ======================================================================
C_POST_GRID_FIELD_DATA=PROC(nom='C_POST_GRID_FIELD_DATA',op=None,
UIinfo ={'groupes':('post',)},
study_name=SIMP(typ='TXM',fr= "the name of your study",ang= "the name of your study",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_directory=SIMP(typ='Repertoire',fr= "the name of the output directory",ang= "the name of the output directory",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
prior_strain_dat_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "first Stereo output file",ang= "first Stereo output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
second_strain_dat_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "second Stereo output file",ang= "second Stereo output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
mesh_size_in_micron=SIMP(typ='R',fr= "grid mesh size in microns",ang= "grid mesh size in microns",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
mesh_size_in_pixel=SIMP(typ='I',fr= "grid mesh size in pixels",ang= "grid mesh size in pixels",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
matlab=SIMP(typ=bool,fr= "formatting output for matlab",ang= "formatting output for matlab",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
accuracy=SIMP(typ='I',fr= "number of subdivision",ang= "number of subdivision",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
bin_number=SIMP(typ='I',fr= "number of bins in histogram",ang= "number of bins in histogram",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
histograms=SIMP(typ=bool,fr= "save histograms",ang= "save histograms",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
prior_strain=SIMP(typ=bool,fr= "save the prior strain",ang= "save the prior strain",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
second_strain=SIMP(typ=bool,fr= "save the second strain",ang= "save the second strain",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
strain_path_beta=SIMP(typ=bool,fr= "save the strain path beta",ang= "save the strain path beta",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
peek=SIMP(typ=bool,fr= "save the peek",ang= "save the peek",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
oxydation_map=SIMP(typ=bool,fr= "save the oxydation map",ang= "save the oxydation map",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
)
# ======================================================================
# Catalog entry for the MAP function : c_solver_generalised_corrosion
# ======================================================================
C_SOLVER_GENERALISED_CORROSION_DATA=PROC(nom='C_SOLVER_GENERALISED_CORROSION_DATA',op=None,
UIinfo ={'groupes':('transverse',)},
input_grid_field_csv=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the grid field csv file with metal thickness field",ang= "name of the grid field csv file with metal thickness field",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the grid field metadata file with metal thickness field",ang= "name of the grid field metadata file with metal thickness field",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
corrosion_speed_profile=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the file describing corrosion speed profile with thickness",ang= "name of the file describing corrosion speed profile with thickness",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_grid_field_csv=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "resulting thickness field csv file (grid field format)",ang= "resulting thickness field csv file (grid field format)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_grid_field_metadata=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "resulting thickness field metadata file (grid field format)",ang= "resulting thickness field metadata file (grid field format)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_grid_field_pdf=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "pdf report including intermediate thickness fields",ang= "pdf report including intermediate thickness fields",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
computation_steps=SIMP(typ='I',fr= "number of time steps",ang= "number of time steps",docu= "",statut= "o",into=None,min=1,max=1,val_min=1,val_max=100,defaut=10),
computation_time_step=SIMP(typ='R',fr= "amplitude of the time steps",ang= "amplitude of the time steps",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
display=SIMP(typ=bool,fr= "turn it on to display fields",ang= "turn it on to display fields",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
initial_thickness=SIMP(typ='R',fr= "initial metal thickness",ang= "initial metal thickness",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_ct_specimen_mesh
# ======================================================================
C_PRE_CT_SPECIMEN_MESH_DATA=PROC(nom='C_PRE_CT_SPECIMEN_MESH_DATA',op=None,
UIinfo ={'groupes':('pre',)},
ct_scale=SIMP(typ='R',fr= "Scale factor of the CT specimen, with respect to a CT 12.5 model",ang= "Scale factor of the CT specimen, with respect to a CT 12.5 model",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.5,val_max=2.0,defaut=1.0),
crack_depth_ratio=SIMP(typ='R',fr= "Conventional a/w ratio of crack depth over specimen thickness",ang= "Conventional a/w ratio of crack depth over specimen thickness",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.3,val_max=0.6,defaut=0.5),
output_mesh=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "pathname of the file where the output MED mesh is generated",ang= "pathname of the file where the output MED mesh is generated",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_info=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "pathname of the file where the output information about the mesh is generated",ang= "pathname of the file where the output information about the mesh is generated",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_post_scatterplot_sensitivity
# ======================================================================
C_POST_SCATTERPLOT_SENSITIVITY_DATA=PROC(nom='C_POST_SCATTERPLOT_SENSITIVITY_DATA',op=None,
UIinfo ={'groupes':('post',)},
xsample=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Name of the file that contains the input experimental design",ang= "Name of the file that contains the input experimental design",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
ysample=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Name of the file that contains the output experimental design",ang= "Name of the file that contains the output experimental design",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
degree=SIMP(typ='I',fr= "Maximum degree of the polynomial fit.If the parameter is not set, no fit is attempted",ang= "Maximum degree of the polynomial fit.If the parameter is not set, no fit is attempted",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
file_output=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Name of the output file  containing the analysis results",ang= "Name of the output file  containing the analysis results",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_image_2d_uncurtain
# ======================================================================
C_IMAGE_2D_UNCURTAIN_DATA=PROC(nom='C_IMAGE_2D_UNCURTAIN_DATA',op=None,
UIinfo ={'groupes':('image',)},
image_name=SIMP(typ='TXM',fr= "pathname of the files of input images ; globing (wild card) is allowed",ang= "pathname of the files of input images ; globing (wild card) is allowed",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
mask_width=SIMP(typ='R',fr= "(optional if GUI is used, mandatory otherwise) dark bands width  of the mask",ang= "(optional if GUI is used, mandatory otherwise) dark bands width  of the mask",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
core_width=SIMP(typ='R',fr= "(optional if GUI is used, mandatory otherwise)center size not to be darken in the fourier transform image",ang= "(optional if GUI is used, mandatory otherwise)center size not to be darken in the fourier transform image",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
mask_blur=SIMP(typ='R',fr= "(optional if GUI is used, mandatory otherwise)gaussian blur sigma applied on the mask",ang= "(optional if GUI is used, mandatory otherwise)gaussian blur sigma applied on the mask",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
gui=SIMP(typ=bool,fr= "Run the Graphical User Interface if set to True",ang= "Run the Graphical User Interface if set to True",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
output_prefix=SIMP(typ='TXM',fr= "Prefix appended before the output file name",ang= "Prefix appended before the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_suffix=SIMP(typ='TXM',fr= "Suffix appended after the output file name",ang= "Suffix appended after the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_directory=SIMP(typ='Repertoire',fr= "path where each output file is written",ang= "path where each output file is written",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut='refs'),
)
# ======================================================================
# Catalog entry for the MAP function : c_image_2d_brightness_equalizer
# ======================================================================
C_IMAGE_2D_BRIGHTNESS_EQUALIZER_DATA=PROC(nom='C_IMAGE_2D_BRIGHTNESS_EQUALIZER_DATA',op=None,
UIinfo ={'groupes':('image',)},
mask_shape=SIMP(typ='TXM',fr= "(optional in standalone mode if gui parameter is set to True, mandatory otherwise) technic used to create the mask shape",ang= "(optional in standalone mode if gui parameter is set to True, mandatory otherwise) technic used to create the mask shape",docu= "",statut= "o",into=['gaussian', 'parabolic', 'planar'],min=1,max=1,val_min='**',val_max='**',defaut='gaussian'),
mask_shape_gaussian=BLOC(condition="(mask_shape=='gaussian')",
image_name=SIMP(typ='TXM',fr= "pathname of the files of input images ; globing (wild card) is allowed",ang= "pathname of the files of input images ; globing (wild card) is allowed",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
gui=SIMP(typ=bool,fr= "Run the Graphical User Interface if set to True",ang= "Run the Graphical User Interface if set to True",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
output_prefix=SIMP(typ='TXM',fr= "Prefix appended before the output file name",ang= "Prefix appended before the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_suffix=SIMP(typ='TXM',fr= "Suffix appended after the output file name",ang= "Suffix appended after the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_directory=SIMP(typ='Repertoire',fr= "(optional, default : <current directory>/refs) path where each output file is written",ang= "(optional, default : <current directory>/refs) path where each output file is written",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
gaussian_blur_sigma=SIMP(typ='R',fr= "standard variation of the gaussian blur applied to the input image to create the mask",ang= "standard variation of the gaussian blur applied to the input image to create the mask",docu= "",statut= "f",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
),
mask_shape_parabolic=BLOC(condition="(mask_shape=='parabolic')",
image_name=SIMP(typ='TXM',fr= "pathname of the files of input images ; globing (wild card) is allowed",ang= "pathname of the files of input images ; globing (wild card) is allowed",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
gui=SIMP(typ=bool,fr= "Run the Graphical User Interface if set to True",ang= "Run the Graphical User Interface if set to True",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
output_prefix=SIMP(typ='TXM',fr= "Prefix appended before the output file name",ang= "Prefix appended before the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_suffix=SIMP(typ='TXM',fr= "Suffix appended after the output file name",ang= "Suffix appended after the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_directory=SIMP(typ='Repertoire',fr= "(optional, default : <current directory>/refs) path where each output file is written",ang= "(optional, default : <current directory>/refs) path where each output file is written",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
relative_steepness=SIMP(typ='R',fr= "(optional if GUI is used, mandatory otherwise) Set the steepness of the 2D parabola. The mask maximum value is computed as <relative_steepness> multiplied by the difference between input image minimum and maximum value divided by 100",ang= "(optional if GUI is used, mandatory otherwise) Set the steepness of the 2D parabola. The mask maximum value is computed as <relative_steepness> multiplied by the difference between input image minimum and maximum value divided by 100",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
mask_shape_planar=BLOC(condition="(mask_shape=='planar')",
image_name=SIMP(typ='TXM',fr= "pathname of the files of input images ; globing (wild card) is allowed",ang= "pathname of the files of input images ; globing (wild card) is allowed",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
gui=SIMP(typ=bool,fr= "Run the Graphical User Interface if set to True",ang= "Run the Graphical User Interface if set to True",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
output_prefix=SIMP(typ='TXM',fr= "Prefix appended before the output file name",ang= "Prefix appended before the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_suffix=SIMP(typ='TXM',fr= "Suffix appended after the output file name",ang= "Suffix appended after the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_directory=SIMP(typ='Repertoire',fr= "(optional, default : <current directory>/refs) path where each output file is written",ang= "(optional, default : <current directory>/refs) path where each output file is written",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
relative_tilt=SIMP(typ='R',fr= "(optional if GUI is used, mandatory otherwise) set the plan tilt. In the <orientation> direction, the mask value is decreased by <relative_tilt> multiplied by the difference between the input image maximum and minimum values divided by 100 times the image length",ang= "(optional if GUI is used, mandatory otherwise) set the plan tilt. In the <orientation> direction, the mask value is decreased by <relative_tilt> multiplied by the difference between the input image maximum and minimum values divided by 100 times the image length",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
orientation=SIMP(typ='R',fr= "(optional if GUI is used, mandatory otherwise) direction toward which the plan is tilting in degrees",ang= "(optional if GUI is used, mandatory otherwise) direction toward which the plan is tilting in degrees",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_solver_corrosion_evolution
# ======================================================================
C_SOLVER_CORROSION_EVOLUTION_DATA=PROC(nom='C_SOLVER_CORROSION_EVOLUTION_DATA',op=None,
UIinfo ={'groupes':('solver',)},
model=SIMP(typ='TXM',fr= "determines the physical model used in the code (must belong to the following list [Seyeux_2010, Leistner_2012])",ang= "determines the physical model used in the code (must belong to the following list [Seyeux_2010, Leistner_2012])",docu= "",statut= "o",into=['Seyeux_2010', 'Leistner_2012'],min=1,max=1,val_min='**',val_max='**',defaut='Seyeux_2010'),
model_Seyeux_2010=BLOC(condition="(model=='Seyeux_2010')",
temperature_in_K=SIMP(typ='R',fr= "it determines the value of the temperature in Kelvin degrees (must be >0)",ang= "it determines the value of the temperature in Kelvin degrees (must be >0)",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=603.0),
pH_temperature=SIMP(typ='R',fr= "it determines the value of the pH for the herebove determined temperature (must be >0)",ang= "it determines the value of the pH for the herebove determined temperature (must be >0)",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=7.2),
x_Cr=SIMP(typ='R',fr= "the fraction of Cr in the alloy (non dimensional unit : must be between 0 and 1 (x_Cr = 0.3 <=> 30% Cr in the alloy))",ang= "the fraction of Cr in the alloy (non dimensional unit : must be between 0 and 1 (x_Cr = 0.3 <=> 30% Cr in the alloy))",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=0.3),
x_Fe=SIMP(typ='R',fr= "the fraction of Fe in the alloy (non dimensional unit : must be between 0 and 1 (x_Fe = 0.1 <=> 10% Fe in the alloy))",ang= "the fraction of Fe in the alloy (non dimensional unit : must be between 0 and 1 (x_Fe = 0.1 <=> 10% Fe in the alloy))",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=0.1),
x_Ni=SIMP(typ='R',fr= "the fraction of Ni in the alloy (non dimensional unit : must be between 0 and 1 (x_Ni = 0.58 <=> 58% Ni in the alloy))",ang= "the fraction of Ni in the alloy (non dimensional unit : must be between 0 and 1 (x_Ni = 0.58 <=> 58% Ni in the alloy))",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=0.58),
alpha=SIMP(typ='R',fr= "interface polarisability (between 0 and 1)",ang= "interface polarisability (between 0 and 1)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DV=SIMP(typ='R',fr= "potential change with respect to a stationnary state",ang= "potential change with respect to a stationnary state",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
F_0f=SIMP(typ='R',fr= "potential drop in the film",ang= "potential drop in the film",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
F_0mf=SIMP(typ='R',fr= "potential drop at film-solution interface",ang= "potential drop at film-solution interface",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
F_0fs=SIMP(typ='R',fr= "potential drop at film-solution interface",ang= "potential drop at film-solution interface",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
D_vO=SIMP(typ='R',fr= "diffusion coefficient of oxygen vacancies",ang= "diffusion coefficient of oxygen vacancies",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG1=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 1 (Cr_M -> Cr3+_ox + 3e- + 3/2 V_o with V_o = oxygen vacancy)",ang= "Gibbs energy of formation of reaction 1 (Cr_M -> Cr3+_ox + 3e- + 3/2 V_o with V_o = oxygen vacancy)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=10000.0),
time_in_seconds=SIMP(typ='R',fr= "the duration of the physical time experiment",ang= "the duration of the physical time experiment",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=36000.0),
save_history=SIMP(typ=bool,fr= "must be set to yes if you want to save the integration times into the output file",ang= "must be set to yes if you want to save the integration times into the output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
output_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "the name of the text file where the results are written",ang= "the name of the text file where the results are written",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_corrosion_evolution.output'),
),
model_Leistner_2012=BLOC(condition="(model=='Leistner_2012')",
temperature_in_K=SIMP(typ='R',fr= "it determines the value of the temperature in Kelvin degrees (must be >0)",ang= "it determines the value of the temperature in Kelvin degrees (must be >0)",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=603.0),
pH_temperature=SIMP(typ='R',fr= "it determines the value of the pH for the herebove determined temperature (must be >0)",ang= "it determines the value of the pH for the herebove determined temperature (must be >0)",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=7.2),
x_Cr=SIMP(typ='R',fr= "the fraction of Cr in the alloy (non dimensional unit : must be between 0 and 1 (x_Cr = 0.3 <=> 30% Cr in the alloy))",ang= "the fraction of Cr in the alloy (non dimensional unit : must be between 0 and 1 (x_Cr = 0.3 <=> 30% Cr in the alloy))",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=0.3),
x_Fe=SIMP(typ='R',fr= "the fraction of Fe in the alloy (non dimensional unit : must be between 0 and 1 (x_Fe = 0.1 <=> 10% Fe in the alloy))",ang= "the fraction of Fe in the alloy (non dimensional unit : must be between 0 and 1 (x_Fe = 0.1 <=> 10% Fe in the alloy))",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=0.1),
x_Ni=SIMP(typ='R',fr= "the fraction of Ni in the alloy (non dimensional unit : must be between 0 and 1 (x_Ni = 0.58 <=> 58% Ni in the alloy))",ang= "the fraction of Ni in the alloy (non dimensional unit : must be between 0 and 1 (x_Ni = 0.58 <=> 58% Ni in the alloy))",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=0.58),
alpha=SIMP(typ='R',fr= "interface polarisability (between 0 and 1)",ang= "interface polarisability (between 0 and 1)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DV=SIMP(typ='R',fr= "potential change with respect to a stationnary state",ang= "potential change with respect to a stationnary state",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
F_0f=SIMP(typ='R',fr= "potential drop in the film",ang= "potential drop in the film",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
F_0mf=SIMP(typ='R',fr= "potential drop at film-solution interface",ang= "potential drop at film-solution interface",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
F_0fs=SIMP(typ='R',fr= "potential drop at film-solution interface",ang= "potential drop at film-solution interface",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
D_vO=SIMP(typ='R',fr= "diffusion coefficient of oxygen vacancies",ang= "diffusion coefficient of oxygen vacancies",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG1=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 1 (Cr_M -> Cr3+_ox + 3e- + 3/2 V_o with V_o = oxygen vacancy)",ang= "Gibbs energy of formation of reaction 1 (Cr_M -> Cr3+_ox + 3e- + 3/2 V_o with V_o = oxygen vacancy)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=10000.0),
time_in_seconds=SIMP(typ='R',fr= "the duration of the physical time experiment",ang= "the duration of the physical time experiment",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=36000.0),
save_history=SIMP(typ=bool,fr= "must be set to yes if you want to save the integration times into the output file",ang= "must be set to yes if you want to save the integration times into the output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
output_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "the name of the text file where the results are written",ang= "the name of the text file where the results are written",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_corrosion_evolution.output'),
DG8=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 8 (V_o + H2O -> 2 H+ + O_ox)",ang= "Gibbs energy of formation of reaction 8 (V_o + H2O -> 2 H+ + O_ox)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
D_mCr=SIMP(typ='R',fr= "diffusion coefficient of Cr ions in metal",ang= "diffusion coefficient of Cr ions in metal",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
D_ICr=SIMP(typ='R',fr= " diffusion coefficient of Cr3+ cation",ang= " diffusion coefficient of Cr3+ cation",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
decay_length=SIMP(typ='R',fr= "length caracterising the influence zone of the potential",ang= "length caracterising the influence zone of the potential",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
charge_number=SIMP(typ='R',fr= "number of electrons transferred during dissolution reaction",ang= "number of electrons transferred during dissolution reaction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
dissol_order=SIMP(typ='R',fr= "order of dissolution reaction",ang= "order of dissolution reaction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
dissol_preexp=SIMP(typ='R',fr= "first order factor of dissolution reaction",ang= "first order factor of dissolution reaction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
dissol_Ea=SIMP(typ='R',fr= "dissolution reaction activation energy",ang= "dissolution reaction activation energy",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG2=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 2 (Cr_M + V_Cr -> Cr3+_ox + 3e)",ang= "Gibbs energy of formation of reaction 2 (Cr_M + V_Cr -> Cr3+_ox + 3e)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG3=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 3 (Cr_M + V_I -> I_Cr + 3e)",ang= "Gibbs energy of formation of reaction 3 (Cr_M + V_I -> I_Cr + 3e)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG4=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 4 (Fe_M + V_Cr -> Fe3+_ox + 3e)",ang= "Gibbs energy of formation of reaction 4 (Fe_M + V_Cr -> Fe3+_ox + 3e)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG5=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 5 (Fe_M + V_I -> I_Fe + 3e)",ang= "Gibbs energy of formation of reaction 5 (Fe_M + V_I -> I_Fe + 3e)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG6=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 6 (Ni_M + 2/3 V_Cr -> Ni2+_ox + 2e-)",ang= "Gibbs energy of formation of reaction 6 (Ni_M + 2/3 V_Cr -> Ni2+_ox + 2e-)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG7=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 7 (Ni_M + V_I -> I_Ni + 2e)",ang= "Gibbs energy of formation of reaction 7 (Ni_M + V_I -> I_Ni + 2e)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG9=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 9 (Cr3+_ox + 3/2 H2O -> 3/2 O_ox + Cr3+_ox + V_Cr)",ang= "Gibbs energy of formation of reaction 9 (Cr3+_ox + 3/2 H2O -> 3/2 O_ox + Cr3+_ox + V_Cr)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG10=SIMP(typ='R',fr= " Gibbs energy of formation of reaction 10 (I_Cr + 3/2 H2O -> 3/2 O_ox + Cr3+_ox + 3H+ + V_I)",ang= " Gibbs energy of formation of reaction 10 (I_Cr + 3/2 H2O -> 3/2 O_ox + Cr3+_ox + 3H+ + V_I)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG11=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 11 (Fe3+_ox -> V_Cr + Fe3+_aq)",ang= "Gibbs energy of formation of reaction 11 (Fe3+_ox -> V_Cr + Fe3+_aq)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG12=SIMP(typ='R',fr= " Gibbs energy of formation of reaction 12 (I_Fe -> V_I + Fe3+_aq)",ang= " Gibbs energy of formation of reaction 12 (I_Fe -> V_I + Fe3+_aq)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG13=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 14 (M_Ni -> 2/3 V_Cr + Ni2+_aq)",ang= "Gibbs energy of formation of reaction 14 (M_Ni -> 2/3 V_Cr + Ni2+_aq)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DG14=SIMP(typ='R',fr= "Gibbs energy of formation of reaction 14 (I_Ni -> V_I + Ni2+_aq)",ang= "Gibbs energy of formation of reaction 14 (I_Ni -> V_I + Ni2+_aq)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
CtotM_mf=SIMP(typ='R',fr= "total cation concentration in oxide at the metal-film interface",ang= "total cation concentration in oxide at the metal-film interface",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_image2mesh_2d
# ======================================================================
C_PRE_IMAGE2MESH_2D_DATA=PROC(nom='C_PRE_IMAGE2MESH_2D_DATA',op=None,
UIinfo ={'groupes':('pre',)},
study_path=SIMP(typ='Repertoire',fr= "determines the name of the directory where intermediate files produced by PINK library are written.",ang= "determines the name of the directory where intermediate files produced by PINK library are written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='/tmp'),
study_name=SIMP(typ='TXM',fr= "determines the name of the study to determine the name of the intermediate files produced by PINK library are written",ang= "determines the name of the study to determine the name of the intermediate files produced by PINK library are written",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='study_c_pre_image2mesh_2d'),
input_image=SIMP(typ=('Fichier', 'All Files (*)'),fr= " name of the image input file name (pgm format only)",ang= " name of the image input file name (pgm format only)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_mesh=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "name of the mesh output file name",ang= "name of the mesh output file name",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='output_c_pre_image2mesh_2d.med'),
mesh_size=SIMP(typ='R',fr= "size of the mesh elements",ang= "size of the mesh elements",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.2),
)
# ======================================================================
# Catalog entry for the MAP function : c_post_image_correlation
# ======================================================================
C_POST_IMAGE_CORRELATION_DATA=PROC(nom='C_POST_IMAGE_CORRELATION_DATA',op=None,
UIinfo ={'groupes':('post',)},
computation=SIMP(typ='TXM',fr= "Type of computation in the sequence RBM, Displacement, Deformation",ang= "Type of computation in the sequence RBM, Displacement, Deformation",docu= "",statut= "o",into=['RBM', 'Displacement', 'Deformation'],min=1,max=1,val_min='**',val_max='**',defaut='RBM'),
computation_RBM=BLOC(condition="(computation=='RBM')",
print_image=SIMP(typ=bool,fr= "true to print results in image format, false otherwise. ignored if computation is RBM.",ang= "true to print results in image format, false otherwise. ignored if computation is RBM.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
output_directory=SIMP(typ='Repertoire',fr= "directory where the output files will be written.",ang= "directory where the output files will be written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
displacement_method=SIMP(typ='TXM',fr= "when computation = 'RBM', values can be 'direct' or 'direct_with_random_shifts'; when computation = 'Displacement', values can be 'direct', 'direct_with_random_shifts', 'Iterative' or 'IterativeFFT'.",ang= "when computation = 'RBM', values can be 'direct' or 'direct_with_random_shifts'; when computation = 'Displacement', values can be 'direct', 'direct_with_random_shifts', 'Iterative' or 'IterativeFFT'.",docu= "",statut= "o",into=('Direct', 'DirectWithRandomShifts', 'Iterative', 'IterativeFFT'),min=1,max=1,val_min='**',val_max='**',defaut='Direct'),
randomfile=SIMP(typ=('Fichier', 'All Files (*)'),fr= "('Name of the file where a random displacement field ', 'is stored. This parameter is mainly used ', 'for non-regression tests.')",ang= "('Name of the file where a random displacement field ', 'is stored. This parameter is mainly used ', 'for non-regression tests.')",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_type=SIMP(typ='TXM',fr= "type of input where data files have been stored.",ang= "type of input where data files have been stored.",docu= "",statut= "o",into=['archive', 'directory'],min=1,max=1,val_min='**',val_max='**',defaut=None),
input_directory=SIMP(typ='Repertoire',fr= "directory where the grayscale images are located.",ang= "directory where the grayscale images are located.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_archive=SIMP(typ=('Fichier', 'All Files (*)'),fr= ".zip archive where the grayscale images are located.",ang= ".zip archive where the grayscale images are located.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_file_root=SIMP(typ='TXM',fr= "string precising the generic root of the image name",ang= "string precising the generic root of the image name",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_file_extension=SIMP(typ='TXM',fr= "string precising the extension associated with the image type, e.g. bmp, tiff,png.",ang= "string precising the extension associated with the image type, e.g. bmp, tiff,png.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_file_first_index=SIMP(typ='I',fr= "index of the first image of the set",ang= "index of the first image of the set",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_file_last_index=SIMP(typ='I',fr= "index of the last image of the set",ang= "index of the last image of the set",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
step_between_images=SIMP(typ='I',fr= "ncrement between two consecutive images to be treated",ang= "ncrement between two consecutive images to be treated",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
step_between_updates=SIMP(typ='I',fr= "increment needed to update reference image.",ang= "increment needed to update reference image.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DIC_subset_size=SIMP(typ='I',fr= "displacement calculation: size in pixel of the subset size.",ang= "displacement calculation: size in pixel of the subset size.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=20),
research_area_vmax=SIMP(typ='I',fr= "displacement calculation: size in pixel of the research area.",ang= "displacement calculation: size in pixel of the research area.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
grid_step=SIMP(typ='I',fr= "displacement calculation: spacing in pixel between the subset centers. Smaller values will correspond to higher densities of displacement field.",ang= "displacement calculation: spacing in pixel between the subset centers. Smaller values will correspond to higher densities of displacement field.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DIC_big_subset_size=SIMP(typ='I',fr= "central point displacement: a large central subset is used to get an estimate of the global translation between two images.  Should be about two times the maximum translation value in pixels up to the image dimension.",ang= "central point displacement: a large central subset is used to get an estimate of the global translation between two images.  Should be about two times the maximum translation value in pixels up to the image dimension.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DIC_big_subset_area_vmax=SIMP(typ='I',fr= "central point displacement: parameter identical to 'research_area_vmax' but specific to the big subset.",ang= "central point displacement: parameter identical to 'research_area_vmax' but specific to the big subset.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
ZOI_upper_left_corner=SIMP(typ='TXM',fr= "[<int>, <int>] in pixelscoordinates (<line_number>, <row_number>) in pixels of the upper left corner of the rectangular Zone of Interest where the calculation is performed.",ang= "[<int>, <int>] in pixelscoordinates (<line_number>, <row_number>) in pixels of the upper left corner of the rectangular Zone of Interest where the calculation is performed.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
ZOI_bottom_right_corner=SIMP(typ='TXM',fr= "[<int>, <int>] in pixelsZone of Interest bottom right coordinates ",ang= "[<int>, <int>] in pixelsZone of Interest bottom right coordinates ",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
computation_Displacement=BLOC(condition="(computation=='Displacement')",
print_image=SIMP(typ=bool,fr= "true to print results in image format, false otherwise. ignored if computation is RBM.",ang= "true to print results in image format, false otherwise. ignored if computation is RBM.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
output_directory=SIMP(typ='Repertoire',fr= "directory where the output files will be written.",ang= "directory where the output files will be written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
displacement_method=SIMP(typ='TXM',fr= "when computation = 'RBM', values can be 'direct' or 'direct_with_random_shifts'; when computation = 'Displacement', values can be 'direct', 'direct_with_random_shifts', 'Iterative' or 'IterativeFFT'.",ang= "when computation = 'RBM', values can be 'direct' or 'direct_with_random_shifts'; when computation = 'Displacement', values can be 'direct', 'direct_with_random_shifts', 'Iterative' or 'IterativeFFT'.",docu= "",statut= "o",into=('Direct', 'DirectWithRandomShifts', 'Iterative', 'IterativeFFT'),min=1,max=1,val_min='**',val_max='**',defaut='Direct'),
randomfile=SIMP(typ=('Fichier', 'All Files (*)'),fr= "('Name of the file where a random displacement field ', 'is stored. This parameter is mainly used ', 'for non-regression tests.')",ang= "('Name of the file where a random displacement field ', 'is stored. This parameter is mainly used ', 'for non-regression tests.')",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
RBM_parameters_input_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Mandatory if computation is Displacement or Deformation. path of the input file used for the initial RBM calculations. ",ang= "Mandatory if computation is Displacement or Deformation. path of the input file used for the initial RBM calculations. ",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
DIC_subset_size=SIMP(typ='I',fr= "Not documented",ang= "Not documented",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
research_area_vmax=SIMP(typ='I',fr= "Not documented",ang= "Not documented",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
grid_step=SIMP(typ='I',fr= "Not documented",ang= "Not documented",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
max_iteration_number=SIMP(typ='I',fr= "if displacement_method is Iterative or IterativeFFTmaximum iteration number tolerated before exiting the Iterative resolution",ang= "if displacement_method is Iterative or IterativeFFTmaximum iteration number tolerated before exiting the Iterative resolution",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
iteration_convergence_criterion=SIMP(typ='R',fr= "if displacement_method is Iterative or IterativeFFTconvergence criterion of the iteration scheme",ang= "if displacement_method is Iterative or IterativeFFTconvergence criterion of the iteration scheme",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
polynomial_degree_of_transformation=SIMP(typ='I',fr= "if displacement_method is Iterativethe transformation between subsets can be a not purely rigid body motion but a more general polynomial transformation. The polynomial degree is given by this parameter.",ang= "if displacement_method is Iterativethe transformation between subsets can be a not purely rigid body motion but a more general polynomial transformation. The polynomial degree is given by this parameter.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
computation_Deformation=BLOC(condition="(computation=='Deformation')",
print_image=SIMP(typ=bool,fr= "true to print results in image format, false otherwise. ignored if computation is RBM.",ang= "true to print results in image format, false otherwise. ignored if computation is RBM.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
output_directory=SIMP(typ='Repertoire',fr= "directory where the output files will be written.",ang= "directory where the output files will be written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
RBM_parameters_input_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Mandatory if computation is Displacement or Deformation. path of the input file used for the initial RBM calculations. ",ang= "Mandatory if computation is Displacement or Deformation. path of the input file used for the initial RBM calculations. ",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_directory_with_displacement_fields=SIMP(typ='Repertoire',fr= " directory where displacement fields can be found",ang= " directory where displacement fields can be found",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
deformation_type_of_calculation=SIMP(typ='TXM',fr= "Not documented",ang= "Not documented",docu= "",statut= "o",into=('Deformation', 'Deformation_Rate'),min=1,max=1,val_min='**',val_max='**',defaut=None),
deformation_model=SIMP(typ='TXM',fr= "can be chosen between 'Euler', 'Lagrange' (standard) or 'Hencky' (logarithmic).",ang= "can be chosen between 'Euler', 'Lagrange' (standard) or 'Hencky' (logarithmic).",docu= "",statut= "o",into=('Euler', 'Lagrange', 'Hencky'),min=1,max=1,val_min='**',val_max='**',defaut=None),
deformation_calculation_method=SIMP(typ='TXM',fr= "'FiniteDifference' (rough), 'Polynomial' (in this case the space and time approximations are independant) or 'SpaceTimePolynomial' (total space-time approximation)",ang= "'FiniteDifference' (rough), 'Polynomial' (in this case the space and time approximations are independant) or 'SpaceTimePolynomial' (total space-time approximation)",docu= "",statut= "o",into=('FiniteDifference', 'Polynomial', 'SpaceTimePolynomial'),min=1,max=1,val_min='**',val_max='**',defaut=None),
polynomial_deformation_space_degree=SIMP(typ='I',fr= "if deformation_calculation_method is Polynomial or SpaceTimePolynomialdegree of the polynomial approximation in space allowing to obtain the deformation by derivation.",ang= "if deformation_calculation_method is Polynomial or SpaceTimePolynomialdegree of the polynomial approximation in space allowing to obtain the deformation by derivation.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
polynomial_deformation_time_degree=SIMP(typ='I',fr= "if deformation_calculation_method is Polynomial or SpaceTimePolynomial",ang= "if deformation_calculation_method is Polynomial or SpaceTimePolynomial",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
polynomial_deformation_space_step=SIMP(typ='I',fr= "if deformation_calculation_method is Polynomial or SpaceTimePolynomialnumber of displacement points to be used in space at each side of a reference point to compute the deformation approximation. For example, if set to= k, the polynomial function will approximate the displacement values over (k+1+k)*(k+1+k) points.",ang= "if deformation_calculation_method is Polynomial or SpaceTimePolynomialnumber of displacement points to be used in space at each side of a reference point to compute the deformation approximation. For example, if set to= k, the polynomial function will approximate the displacement values over (k+1+k)*(k+1+k) points.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
polynomial_deformation_time_step=SIMP(typ='I',fr= "if deformation_calculation_method is Polynomial or SpaceTimePolynomialnumber of displacement points to be used in time at each side of a reference point to compute the deformation approximation.",ang= "if deformation_calculation_method is Polynomial or SpaceTimePolynomialnumber of displacement points to be used in time at each side of a reference point to compute the deformation approximation.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_transverse_empty_python
# ======================================================================
C_TRANSVERSE_EMPTY_PYTHON_DATA=PROC(nom='C_TRANSVERSE_EMPTY_PYTHON_DATA',op=None,
UIinfo ={'groupes':('transverse',)},
a_string=SIMP(typ='TXM',fr= "simply print in verbose mode",ang= "simply print in verbose mode",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='Hello world of MAP'),
an_integer=SIMP(typ='I',fr= "number of lines in the output file",ang= "number of lines in the output file",docu= "",statut= "o",into=None,min=1,max=1,val_min=1,val_max=100,defaut=4),
a_float=SIMP(typ='R',fr= "simply print in verbose mode",ang= "simply print in verbose mode",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=5.3),
file_output=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives the name of the output file of the component",ang= "gives the name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_transverse_empty_python.output'),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_morphology_synthesis_fractal_interface
# ======================================================================
C_PRE_MORPHOLOGY_SYNTHESIS_FRACTAL_INTERFACE_DATA=PROC(nom='C_PRE_MORPHOLOGY_SYNTHESIS_FRACTAL_INTERFACE_DATA',op=None,
UIinfo ={'groupes':('pre',)},
nx=SIMP(typ='I',fr= "Even number of grid  points along x",ang= "Even number of grid  points along x",docu= "",statut= "o",into=None,min=1,max=1,val_min=2,val_max='**',defaut=2),
ny=SIMP(typ='I',fr= "Even number of grid  points along y",ang= "Even number of grid  points along y",docu= "",statut= "o",into=None,min=1,max=1,val_min=2,val_max='**',defaut=2),
Df=SIMP(typ='R',fr= "Fractal dimension",ang= "Fractal dimension",docu= "",statut= "o",into=None,min=1,max=1,val_min=2,val_max=3,defaut=2.6),
Ra=SIMP(typ='R',fr= "Surface rugosity Ra value (in z units)",ang= "Surface rugosity Ra value (in z units)",docu= "",statut= "o",into=None,min=1,max=1,val_min=0,val_max='**',defaut=1.0),
Lx=SIMP(typ='R',fr= "Total length of surface along x",ang= "Total length of surface along x",docu= "",statut= "o",into=None,min=1,max=1,val_min=0,val_max='**',defaut=1.0),
Ly=SIMP(typ='R',fr= "Total length of surface along y",ang= "Total length of surface along y",docu= "",statut= "o",into=None,min=1,max=1,val_min=0,val_max='**',defaut=1.0),
seed=SIMP(typ='R',fr= "Seed of random generator",ang= "Seed of random generator",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
wc=SIMP(typ='R',fr= "Minimal cut frequency",ang= "Minimal cut frequency",docu= "",statut= "o",into=None,min=1,max=1,val_min=0,val_max='**',defaut=0),
output_csv_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "name of a file describing the synthesized grid surface with coordinates x,y,z in CSV format. Coordinate columns x and y define the grid. Length units are implicitly: the units of lx and ly for the grid, the units of Ra for the heights.",ang= "name of a file describing the synthesized grid surface with coordinates x,y,z in CSV format. Coordinate columns x and y define the grid. Length units are implicitly: the units of lx and ly for the grid, the units of Ra for the heights.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='surface.csv'),
output_csv_metadata_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "name of the metadata file for output_csv_file_name",ang= "name of the metadata file for output_csv_file_name",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='surface.metadata'),
)
# ======================================================================
# Catalog entry for the MAP function : c_post_polymer_kinetics
# ======================================================================
C_POST_POLYMER_KINETICS_DATA=PROC(nom='C_POST_POLYMER_KINETICS_DATA',op=None,
UIinfo ={'groupes':('post',)},
study_name=SIMP(typ='TXM',fr= "Describes the name of the study",ang= "Describes the name of the study",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_directory=SIMP(typ='TXM',fr= "Name of directory where input data are located.",ang= "Name of directory where input data are located.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Name of the csv filename where results are written in the grid field csv format.",ang= "Name of the csv filename where results are written in the grid field csv format.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
equations=SIMP(typ='TXM',fr= "list of equations used to produce ",ang= "list of equations used to produce ",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_treatment_names=SIMP(typ='TXM',fr= "List of names of the post-treated fields",ang= "List of names of the post-treated fields",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
integer=SIMP(typ='TXM',fr= "List of booleans that define if post-treatment has to be integrated",ang= "List of booleans that define if post-treatment has to be integrated",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names=SIMP(typ='TXM',fr= "Names of coefficients which follow Arrhenius law. This list MUST have the same number of parameters as Arrhenius_A and Arrhenius_Ea.",ang= "Names of coefficients which follow Arrhenius law. This list MUST have the same number of parameters as Arrhenius_A and Arrhenius_Ea.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "Arrhenius law pre exponential factors. This list MUST have the same number of parameter as Arrhenius_names and Arrhenius_Ea.",ang= "Arrhenius law pre exponential factors. This list MUST have the same number of parameter as Arrhenius_names and Arrhenius_Ea.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "Arrhenius law activation energy. This list MUST have the same number of parameter as Arrhenius_name and Arrhenius_A.",ang= "Arrhenius law activation energy. This list MUST have the same number of parameter as Arrhenius_name and Arrhenius_A.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
results_units=SIMP(typ='TXM',fr= "equation reslut units",ang= "equation reslut units",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_morphology_inclusions
# ======================================================================
C_PRE_MORPHOLOGY_INCLUSIONS_DATA=PROC(nom='C_PRE_MORPHOLOGY_INCLUSIONS_DATA',op=None,
UIinfo ={'groupes':('pre',)},
sphere=SIMP(typ='I',fr= "chose 1 to for spheres, chose 0 for polyhedra",ang= "chose 1 to for spheres, chose 0 for polyhedra",docu= "",statut= "o",into=[0, 1],min=1,max=1,val_min='**',val_max='**',defaut=1),
box_dimension=SIMP(typ='TXM',fr= "list of three float numbers to determine box dimensions along the three axis",ang= "list of three float numbers to determine box dimensions along the three axis",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
box_discretize=SIMP(typ='TXM',fr= "list of three integers to determine the number of voxels along the three axis",ang= "list of three integers to determine the number of voxels along the three axis",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
fraction=SIMP(typ='R',fr= "inclusion volume fraction",ang= "inclusion volume fraction",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.15),
sieve_curve=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the file where inclusion sieve curve is defined",ang= "name of the file where inclusion sieve curve is defined",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
poisson_vertex_number=SIMP(typ='I',fr= "number of vertices used in the Poisson process",ang= "number of vertices used in the Poisson process",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=12),
lognormal_average=SIMP(typ='R',fr= "average of lognormal distribution of ???",ang= "average of lognormal distribution of ???",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
lognormal_sigma=SIMP(typ='R',fr= "standard deviation of lognormal distribution of ???",ang= "standard deviation of lognormal distribution of ???",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
aspect_ratio=SIMP(typ='R',fr= "inclusion aspect_ratio",ang= "inclusion aspect_ratio",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=1.0),
seed=SIMP(typ='I',fr= "random seed",ang= "random seed",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_morphology_synthesis_voronoi
# ======================================================================
C_PRE_MORPHOLOGY_SYNTHESIS_VORONOI_DATA=PROC(nom='C_PRE_MORPHOLOGY_SYNTHESIS_VORONOI_DATA',op=None,
UIinfo ={'groupes':('pre',)},
study_name=SIMP(typ='TXM',fr= "name given to the study, which will be used as the root to define output file names, e.g. 'my_aggregate_with_40_grains",ang= "name given to the study, which will be used as the root to define output file names, e.g. 'my_aggregate_with_40_grains",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='my_aggregate_with_xx_grains'),
folder_out=SIMP(typ='Repertoire',fr= "name of the folder where output files will be written",ang= "name of the folder where output files will be written",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='/tmp'),
printbrep=SIMP(typ=bool,fr= "boolean used to ask the print of the .brep file",ang= "boolean used to ask the print of the .brep file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
maillage=SIMP(typ=bool,fr= "boolean used to ask the print of the mesh in MED format",ang= "boolean used to ask the print of the mesh in MED format",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
printhist=SIMP(typ=bool,fr= "boolean that will trigger the print of an .hist histogram datafile for garn sizes, volumes and surfaces",ang= "boolean that will trigger the print of an .hist histogram datafile for garn sizes, volumes and surfaces",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
param_volumes=SIMP(typ='TXM',fr= "list of 3 values used to generate the histogram to specify the minimum value, maximum value and step numbers for the histogram. In cas the value is not specified for min and max, a void field [] can be used and the default value of 0. will be used for the min while the max is automatically calculated, a few examples follow: param_volumes = [0.,[],20] will correspond to a 20-bar histogram of min value 0. and automatic max value, param_volumes = [[],[],20] will give the same result, param_volumes = [2.,10.,20] will correspond to a 20-bar histogram of min value 2. and max value 10.",ang= "list of 3 values used to generate the histogram to specify the minimum value, maximum value and step numbers for the histogram. In cas the value is not specified for min and max, a void field [] can be used and the default value of 0. will be used for the min while the max is automatically calculated, a few examples follow: param_volumes = [0.,[],20] will correspond to a 20-bar histogram of min value 0. and automatic max value, param_volumes = [[],[],20] will give the same result, param_volumes = [2.,10.,20] will correspond to a 20-bar histogram of min value 2. and max value 10.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='[0.,[],20]'),
param_surfaces=SIMP(typ='TXM',fr= "list of 3 values used to generate the histogram to specify the minimum value, maximum value and step numbers for the histogram. In cas the value is not specified for min and max, a void field [] can be used and the default value of 0. will be used for the min while the max is automatically calculated, a few examples follow: param_volumes = [0.,[],20] will correspond to a 20-bar histogram of min value 0. and automatic max value, param_volumes = [[],[],20] will give the same result, param_volumes = [2.,10.,20] will correspond to a 20-bar histogram of min value 2. and max value 10.",ang= "list of 3 values used to generate the histogram to specify the minimum value, maximum value and step numbers for the histogram. In cas the value is not specified for min and max, a void field [] can be used and the default value of 0. will be used for the min while the max is automatically calculated, a few examples follow: param_volumes = [0.,[],20] will correspond to a 20-bar histogram of min value 0. and automatic max value, param_volumes = [[],[],20] will give the same result, param_volumes = [2.,10.,20] will correspond to a 20-bar histogram of min value 2. and max value 10.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='[0.,[],20]'),
param_dg=SIMP(typ='TXM',fr= "list of 3 values used to generate the histogram to specify the minimum value, maximum value and step numbers for the histogram. In cas the value is not specified for min and max, a void field [] can be used and the default value of 0. will be used for the min while the max is automatically calculated, a few examples follow: param_volumes = [0.,[],20] will correspond to a 20-bar histogram of min value 0. and automatic max value, param_volumes = [[],[],20] will give the same result, param_volumes = [2.,10.,20] will correspond to a 20-bar histogram of min value 2. and max value 10.",ang= "list of 3 values used to generate the histogram to specify the minimum value, maximum value and step numbers for the histogram. In cas the value is not specified for min and max, a void field [] can be used and the default value of 0. will be used for the min while the max is automatically calculated, a few examples follow: param_volumes = [0.,[],20] will correspond to a 20-bar histogram of min value 0. and automatic max value, param_volumes = [[],[],20] will give the same result, param_volumes = [2.,10.,20] will correspond to a 20-bar histogram of min value 2. and max value 10.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='[0.,[],20]'),
random_seed=SIMP(typ='I',fr= "Integer parameter, when set to -1 the random seed will be set by the alea parameter. For any different value, the random seed is arbitrary.",ang= "Integer parameter, when set to -1 the random seed will be set by the alea parameter. For any different value, the random seed is arbitrary.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=-1),
ngrains=SIMP(typ='I',fr= "number of grains in the generated aggregate",ang= "number of grains in the generated aggregate",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=20),
alea=SIMP(typ='I',fr= "integer parameter specifying the initial seed for the random algorithm used to distribute the germs of the voronoi cells. It will only be active when random_seed=-1. This situation is useful to reproduce the generation of similar aggregates.",ang= "integer parameter specifying the initial seed for the random algorithm used to distribute the germs of the voronoi cells. It will only be active when random_seed=-1. This situation is useful to reproduce the generation of similar aggregates.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
puis=SIMP(typ='R',fr= "float ranging between 0. an 1. used to control the repulsion between germs. Indeed, a random germ distribution can sometimes give unexpected results when two germs are too close to each other. Setting a strictly positive repulsion distance will produce an aggregate of more homogeneous grain sizes.",ang= "float ranging between 0. an 1. used to control the repulsion between germs. Indeed, a random germ distribution can sometimes give unexpected results when two germs are too close to each other. Setting a strictly positive repulsion distance will produce an aggregate of more homogeneous grain sizes.",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=1.0),
predef=SIMP(typ='R',fr= "float used to control the pre-strain in the aggregate ?",ang= "float used to control the pre-strain in the aggregate ?",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.0),
homot=SIMP(typ='R',fr= "float used to control the size of the aggregate ?",ang= "float used to control the size of the aggregate ?",docu= "",statut= "f",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=1.0),
sdec=SIMP(typ=bool,fr= "boolean used to determine ?",ang= "boolean used to determine ?",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
symet=SIMP(typ=bool,fr= "boolean used to determine the symetry",ang= "boolean used to determine the symetry",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_polycrystal_orientation
# ======================================================================
C_PRE_POLYCRYSTAL_ORIENTATION_DATA=PROC(nom='C_PRE_POLYCRYSTAL_ORIENTATION_DATA',op=None,
UIinfo ={'groupes':('pre',)},
material_symmetry=SIMP(typ='TXM',fr= "symetry of the orientation distribution",ang= "symetry of the orientation distribution",docu= "",statut= "o",into=['isotropic', 'transverse_isotropic', 'dispersed_transverse_isotropic'],min=1,max=1,val_min='**',val_max='**',defaut='isotropic'),
material_symmetry_isotropic=BLOC(condition="(material_symmetry=='isotropic')",
input_format=SIMP(typ='TXM',fr= "determines the format of the microstructure geometry file : BREP for SALOME geometry or TESS for NEPER tesselation",ang= "determines the format of the microstructure geometry file : BREP for SALOME geometry or TESS for NEPER tesselation",docu= "",statut= "o",into=['BREP', 'TESS'],min=1,max=1,val_min='**',val_max='**',defaut=None),
input_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the file that describes the microstructure geometry",ang= "name of the file that describes the microstructure geometry",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
xao_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "('name of the XAO output file describing ', 'geometry, material and orientation fields')",ang= "('name of the XAO output file describing ', 'geometry, material and orientation fields')",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
material_index=SIMP(typ='I',fr= "material index in the microstructure",ang= "material index in the microstructure",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
random_seed=SIMP(typ='I',fr= "random seed is used to control random process",ang= "random seed is used to control random process",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
material_symmetry_transverse_isotropic=BLOC(condition="(material_symmetry=='transverse_isotropic')",
input_format=SIMP(typ='TXM',fr= "determines the format of the microstructure geometry file : BREP for SALOME geometry or TESS for NEPER tesselation",ang= "determines the format of the microstructure geometry file : BREP for SALOME geometry or TESS for NEPER tesselation",docu= "",statut= "o",into=['BREP', 'TESS'],min=1,max=1,val_min='**',val_max='**',defaut=None),
input_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the file that describes the microstructure geometry",ang= "name of the file that describes the microstructure geometry",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
xao_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "('name of the XAO output file describing ', 'geometry, material and orientation fields')",ang= "('name of the XAO output file describing ', 'geometry, material and orientation fields')",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
material_index=SIMP(typ='I',fr= "material index in the microstructure",ang= "material index in the microstructure",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
random_seed=SIMP(typ='I',fr= "random seed is used to control random process",ang= "random seed is used to control random process",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
axis_projection_angle_1=SIMP(typ='R',fr= "angle that determines the first projection of the axis",ang= "angle that determines the first projection of the axis",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
axis_projection_angle_2=SIMP(typ='R',fr= "angle that determines the second projection of the axis",ang= "angle that determines the second projection of the axis",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
material_symmetry_dispersed_transverse_isotropic=BLOC(condition="(material_symmetry=='dispersed_transverse_isotropic')",
input_format=SIMP(typ='TXM',fr= "determines the format of the microstructure geometry file : BREP for SALOME geometry or TESS for NEPER tesselation",ang= "determines the format of the microstructure geometry file : BREP for SALOME geometry or TESS for NEPER tesselation",docu= "",statut= "o",into=['BREP', 'TESS'],min=1,max=1,val_min='**',val_max='**',defaut=None),
input_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the file that describes the microstructure geometry",ang= "name of the file that describes the microstructure geometry",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
xao_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "('name of the XAO output file describing ', 'geometry, material and orientation fields')",ang= "('name of the XAO output file describing ', 'geometry, material and orientation fields')",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
material_index=SIMP(typ='I',fr= "material index in the microstructure",ang= "material index in the microstructure",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
random_seed=SIMP(typ='I',fr= "random seed is used to control random process",ang= "random seed is used to control random process",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
axis_projection_angle_1=SIMP(typ='R',fr= "angle that determines the first projection of the axis",ang= "angle that determines the first projection of the axis",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
axis_projection_angle_2=SIMP(typ='R',fr= "angle that determines the second projection of the axis",ang= "angle that determines the second projection of the axis",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
dispersion_width=SIMP(typ='R',fr= "angle angle of the three orientation angles",ang= "angle angle of the three orientation angles",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_transverse_display_map
# ======================================================================
C_TRANSVERSE_DISPLAY_MAP_DATA=PROC(nom='C_TRANSVERSE_DISPLAY_MAP_DATA',op=None,
UIinfo ={'groupes':('transverse',)},
input_datafile=SIMP(typ=('Fichier', 'All Files (*)'),fr= "contains the data the display_map should be made on",ang= "contains the data the display_map should be made on",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
x_axis=SIMP(typ='TXM',fr= "the identifier of the x axis column",ang= "the identifier of the x axis column",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
y_axis=SIMP(typ='TXM',fr= "the identifier of the y axis column",ang= "the identifier of the y axis column",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
z_axis=SIMP(typ='TXM',fr= "the identifier of the z axis column",ang= "the identifier of the z axis column",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
palette=SIMP(typ='TXM',fr= "defines the color scale",ang= "defines the color scale",docu= "",statut= "o",into=['color', 'gray'],min=1,max=1,val_min='**',val_max='**',defaut=None),
color_scale=SIMP(typ='TXM',fr= "defines implicitely the number of colors to be used",ang= "defines implicitely the number of colors to be used",docu= "",statut= "o",into=['continuum', 'discrete'],min=1,max=1,val_min='**',val_max='**',defaut=None),
interpolation=SIMP(typ='TXM',fr= "defines how to interpolate the color levels between the given data",ang= "defines how to interpolate the color levels between the given data",docu= "",statut= "o",into=['nearest', 'bilinear', 'bicubic'],min=1,max=1,val_min='**',val_max='**',defaut=None),
show_grid=SIMP(typ=bool,fr= "display grid",ang= "display grid",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
contour_lines=SIMP(typ=bool,fr= "display color lines",ang= "display color lines",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
main_title=SIMP(typ='TXM',fr= "Graphic Main Title",ang= "Graphic Main Title",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
x_title=SIMP(typ='TXM',fr= "X-axis title",ang= "X-axis title",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
y_title=SIMP(typ='TXM',fr= "Y-axis title",ang= "Y-axis title",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
z_title=SIMP(typ='TXM',fr= "Z-axis title",ang= "Z-axis title",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
save_img=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Save the plot result",ang= "Save the plot result",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show_img=SIMP(typ=bool,fr= "Show the plot result",ang= "Show the plot result",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
profile=SIMP(typ=bool,fr= "Eval profile along a line",ang= "Eval profile along a line",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
save_profile=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Save calculated profile as a text file",ang= "Save calculated profile as a text file",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
start=SIMP(typ='TXM',fr= "Start point coordinates",ang= "Start point coordinates",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
stop=SIMP(typ='TXM',fr= "End point coordinates",ang= "End point coordinates",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_transverse_interpolation
# ======================================================================
C_TRANSVERSE_INTERPOLATION_DATA=PROC(nom='C_TRANSVERSE_INTERPOLATION_DATA',op=None,
UIinfo ={'groupes':('transverse',)},
interpolation=SIMP(typ='TXM',fr= "the type of interpolation the user wants",ang= "the type of interpolation the user wants",docu= "",statut= "o",into=['user_defined', 'standard'],min=1,max=1,val_min='**',val_max='**',defaut='standard'),
interpolation_user_defined=BLOC(condition="(interpolation=='user_defined')",
input_datafile=SIMP(typ=('Fichier', 'All Files (*)'),fr= "contains the data the interpolation should be made on",ang= "contains the data the interpolation should be made on",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show=SIMP(typ=bool,fr= "show plot of the result",ang= "show plot of the result",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
save_out=SIMP(typ=bool,fr= "save interpolation result",ang= "save interpolation result",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
save_img=SIMP(typ=bool,fr= "save plot of the result",ang= "save plot of the result",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
output_basename=SIMP(typ='TXM',fr= "user defined output basename (for use in CADEEX)",ang= "user defined output basename (for use in CADEEX)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
function=SIMP(typ='TXM',fr= "user defined function",ang= "user defined function",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
initial_guess=SIMP(typ='TXM',fr= "initial guess for the adjustable parameters",ang= "initial guess for the adjustable parameters",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
interpolation_standard=BLOC(condition="(interpolation=='standard')",
input_datafile=SIMP(typ=('Fichier', 'All Files (*)'),fr= "contains the data the interpolation should be made on",ang= "contains the data the interpolation should be made on",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show=SIMP(typ=bool,fr= "show plot of the result",ang= "show plot of the result",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
save_out=SIMP(typ=bool,fr= "save interpolation result",ang= "save interpolation result",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
save_img=SIMP(typ=bool,fr= "save plot of the result",ang= "save plot of the result",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
output_basename=SIMP(typ='TXM',fr= "user defined output basename (for use in CADEEX)",ang= "user defined output basename (for use in CADEEX)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
function=SIMP(typ='TXM',fr= "name of standard interpolation method to be used",ang= "name of standard interpolation method to be used",docu= "",statut= "o",into=['poly1', 'poly2', 'poly3', 'poly4', 'poly5', 'poly6', 'poly7', 'poly8', 'poly9', 'inverse1', 'inverse2', 'inverse3', 'inverse4', 'inverse5', 'inverse6', 'inverse7', 'inverse8', 'inverse9', 'power', 'expo', 'logn', 'gauss', 'poisson', 'double_gauss', 'double_poisson', 'weibull2', 'weibull3', 'gumbel', 'logn_affin'],min=1,max=1,val_min='**',val_max='**',defaut=None),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_post_experimental_loops
# ======================================================================
C_POST_EXPERIMENTAL_LOOPS_DATA=PROC(nom='C_POST_EXPERIMENTAL_LOOPS_DATA',op=None,
UIinfo ={'groupes':('post',)},
mode=SIMP(typ='TXM',fr= "execution mode",ang= "execution mode",docu= "",statut= "o",into=['map', 'cadeex'],min=1,max=1,val_min='**',val_max='**',defaut='cadeex'),
mode_map=BLOC(condition="(mode=='map')",
post_processing=SIMP(typ='TXM',fr= "post processing level",ang= "post processing level",docu= "",statut= "o",into=['classic', 'advanced', 'expert'],min=1,max=1,val_min='**',val_max='**',defaut='classic'),
spectra_zip=SIMP(typ=('Fichier', 'All Files (*)'),fr= "archive with all spectra",ang= "archive with all spectra",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
start_cycle=SIMP(typ='TXM',fr= "starting cycle",ang= "starting cycle",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show_release=SIMP(typ=bool,fr= "to it on to get a graphic output of release curve",ang= "to it on to get a graphic output of release curve",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
x_axis=SIMP(typ='TXM',fr= "name of the axis on graphs",ang= "name of the axis on graphs",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
release=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "output csv file containing final release vs time",ang= "output csv file containing final release vs time",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='out.release'),
summary=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "output text file containing details on calculations",ang= "output text file containing details on calculations",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
y_scale=SIMP(typ='TXM',fr= "scale for y axis",ang= "scale for y axis",docu= "",statut= "f",into=['log', 'linear'],min=1,max=1,val_min='**',val_max='**',defaut='log'),
show_dead_time=SIMP(typ=bool,fr= "show dead time",ang= "show dead time",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show_channel_max=SIMP(typ=bool,fr= "show channel max",ang= "show channel max",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show_centroid=SIMP(typ=bool,fr= "show centroid",ang= "show centroid",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show_FWHM=SIMP(typ=bool,fr= "show FWHM",ang= "show FWHM",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show_counting=SIMP(typ=bool,fr= "show counting",ang= "show counting",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show_spectra=SIMP(typ='TXM',fr= "spectra number the user wants to be displayed",ang= "spectra number the user wants to be displayed",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show_background=SIMP(typ='TXM',fr= "spectra slice number with calculated background the user wants to be displayed",ang= "spectra slice number with calculated background the user wants to be displayed",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
dead_time_correction=SIMP(typ=bool,fr= "apply dead correction or not",ang= "apply dead correction or not",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
ROI1_BG_length=SIMP(typ='TXM',fr= "must be auto or a positive an odd integer",ang= "must be auto or a positive an odd integer",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='auto'),
ROI2_BG_length=SIMP(typ='TXM',fr= "must be auto or a positive an odd integer",ang= "must be auto or a positive an odd integer",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='auto'),
BG_half_width=SIMP(typ='TXM',fr= "must be auto or a positive integer",ang= "must be auto or a positive integer",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='auto'),
BG_sum_factor=SIMP(typ='TXM',fr= "must be auto or a positive integer",ang= "must be auto or a positive integer",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='auto'),
),
mode_cadeex=BLOC(condition="(mode=='cadeex')",
spectra_zip=SIMP(typ=('Fichier', 'All Files (*)'),fr= "archive with all spectra",ang= "archive with all spectra",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
start_cycle=SIMP(typ='TXM',fr= "starting cycle",ang= "starting cycle",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
release=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "output csv file containing final release vs time",ang= "output csv file containing final release vs time",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='out.release'),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_image_2d_fouling_rate
# ======================================================================
C_IMAGE_2D_FOULING_RATE_DATA=PROC(nom='C_IMAGE_2D_FOULING_RATE_DATA',op=None,
UIinfo ={'groupes':('image',)},
input_image_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "input image filename",ang= "input image filename",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
spatial_bandwidth=SIMP(typ='I',fr= "spatial bandwith parameter for Meanshift segmentation",ang= "spatial bandwith parameter for Meanshift segmentation",docu= "",statut= "o",into=[3, 5, 7, 9],min=1,max=1,val_min='**',val_max='**',defaut=5),
use_biasfield_correction=SIMP(typ='I',fr= "boolean to switch on or off the biasfield correction during the classification step",ang= "boolean to switch on or off the biasfield correction during the classification step",docu= "",statut= "o",into=[0, 1],min=1,max=1,val_min='**',val_max='**',defaut=1),
meanshift_image_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "output filename for the intermediate segmented image by Meanshift to be written",ang= "output filename for the intermediate segmented image by Meanshift to be written",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
segmented_image_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "output filename for the segmented image with crystals in green to be written",ang= "output filename for the segmented image with crystals in green to be written",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
text_output_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "text output filename where the results of the component: fouling rate",ang= "text output filename where the results of the component: fouling rate",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_solver_elasticity_fdvgrid
# ======================================================================
C_SOLVER_ELASTICITY_FDVGRID_DATA=PROC(nom='C_SOLVER_ELASTICITY_FDVGRID_DATA',op=None,
UIinfo ={'groupes':('solver',)},
number_pixel_row_cube=SIMP(typ='I',fr= "number of voxel in a row, all produced images will be NxNxN large",ang= "number of voxel in a row, all produced images will be NxNxN large",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
easy_solve=SIMP(typ='TXM',fr= "Choose the solver !",ang= "Choose the solver !",docu= "",statut= "o",into=('LOW_RAM', 'MATRIX_FREE', 'LOW_CPU', 'CG_SOR', 'MULTIGRID', 'NONE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
input_path=SIMP(typ='Repertoire',fr= "path to the input directory (ex : input/)",ang= "path to the input directory (ex : input/)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_path=SIMP(typ='Repertoire',fr= "path to the output directory",ang= "path to the output directory",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
ratio_filename_dat=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the input file describing the local volumic ratio of inclusion (3d image), ex micro_dis.dat",ang= "name of the input file describing the local volumic ratio of inclusion (3d image), ex micro_dis.dat",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
E_inclusion=SIMP(typ='R',fr= "Young modulus in inclusions",ang= "Young modulus in inclusions",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nu_inclusion=SIMP(typ='R',fr= "Poisson ratio in inclusions",ang= "Poisson ratio in inclusions",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
E_matrice=SIMP(typ='R',fr= "Young modulus in matrix",ang= "Young modulus in matrix",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nu_matrice=SIMP(typ='R',fr= "Poisson ratio in matrix",ang= "Poisson ratio in matrix",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
number_proc_micro=SIMP(typ='I',fr= "number of processus used for computing the 3d image of conductivity starting from the 3d image of local volumic ratio of inclusion in each voxel.",ang= "number of processus used for computing the 3d image of conductivity starting from the 3d image of local volumic ratio of inclusion in each voxel.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
number_proc_solver=SIMP(typ='I',fr= "number of processus used for solving the diffusion problem",ang= "number of processus used for solving the diffusion problem",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
number_proc_post=SIMP(typ='I',fr= "number of processus used for post porcessing",ang= "number of processus used for post porcessing",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
multigrid_max_level_number=SIMP(typ='I',fr= "maximum number of level if a MULTIGIRD solver is used",ang= "maximum number of level if a MULTIGIRD solver is used",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=42),
configuration_file=SIMP(typ='TXM',fr= "path and name of the configuration file than the python interface will produce for the various .exe",ang= "path and name of the configuration file than the python interface will produce for the various .exe",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_diffusion_fdvgrid.ini'),
kind_of_run=SIMP(typ='TXM',fr= "this component is runable sequential, parallel or as a PBS_job",ang= "this component is runable sequential, parallel or as a PBS_job",docu= "",statut= "f",into=('sequential', 'parallel', 'PBS_job'),min=1,max=1,val_min='**',val_max='**',defaut='sequential'),
start_run=SIMP(typ=bool,fr= "if yes, the conponent will run. It will only produce a batch script otherwise",ang= "if yes, the conponent will run. It will only produce a batch script otherwise",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
exp_id=SIMP(typ='I',fr= "this will be printed in the name of every produced image",ang= "this will be printed in the name of every produced image",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
petsc_option=SIMP(typ='TXM',fr= "add options for PETSC here",ang= "add options for PETSC here",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
all_stdout_in_file=SIMP(typ=bool,fr= "if yes, all logs, profiling issues and errors will be redirected to a file",ang= "if yes, all logs, profiling issues and errors will be redirected to a file",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
grey_element=SIMP(typ='TXM',fr= "How to choose the mechanical behaviour of voxels that are neither in inclusions nor in the matrice ?",ang= "How to choose the mechanical behaviour of voxels that are neither in inclusions nor in the matrice ?",docu= "",statut= "f",into=('REUSS', 'VOIGT'),min=1,max=1,val_min='**',val_max='**',defaut='REUSS'),
x_start=SIMP(typ='I',fr= "offset in x direction when reading the 3D image of local volumic ratio of inclusion",ang= "offset in x direction when reading the 3D image of local volumic ratio of inclusion",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
y_start=SIMP(typ='I',fr= "offset in y direction when reading the 3D image of local volumic ratio of inclusion",ang= "offset in y direction when reading the 3D image of local volumic ratio of inclusion",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
z_start=SIMP(typ='I',fr= "offset in z direction when reading the 3D image of local volumic ratio of inclusion",ang= "offset in z direction when reading the 3D image of local volumic ratio of inclusion",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
number_nodes=SIMP(typ='I',fr= "number of nodes used (cluster)",ang= "number of nodes used (cluster)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
number_proc_per_node=SIMP(typ='I',fr= "number of processors used per node (cluster)",ang= "number of processors used per node (cluster)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
walltime=SIMP(typ='TXM',fr= "if the job did not end by this time, it will be killed by job manager (format 10:00:00 (hms))",ang= "if the job did not end by this time, it will be killed by job manager (format 10:00:00 (hms))",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
memory=SIMP(typ='TXM',fr= "the memory given here must be larger than the needed one (format 32gb",ang= "the memory given here must be larger than the needed one (format 32gb",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
source_environement=SIMP(typ='TXM',fr= "command to load environnement at start of job (ex: source /logiciels/openmpi/profile",ang= "command to load environnement at start of job (ex: source /logiciels/openmpi/profile",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
periodic_X=SIMP(typ=bool,fr= "if yes, periodic boundary conditions will be applied on corresponding x faces",ang= "if yes, periodic boundary conditions will be applied on corresponding x faces",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
periodic_Y=SIMP(typ=bool,fr= "if yes, periodic boundary conditions will be applied on corresponding y faces",ang= "if yes, periodic boundary conditions will be applied on corresponding y faces",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
periodic_Z=SIMP(typ=bool,fr= "if yes, periodic boundary conditions will be applied on corresponding z faces",ang= "if yes, periodic boundary conditions will be applied on corresponding z faces",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
eps11=SIMP(typ='R',fr= "Average of deformation direction xx (periodic BC)",ang= "Average of deformation direction xx (periodic BC)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
eps22=SIMP(typ='R',fr= "Average of deformation direction yy (periodic BC)",ang= "Average of deformation direction yy (periodic BC)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
eps33=SIMP(typ='R',fr= "Average of deformation direction zz (periodic BC)",ang= "Average of deformation direction zz (periodic BC)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
eps12=SIMP(typ='R',fr= "Average of deformation direction xy (periodic BC)",ang= "Average of deformation direction xy (periodic BC)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
eps13=SIMP(typ='R',fr= "Average of deformation direction xz (periodic BC)",ang= "Average of deformation direction xz (periodic BC)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
eps23=SIMP(typ='R',fr= "Average of deformation direction yz (periodic BC)",ang= "Average of deformation direction yz (periodic BC)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_cx=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.5),
boundary_condition_x_plus_cy=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_x_plus_cz=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_x_minus_cx=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=-0.5),
boundary_condition_x_minus_cy=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_x_minus_cz=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_y_plus_cx=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_y_plus_cy=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.5),
boundary_condition_y_plus_cz=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_y_minus_cx=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_y_minus_cy=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=-0.5),
boundary_condition_y_minus_cz=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_z_plus_cx=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_z_plus_cy=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_z_plus_cz=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.5),
boundary_condition_z_minus_cx=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_z_minus_cy=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
boundary_condition_z_minus_cz=SIMP(typ='R',fr= "position of center of face",ang= "position of center of face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=-0.5),
norm_2_RHS_per_sqrt_pixel=SIMP(typ='R',fr= "norm_2_RHS_per_sqrt(pixel) at start",ang= "norm_2_RHS_per_sqrt(pixel) at start",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
MAP_c_solver_diffusion_fdvgrid_successful=SIMP(typ=bool,fr= "MAP_c_solver_diffusion_fdvgrid_successful",ang= "MAP_c_solver_diffusion_fdvgrid_successful",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
norm_2_residual_per_sqrt_pixel=SIMP(typ='R',fr= "norm_2_residual_per_sqrt(pixel) last",ang= "norm_2_residual_per_sqrt(pixel) last",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
ratio_is=SIMP(typ='R',fr= "ratio between residual and RHS",ang= "ratio between residual and RHS",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
number_of_iteration=SIMP(typ='I',fr= "number_of_iteration",ang= "number_of_iteration",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
time_solver_s=SIMP(typ='R',fr= "time_solver (seconds)",ang= "time_solver (seconds)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
GTx=SIMP(typ='R',fr= "average gradient GTx",ang= "average gradient GTx",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
GTy=SIMP(typ='R',fr= "average gradient GTy",ang= "average gradient GTy",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
GTz=SIMP(typ='R',fr= "average gradient GTz",ang= "average gradient GTz",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
flux_x=SIMP(typ='R',fr= "average flux x direction",ang= "average flux x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
flux_y=SIMP(typ='R',fr= "average flux y direction",ang= "average flux y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
flux_z=SIMP(typ='R',fr= "average flux z direction",ang= "average flux z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
minux_int_TxF=SIMP(typ='R',fr= "minux_int_TxF (-volume integral of Temperature X Flux)",ang= "minux_int_TxF (-volume integral of Temperature X Flux)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_x_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the x plus face, dir x",ang= "kind of bondary conditions on the x plus face, dir x",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_x_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the x direction",ang= "Imposed displacement at the center of the face along the x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_x_dudy=SIMP(typ='R',fr= "rac{du_x}{dy} on this face",ang= "rac{du_x}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_x_dudz=SIMP(typ='R',fr= "rac{du_x}{dz} on this face",ang= "rac{du_x}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_x_T=SIMP(typ='R',fr= "force per area at the center of face along x direction",ang= "force per area at the center of face along x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_x_dTdy=SIMP(typ='R',fr= "rac{dT_x}{dy} on this face",ang= "rac{dT_x}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_x_dTdz=SIMP(typ='R',fr= "rac{dT_x}{dz} on this face",ang= "rac{dT_x}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_x_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the y plus face, dir x",ang= "kind of bondary conditions on the y plus face, dir x",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_x_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the x direction",ang= "Imposed displacement at the center of the face along the x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_x_dudx=SIMP(typ='R',fr= "rac{du_x}{dx} on this face",ang= "rac{du_x}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_x_dudz=SIMP(typ='R',fr= "rac{du_x}{dz} on this face",ang= "rac{du_x}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_x_T=SIMP(typ='R',fr= "force per area at the center of face along x direction",ang= "force per area at the center of face along x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_x_dTdx=SIMP(typ='R',fr= "rac{dT_x}{dx} on this face",ang= "rac{dT_x}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_x_dTdz=SIMP(typ='R',fr= "rac{dT_x}{dz} on this face",ang= "rac{dT_x}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_x_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the z plus face, dir x",ang= "kind of bondary conditions on the z plus face, dir x",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_x_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the x direction",ang= "Imposed displacement at the center of the face along the x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_x_dudx=SIMP(typ='R',fr= "rac{du_x}{dx} on this face",ang= "rac{du_x}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_x_dudy=SIMP(typ='R',fr= "rac{du_x}{dy} on this face",ang= "rac{du_x}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_x_T=SIMP(typ='R',fr= "force per area at the center of face along x direction",ang= "force per area at the center of face along x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_x_dTdx=SIMP(typ='R',fr= "rac{dT_x}{dx} on this face",ang= "rac{dT_x}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_x_dTdy=SIMP(typ='R',fr= "rac{dT_x}{dy} on this face",ang= "rac{dT_x}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_y_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the x plus face, dir y",ang= "kind of bondary conditions on the x plus face, dir y",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_y_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the y direction",ang= "Imposed displacement at the center of the face along the y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_y_dudy=SIMP(typ='R',fr= "rac{du_y}{dy} on this face",ang= "rac{du_y}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_y_dudz=SIMP(typ='R',fr= "rac{du_y}{dz} on this face",ang= "rac{du_y}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_y_T=SIMP(typ='R',fr= "force per area at the center of face along y direction",ang= "force per area at the center of face along y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_y_dTdy=SIMP(typ='R',fr= "rac{dT_y}{dy} on this face",ang= "rac{dT_y}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_y_dTdz=SIMP(typ='R',fr= "rac{dT_y}{dz} on this face",ang= "rac{dT_y}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_y_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the y plus face, dir y",ang= "kind of bondary conditions on the y plus face, dir y",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_y_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the y direction",ang= "Imposed displacement at the center of the face along the y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_y_dudx=SIMP(typ='R',fr= "rac{du_y}{dx} on this face",ang= "rac{du_y}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_y_dudz=SIMP(typ='R',fr= "rac{du_y}{dz} on this face",ang= "rac{du_y}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_y_T=SIMP(typ='R',fr= "force per area at the center of face along y direction",ang= "force per area at the center of face along y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_y_dTdx=SIMP(typ='R',fr= "rac{dT_y}{dx} on this face",ang= "rac{dT_y}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_y_dTdz=SIMP(typ='R',fr= "rac{dT_y}{dz} on this face",ang= "rac{dT_y}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_y_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the z plus face, dir y",ang= "kind of bondary conditions on the z plus face, dir y",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_y_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the y direction",ang= "Imposed displacement at the center of the face along the y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_y_dudx=SIMP(typ='R',fr= "rac{du_y}{dx} on this face",ang= "rac{du_y}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_y_dudy=SIMP(typ='R',fr= "rac{du_y}{dy} on this face",ang= "rac{du_y}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_y_T=SIMP(typ='R',fr= "force per area at the center of face along y direction",ang= "force per area at the center of face along y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_y_dTdx=SIMP(typ='R',fr= "rac{dT_y}{dx} on this face",ang= "rac{dT_y}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_y_dTdy=SIMP(typ='R',fr= "rac{dT_y}{dy} on this face",ang= "rac{dT_y}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_z_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the x plus face, dir z",ang= "kind of bondary conditions on the x plus face, dir z",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_z_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the z direction",ang= "Imposed displacement at the center of the face along the z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_z_dudy=SIMP(typ='R',fr= "rac{du_z}{dy} on this face",ang= "rac{du_z}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_z_dudz=SIMP(typ='R',fr= "rac{du_z}{dz} on this face",ang= "rac{du_z}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_z_T=SIMP(typ='R',fr= "force per area at the center of face along z direction",ang= "force per area at the center of face along z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_z_dTdy=SIMP(typ='R',fr= "rac{dT_z}{dy} on this face",ang= "rac{dT_z}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_z_dTdz=SIMP(typ='R',fr= "rac{dT_z}{dz} on this face",ang= "rac{dT_z}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_z_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the y plus face, dir z",ang= "kind of bondary conditions on the y plus face, dir z",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_z_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the z direction",ang= "Imposed displacement at the center of the face along the z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_z_dudx=SIMP(typ='R',fr= "rac{du_z}{dx} on this face",ang= "rac{du_z}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_z_dudz=SIMP(typ='R',fr= "rac{du_z}{dz} on this face",ang= "rac{du_z}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_z_T=SIMP(typ='R',fr= "force per area at the center of face along z direction",ang= "force per area at the center of face along z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_z_dTdx=SIMP(typ='R',fr= "rac{dT_z}{dx} on this face",ang= "rac{dT_z}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_z_dTdz=SIMP(typ='R',fr= "rac{dT_z}{dz} on this face",ang= "rac{dT_z}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_z_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the z plus face, dir z",ang= "kind of bondary conditions on the z plus face, dir z",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_z_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the z direction",ang= "Imposed displacement at the center of the face along the z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_z_dudx=SIMP(typ='R',fr= "rac{du_z}{dx} on this face",ang= "rac{du_z}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_z_dudy=SIMP(typ='R',fr= "rac{du_z}{dy} on this face",ang= "rac{du_z}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_z_T=SIMP(typ='R',fr= "force per area at the center of face along z direction",ang= "force per area at the center of face along z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_z_dTdx=SIMP(typ='R',fr= "rac{dT_z}{dx} on this face",ang= "rac{dT_z}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_z_dTdy=SIMP(typ='R',fr= "rac{dT_z}{dy} on this face",ang= "rac{dT_z}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_x_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the x minus face, dir x",ang= "kind of bondary conditions on the x minus face, dir x",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_x_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the x direction",ang= "Imposed displacement at the center of the face along the x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_x_dudy=SIMP(typ='R',fr= "rac{du_x}{dy} on this face",ang= "rac{du_x}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_x_dudz=SIMP(typ='R',fr= "rac{du_x}{dz} on this face",ang= "rac{du_x}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_x_T=SIMP(typ='R',fr= "force per area at the center of face along x direction",ang= "force per area at the center of face along x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_x_dTdy=SIMP(typ='R',fr= "rac{dT_x}{dy} on this face",ang= "rac{dT_x}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_x_dTdz=SIMP(typ='R',fr= "rac{dT_x}{dz} on this face",ang= "rac{dT_x}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_x_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the y minus face, dir x",ang= "kind of bondary conditions on the y minus face, dir x",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_x_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the x direction",ang= "Imposed displacement at the center of the face along the x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_x_dudx=SIMP(typ='R',fr= "rac{du_x}{dx} on this face",ang= "rac{du_x}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_x_dudz=SIMP(typ='R',fr= "rac{du_x}{dz} on this face",ang= "rac{du_x}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_x_T=SIMP(typ='R',fr= "force per area at the center of face along x direction",ang= "force per area at the center of face along x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_x_dTdx=SIMP(typ='R',fr= "rac{dT_x}{dx} on this face",ang= "rac{dT_x}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_x_dTdz=SIMP(typ='R',fr= "rac{dT_x}{dz} on this face",ang= "rac{dT_x}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_x_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the z minus face, dir x",ang= "kind of bondary conditions on the z minus face, dir x",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_x_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the x direction",ang= "Imposed displacement at the center of the face along the x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_x_dudx=SIMP(typ='R',fr= "rac{du_x}{dx} on this face",ang= "rac{du_x}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_x_dudy=SIMP(typ='R',fr= "rac{du_x}{dy} on this face",ang= "rac{du_x}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_x_T=SIMP(typ='R',fr= "force per area at the center of face along x direction",ang= "force per area at the center of face along x direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_x_dTdx=SIMP(typ='R',fr= "rac{dT_x}{dx} on this face",ang= "rac{dT_x}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_x_dTdy=SIMP(typ='R',fr= "rac{dT_x}{dy} on this face",ang= "rac{dT_x}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_y_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the x minus face, dir y",ang= "kind of bondary conditions on the x minus face, dir y",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_y_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the y direction",ang= "Imposed displacement at the center of the face along the y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_y_dudy=SIMP(typ='R',fr= "rac{du_y}{dy} on this face",ang= "rac{du_y}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_y_dudz=SIMP(typ='R',fr= "rac{du_y}{dz} on this face",ang= "rac{du_y}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_y_T=SIMP(typ='R',fr= "force per area at the center of face along y direction",ang= "force per area at the center of face along y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_y_dTdy=SIMP(typ='R',fr= "rac{dT_y}{dy} on this face",ang= "rac{dT_y}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_y_dTdz=SIMP(typ='R',fr= "rac{dT_y}{dz} on this face",ang= "rac{dT_y}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_y_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the y minus face, dir y",ang= "kind of bondary conditions on the y minus face, dir y",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_y_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the y direction",ang= "Imposed displacement at the center of the face along the y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_y_dudx=SIMP(typ='R',fr= "rac{du_y}{dx} on this face",ang= "rac{du_y}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_y_dudz=SIMP(typ='R',fr= "rac{du_y}{dz} on this face",ang= "rac{du_y}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_y_T=SIMP(typ='R',fr= "force per area at the center of face along y direction",ang= "force per area at the center of face along y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_y_dTdx=SIMP(typ='R',fr= "rac{dT_y}{dx} on this face",ang= "rac{dT_y}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_y_dTdz=SIMP(typ='R',fr= "rac{dT_y}{dz} on this face",ang= "rac{dT_y}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_y_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the z minus face, dir y",ang= "kind of bondary conditions on the z minus face, dir y",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_y_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the y direction",ang= "Imposed displacement at the center of the face along the y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_y_dudx=SIMP(typ='R',fr= "rac{du_y}{dx} on this face",ang= "rac{du_y}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_y_dudy=SIMP(typ='R',fr= "rac{du_y}{dy} on this face",ang= "rac{du_y}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_y_T=SIMP(typ='R',fr= "force per area at the center of face along y direction",ang= "force per area at the center of face along y direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_y_dTdx=SIMP(typ='R',fr= "rac{dT_y}{dx} on this face",ang= "rac{dT_y}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_y_dTdy=SIMP(typ='R',fr= "rac{dT_y}{dy} on this face",ang= "rac{dT_y}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_z_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the x minus face, dir z",ang= "kind of bondary conditions on the x minus face, dir z",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_z_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the z direction",ang= "Imposed displacement at the center of the face along the z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_z_dudy=SIMP(typ='R',fr= "rac{du_z}{dy} on this face",ang= "rac{du_z}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_z_dudz=SIMP(typ='R',fr= "rac{du_z}{dz} on this face",ang= "rac{du_z}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_z_T=SIMP(typ='R',fr= "force per area at the center of face along z direction",ang= "force per area at the center of face along z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_z_dTdy=SIMP(typ='R',fr= "rac{dT_z}{dy} on this face",ang= "rac{dT_z}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_z_dTdz=SIMP(typ='R',fr= "rac{dT_z}{dz} on this face",ang= "rac{dT_z}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_z_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the y minus face, dir z",ang= "kind of bondary conditions on the y minus face, dir z",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_z_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the z direction",ang= "Imposed displacement at the center of the face along the z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_z_dudx=SIMP(typ='R',fr= "rac{du_z}{dx} on this face",ang= "rac{du_z}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_z_dudz=SIMP(typ='R',fr= "rac{du_z}{dz} on this face",ang= "rac{du_z}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_z_T=SIMP(typ='R',fr= "force per area at the center of face along z direction",ang= "force per area at the center of face along z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_z_dTdx=SIMP(typ='R',fr= "rac{dT_z}{dx} on this face",ang= "rac{dT_z}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_z_dTdz=SIMP(typ='R',fr= "rac{dT_z}{dz} on this face",ang= "rac{dT_z}{dz} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_z_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the z minus face, dir z",ang= "kind of bondary conditions on the z minus face, dir z",docu= "",statut= "f",into=('DISPLACEMENT', 'FORCE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_z_u0=SIMP(typ='R',fr= "Imposed displacement at the center of the face along the z direction",ang= "Imposed displacement at the center of the face along the z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_z_dudx=SIMP(typ='R',fr= "rac{du_z}{dx} on this face",ang= "rac{du_z}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_z_dudy=SIMP(typ='R',fr= "rac{du_z}{dy} on this face",ang= "rac{du_z}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_z_T=SIMP(typ='R',fr= "force per area at the center of face along z direction",ang= "force per area at the center of face along z direction",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_z_dTdx=SIMP(typ='R',fr= "rac{dT_z}{dx} on this face",ang= "rac{dT_z}{dx} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_z_dTdy=SIMP(typ='R',fr= "rac{dT_z}{dy} on this face",ang= "rac{dT_z}{dy} on this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
Av_EPS11=SIMP(typ='R',fr= "Average of EPS11",ang= "Average of EPS11",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_EPS22=SIMP(typ='R',fr= "Average of EPS22",ang= "Average of EPS22",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_EPS33=SIMP(typ='R',fr= "Average of EPS33",ang= "Average of EPS33",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_EPS12=SIMP(typ='R',fr= "Average of EPS12",ang= "Average of EPS12",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_EPS13=SIMP(typ='R',fr= "Average of EPS13",ang= "Average of EPS13",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_EPS23=SIMP(typ='R',fr= "Average of EPS23",ang= "Average of EPS23",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_SIG11=SIMP(typ='R',fr= "Average of SIG11",ang= "Average of SIG11",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_SIG22=SIMP(typ='R',fr= "Average of SIG22",ang= "Average of SIG22",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_SIG33=SIMP(typ='R',fr= "Average of SIG33",ang= "Average of SIG33",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_SIG12=SIMP(typ='R',fr= "Average of SIG12",ang= "Average of SIG12",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_SIG13=SIMP(typ='R',fr= "Average of SIG13",ang= "Average of SIG13",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
Av_SIG23=SIMP(typ='R',fr= "Average of SIG23",ang= "Average of SIG23",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_morphology_gravel
# ======================================================================
C_PRE_MORPHOLOGY_GRAVEL_DATA=PROC(nom='C_PRE_MORPHOLOGY_GRAVEL_DATA',op=None,
UIinfo ={'groupes':('pre',)},
multiscale=SIMP(typ='TXM',fr= "determine, in the case of the microstructure computation if it is multiscale or no",ang= "determine, in the case of the microstructure computation if it is multiscale or no",docu= "",statut= "o",into=['yes', 'no'],min=1,max=1,val_min='**',val_max='**',defaut='no'),
multiscale_yes=BLOC(condition="(multiscale=='yes')",
random_seed=SIMP(typ='I',fr= "gives the value of the seed used to initialize the random process. This parameter is optional, if it is not given, random is initialised with time. The parameter is mainly used for non-regression tests purpose.",ang= "gives the value of the seed used to initialize the random process. This parameter is optional, if it is not given, random is initialised with time. The parameter is mainly used for non-regression tests purpose.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1332150941),
computation=SIMP(typ='TXM',fr= "determines the type of computation",ang= "determines the type of computation",docu= "",statut= "o",into=['microstructure'],min=1,max=1,val_min='**',val_max='**',defaut='microstructure'),
size=SIMP(typ='I',fr= "size of the image (discretization in the case of the covariance measurment)",ang= "size of the image (discretization in the case of the covariance measurment)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=250),
lambda_poisson=SIMP(typ='R',fr= "density planes for buiding microstructures for class 1 polyhedra",ang= "density planes for buiding microstructures for class 1 polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.035),
fraction=SIMP(typ='R',fr= "volume fraction for class 1 polyhedra",ang= "volume fraction for class 1 polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.15),
voxel_side=SIMP(typ='R',fr= "resolution of the output image",ang= "resolution of the output image",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=1.0),
raw_type=SIMP(typ='TXM',fr= "unused",ang= "unused",docu= "",statut= "o",into=['image'],min=1,max=1,val_min='**',val_max='**',defaut='image'),
file_out_txt=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "text ascii file output that describes the list of polyhedra",ang= "text ascii file output that describes the list of polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_pre_morphology_gravel.txt'),
file_out_raw=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "binary file output for binarized image",ang= "binary file output for binarized image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_pre_morphology_gravel.raw'),
lambda_poisson2=SIMP(typ='R',fr= "density planes for buiding microstructures for class 2 polyhedra",ang= "density planes for buiding microstructures for class 2 polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
lambda_poisson3=SIMP(typ='R',fr= "density planes for buiding microstructures for class 3 polyhedra",ang= "density planes for buiding microstructures for class 3 polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
fraction2=SIMP(typ='R',fr= "volume fraction for class 2 polyhedra",ang= "volume fraction for class 2 polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
fraction3=SIMP(typ='R',fr= "volume fraction for class 3 polyhedra",ang= "volume fraction for class 3 polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
r0=SIMP(typ='R',fr= "smaller radius of lambda_Poisson polyhedra",ang= "smaller radius of lambda_Poisson polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
r1=SIMP(typ='R',fr= "larger radius of lambda_Poisson polyhedra, smaller of lambda_poisson2",ang= "larger radius of lambda_Poisson polyhedra, smaller of lambda_poisson2",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
r2=SIMP(typ='R',fr= "larger radius of lambda_Poisson2 polyhedra, smaller of lambda_poisson3",ang= "larger radius of lambda_Poisson2 polyhedra, smaller of lambda_poisson3",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
r3=SIMP(typ='R',fr= "larger radius of lambda_Poisson polyhedra3",ang= "larger radius of lambda_Poisson polyhedra3",docu= "",statut= "f",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
step=SIMP(typ='R',fr= "translation step used in displacement process when intersection occurs",ang= "translation step used in displacement process when intersection occurs",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
voids=SIMP(typ='R',fr= "fraction of voids according to experimental pore distribution",ang= "fraction of voids according to experimental pore distribution",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
),
multiscale_no=BLOC(condition="(multiscale=='no')",
random_seed=SIMP(typ='I',fr= "gives the value of the seed used to initialize the random process. This parameter is optional, if it is not given, random is initialised with time. The parameter is mainly used for non-regression tests purpose.",ang= "gives the value of the seed used to initialize the random process. This parameter is optional, if it is not given, random is initialised with time. The parameter is mainly used for non-regression tests purpose.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1332150941),
computation=SIMP(typ='TXM',fr= "determines the type of computation",ang= "determines the type of computation",docu= "",statut= "o",into=['microstructure'],min=1,max=1,val_min='**',val_max='**',defaut='microstructure'),
size=SIMP(typ='I',fr= "size of the image (discretization in the case of the covariance measurment)",ang= "size of the image (discretization in the case of the covariance measurment)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=250),
lambda_poisson=SIMP(typ='R',fr= "density planes for buiding microstructures for class 1 polyhedra",ang= "density planes for buiding microstructures for class 1 polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.035),
fraction=SIMP(typ='R',fr= "volume fraction for class 1 polyhedra",ang= "volume fraction for class 1 polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.15),
voxel_side=SIMP(typ='R',fr= "resolution of the output image",ang= "resolution of the output image",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=1.0),
raw_type=SIMP(typ='TXM',fr= "unused",ang= "unused",docu= "",statut= "o",into=['image'],min=1,max=1,val_min='**',val_max='**',defaut='image'),
file_out_txt=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "text ascii file output that describes the list of polyhedra",ang= "text ascii file output that describes the list of polyhedra",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_pre_morphology_gravel.txt'),
file_out_raw=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "binary file output for binarized image",ang= "binary file output for binarized image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_pre_morphology_gravel.raw'),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_image_weld_orientation
# ======================================================================
C_IMAGE_WELD_ORIENTATION_DATA=PROC(nom='C_IMAGE_WELD_ORIENTATION_DATA',op=None,
UIinfo ={'groupes':('image',)},
work_process=SIMP(typ='TXM',fr= "Which computations are made : Orientation, Reparation, Domain, VisualizationEx: OR means Orientation + Reparation",ang= "Which computations are made : Orientation, Reparation, Domain, VisualizationEx: OR means Orientation + Reparation",docu= "",statut= "o",into=['O', 'R', 'D', 'V', 'OR', 'OD', 'OV', 'RD', 'RV', 'DV', 'ORD', 'ORV', 'ODV', 'RDV', 'ORDV'],min=1,max=1,val_min='**',val_max='**',defaut='O'),
work_process_O=BLOC(condition="(work_process=='O')",
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['sample', 'pixel'],min=1,max=1,val_min='**',val_max='**',defaut='sample'),
sample_size=SIMP(typ='I',fr= "Sample size",ang= "Sample size",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=40),
orientation_accuracy=SIMP(typ='I',fr= "Orientation accuracy (in degree)",ang= "Orientation accuracy (in degree)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
),
work_process_R=BLOC(condition="(work_process=='R')",
orientation_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Orientation image",ang= "Orientation image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
confidence_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Confidence image",ang= "Confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
confidence_level=SIMP(typ='R',fr= "Used to threshold the confidence image",ang= "Used to threshold the confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=2.0),
),
work_process_D=BLOC(condition="(work_process=='D')",
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['domain'],min=1,max=1,val_min='**',val_max='**',defaut='domain'),
orientation_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Orientation image",ang= "Orientation image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
level_number=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=4),
smoothing_level=SIMP(typ='R',fr= "More smoothing means smoother boundaries",ang= "More smoothing means smoother boundaries",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.0),
),
work_process_V=BLOC(condition="(work_process=='V')",
orientation_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Orientation image",ang= "Orientation image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
streamlines_pitch=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=20),
),
work_process_OR=BLOC(condition="(work_process=='OR')",
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['sample', 'pixel'],min=1,max=1,val_min='**',val_max='**',defaut='sample'),
sample_size=SIMP(typ='I',fr= "Sample size",ang= "Sample size",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=40),
orientation_accuracy=SIMP(typ='I',fr= "Orientation accuracy (in degree)",ang= "Orientation accuracy (in degree)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
confidence_level=SIMP(typ='R',fr= "Used to threshold the confidence image",ang= "Used to threshold the confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=2.0),
),
work_process_OD=BLOC(condition="(work_process=='OD')",
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['sample', 'pixel'],min=1,max=1,val_min='**',val_max='**',defaut='sample'),
sample_size=SIMP(typ='I',fr= "Sample size",ang= "Sample size",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=40),
orientation_accuracy=SIMP(typ='I',fr= "Orientation accuracy (in degree)",ang= "Orientation accuracy (in degree)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
level_number=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=4),
smoothing_level=SIMP(typ='R',fr= "More smoothing means smoother boundaries",ang= "More smoothing means smoother boundaries",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.0),
),
work_process_OV=BLOC(condition="(work_process=='OV')",
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['sample', 'pixel'],min=1,max=1,val_min='**',val_max='**',defaut='sample'),
sample_size=SIMP(typ='I',fr= "Sample size",ang= "Sample size",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=40),
orientation_accuracy=SIMP(typ='I',fr= "Orientation accuracy (in degree)",ang= "Orientation accuracy (in degree)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
streamlines_pitch=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=20),
),
work_process_RD=BLOC(condition="(work_process=='RD')",
orientation_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Orientation image",ang= "Orientation image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
confidence_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Confidence image",ang= "Confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
confidence_level=SIMP(typ='R',fr= "Used to threshold the confidence image",ang= "Used to threshold the confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=2.0),
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['domain'],min=1,max=1,val_min='**',val_max='**',defaut='domain'),
level_number=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=4),
smoothing_level=SIMP(typ='R',fr= "More smoothing means smoother boundaries",ang= "More smoothing means smoother boundaries",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.0),
),
work_process_RV=BLOC(condition="(work_process=='RV')",
orientation_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Orientation image",ang= "Orientation image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
confidence_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Confidence image",ang= "Confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
confidence_level=SIMP(typ='R',fr= "Used to threshold the confidence image",ang= "Used to threshold the confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=2.0),
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
streamlines_pitch=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=20),
),
work_process_DV=BLOC(condition="(work_process=='DV')",
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['domain'],min=1,max=1,val_min='**',val_max='**',defaut='domain'),
orientation_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Orientation image",ang= "Orientation image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
level_number=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=4),
smoothing_level=SIMP(typ='R',fr= "More smoothing means smoother boundaries",ang= "More smoothing means smoother boundaries",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.0),
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
streamlines_pitch=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=20),
),
work_process_ORD=BLOC(condition="(work_process=='ORD')",
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
sample_size=SIMP(typ='I',fr= "Sample size",ang= "Sample size",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=40),
orientation_accuracy=SIMP(typ='I',fr= "Orientation accuracy (in degree)",ang= "Orientation accuracy (in degree)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
confidence_level=SIMP(typ='R',fr= "Used to threshold the confidence image",ang= "Used to threshold the confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=2.0),
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['domain'],min=1,max=1,val_min='**',val_max='**',defaut='domain'),
level_number=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=4),
smoothing_level=SIMP(typ='R',fr= "More smoothing means smoother boundaries",ang= "More smoothing means smoother boundaries",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.0),
),
work_process_ORV=BLOC(condition="(work_process=='ORV')",
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['sample', 'pixel'],min=1,max=1,val_min='**',val_max='**',defaut='sample'),
sample_size=SIMP(typ='I',fr= "Sample size",ang= "Sample size",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=40),
orientation_accuracy=SIMP(typ='I',fr= "Orientation accuracy (in degree)",ang= "Orientation accuracy (in degree)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
confidence_level=SIMP(typ='R',fr= "Used to threshold the confidence image",ang= "Used to threshold the confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=2.0),
streamlines_pitch=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=20),
),
work_process_ODV=BLOC(condition="(work_process=='ODV')",
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
sample_size=SIMP(typ='I',fr= "Sample size",ang= "Sample size",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=40),
orientation_accuracy=SIMP(typ='I',fr= "Orientation accuracy (in degree)",ang= "Orientation accuracy (in degree)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['domain'],min=1,max=1,val_min='**',val_max='**',defaut='domain'),
level_number=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=4),
smoothing_level=SIMP(typ='R',fr= "More smoothing means smoother boundaries",ang= "More smoothing means smoother boundaries",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.0),
streamlines_pitch=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=20),
),
work_process_RDV=BLOC(condition="(work_process=='RDV')",
orientation_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Orientation image",ang= "Orientation image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
confidence_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Confidence image",ang= "Confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
confidence_level=SIMP(typ='R',fr= "Used to threshold the confidence image",ang= "Used to threshold the confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=2.0),
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['domain'],min=1,max=1,val_min='**',val_max='**',defaut='domain'),
level_number=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=4),
smoothing_level=SIMP(typ='R',fr= "More smoothing means smoother boundaries",ang= "More smoothing means smoother boundaries",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.0),
streamlines_pitch=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=20),
),
work_process_ORDV=BLOC(condition="(work_process=='ORDV')",
weld_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Weld image",ang= "Weld image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
sample_size=SIMP(typ='I',fr= "Sample size",ang= "Sample size",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=40),
orientation_accuracy=SIMP(typ='I',fr= "Orientation accuracy (in degree)",ang= "Orientation accuracy (in degree)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
confidence_level=SIMP(typ='R',fr= "Used to threshold the confidence image",ang= "Used to threshold the confidence image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=2.0),
computation_mode=SIMP(typ='TXM',fr= "Computation mode",ang= "Computation mode",docu= "",statut= "o",into=['domain'],min=1,max=1,val_min='**',val_max='**',defaut='domain'),
level_number=SIMP(typ='I',fr= "Number of color levels",ang= "Number of color levels",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=4),
smoothing_level=SIMP(typ='R',fr= "More smoothing means smoother boundaries",ang= "More smoothing means smoother boundaries",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0.0),
streamlines_pitch=SIMP(typ='I',fr= "Number of level",ang= "Number of level",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=20),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_image_2d_align
# ======================================================================
C_IMAGE_2D_ALIGN_DATA=PROC(nom='C_IMAGE_2D_ALIGN_DATA',op=None,
UIinfo ={'groupes':('image',)},
input_directory=SIMP(typ='Repertoire',fr= "directory where the input images are read",ang= "directory where the input images are read",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_directory=SIMP(typ='Repertoire',fr= "directory where the aligned images are to be written",ang= "directory where the aligned images are to be written",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
shift=SIMP(typ='R',fr= "number of pixel each image is to be shifted from the previous one",ang= "number of pixel each image is to be shifted from the previous one",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
gui=SIMP(typ=bool,fr= "Run the Graphical User Interface if set to True",ang= "Run the Graphical User Interface if set to True",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
)
# ======================================================================
# Catalog entry for the MAP function : c_image_2d_threshold
# ======================================================================
C_IMAGE_2D_THRESHOLD_DATA=PROC(nom='C_IMAGE_2D_THRESHOLD_DATA',op=None,
UIinfo ={'groupes':('image',)},
image_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "input image",ang= "input image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
threshold_level=SIMP(typ='R',fr= "(optional if GUI is used, mandatory otherwise) Threshold level applied to each input image file",ang= "(optional if GUI is used, mandatory otherwise) Threshold level applied to each input image file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=120.0),
gui=SIMP(typ=bool,fr= "Run the Graphical User Interface if set to True",ang= "Run the Graphical User Interface if set to True",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
background_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "background image for GUI preview",ang= "background image for GUI preview",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_prefix=SIMP(typ='TXM',fr= "Prefix appended before the output file name",ang= "Prefix appended before the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_suffix=SIMP(typ='TXM',fr= "Suffix appended after the output file name",ang= "Suffix appended after the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut='_thresholded'),
output_directory=SIMP(typ='Repertoire',fr= "path where each output file is written",ang= "path where each output file is written",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut='.'),
output_format=SIMP(typ='TXM',fr= "output format",ang= "output format",docu= "",statut= "f",into=['png', 'tif', 'csv', 'raw', 'edf'],min=1,max=1,val_min='**',val_max='**',defaut='png'),
)
# ======================================================================
# Catalog entry for the MAP function : c_solver_stiff_ode_1d
# ======================================================================
C_SOLVER_STIFF_ODE_1D_DATA=PROC(nom='C_SOLVER_STIFF_ODE_1D_DATA',op=None,
UIinfo ={'groupes':('solver',)},
study_name=SIMP(typ='TXM',fr= "Describes the name of the study, is used in the metadata of the output, ...",ang= "Describes the name of the study, is used in the metadata of the output, ...",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Name of the text file where the resulting fields are written at different time steps.",ang= "Name of the text file where the resulting fields are written at different time steps.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
calculation_parameter_names=SIMP(typ='TXM',fr= "Names of the calculation parameters such as the calculation time, number of node, agings conditions ... This list MUST have the same number of parameters as calculation_parameters.",ang= "Names of the calculation parameters such as the calculation time, number of node, agings conditions ... This list MUST have the same number of parameters as calculation_parameters.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
calculation_parameters=SIMP(typ='TXM',fr= "Calculation parameters values. This list MUST have the same number of parameters as calculation_parameter_names.",ang= "Calculation parameters values. This list MUST have the same number of parameters as calculation_parameter_names.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names=SIMP(typ='TXM',fr= "Names of coefficients which follow Arrhenius law. This list MUST have the same number of parameters as Arrhenius_A and Arrhenius_Ea.",ang= "Names of coefficients which follow Arrhenius law. This list MUST have the same number of parameters as Arrhenius_A and Arrhenius_Ea.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "Arrhenius law pre exponential factors. This list MUST have the same number of parameter as Arrhenius_names and Arrhenius_Ea.",ang= "Arrhenius law pre exponential factors. This list MUST have the same number of parameter as Arrhenius_names and Arrhenius_Ea.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "Arrhenius law activation energy. This list MUST have the same number of parameter as Arrhenius_name and Arrhenius_A.",ang= "Arrhenius law activation energy. This list MUST have the same number of parameter as Arrhenius_name and Arrhenius_A.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coef_names=SIMP(typ='TXM',fr= "Names of coefficients which do not follow Arrhenius law. This list MUST have the same number of parameter as non_Arrhenius_coef.",ang= "Names of coefficients which do not follow Arrhenius law. This list MUST have the same number of parameter as non_Arrhenius_coef.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coefs=SIMP(typ='TXM',fr= "Non Arrhenius coefficients values. This list MUST have the same number of parameter as Non_Arrhenius_coef_names.",ang= "Non Arrhenius coefficients values. This list MUST have the same number of parameter as Non_Arrhenius_coef_names.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_value_names=SIMP(typ='TXM',fr= "Names of the differential equation unknowns. This list MUST have the same number of parameter as initial_values and equation.",ang= "Names of the differential equation unknowns. This list MUST have the same number of parameter as initial_values and equation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_values=SIMP(typ='TXM',fr= "Initial value of the differential equation unknow. This list MUST have the same number of parameter as initial_value_names and equation.",ang= "Initial value of the differential equation unknow. This list MUST have the same number of parameter as initial_value_names and equation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
equation=SIMP(typ='TXM',fr= "Diffential equation system written in a mathematic form. This list MUST have the same number of parameter as initial_value_names and initial_values.",ang= "Diffential equation system written in a mathematic form. This list MUST have the same number of parameter as initial_value_names and initial_values.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_nodes=SIMP(typ='TXM',fr= "List of nodes where boundary conditions are applied.",ang= "List of nodes where boundary conditions are applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_types=SIMP(typ='TXM',fr= "List of boundary conditions types.",ang= "List of boundary conditions types.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_parameter=SIMP(typ='TXM',fr= "List of Boundary conditions parameter.",ang= "List of Boundary conditions parameter.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_values=SIMP(typ='TXM',fr= "List of values used to define boundary conditions.",ang= "List of values used to define boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_random_experimental_design
# ======================================================================
C_PRE_RANDOM_EXPERIMENTAL_DESIGN_DATA=PROC(nom='C_PRE_RANDOM_EXPERIMENTAL_DESIGN_DATA',op=None,
UIinfo ={'groupes':('pre',)},
random_seed=SIMP(typ='I',fr= "Random seed",ang= "Random seed",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
distributions=SIMP(typ='TXM',fr= "Distribution of each parameter",ang= "Distribution of each parameter",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
dependancy_relationship=SIMP(typ='TXM',fr= "Dependancy relationship for input random parameters",ang= "Dependancy relationship for input random parameters",docu= "",statut= "f",into=['Independent', 'Normal'],min=1,max=1,val_min='**',val_max='**',defaut='Independent'),
corr_matrix_filename=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Correlation matrix filename",ang= "Correlation matrix filename",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
size=SIMP(typ='I',fr= "Size of the experimental design",ang= "Size of the experimental design",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
design_type=SIMP(typ='TXM',fr= "Design type",ang= "Design type",docu= "",statut= "o",into=['MC', 'LHS', 'QMC_Sobol', 'QMC_Halton'],min=1,max=1,val_min='**',val_max='**',defaut=None),
template_file=SIMP(typ='TXM',fr= "Template filename (an empty string means no template)",ang= "Template filename (an empty string means no template)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "csv_output_filename readable with a text editor",ang= "csv_output_filename readable with a text editor",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
xml_output_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "xml_output_filename  readable by OpenTURNS with input distribution information",ang= "xml_output_filename  readable by OpenTURNS with input distribution information",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_interface_mesh
# ======================================================================
C_PRE_INTERFACE_MESH_DATA=PROC(nom='C_PRE_INTERFACE_MESH_DATA',op=None,
UIinfo ={'groupes':('pre',)},
surface_type=SIMP(typ='TXM',fr= "nature of the input surface, select how it is interpreted by the component",ang= "nature of the input surface, select how it is interpreted by the component",docu= "",statut= "o",into=['rectangle_grid', 'crack_fit'],min=1,max=1,val_min='**',val_max='**',defaut='rectangle_grid'),
surface_type_rectangle_grid=BLOC(condition="(surface_type=='rectangle_grid')",
input_surface_field_csv_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Not documented",ang= "Not documented",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_surface_field_csv_metadata_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "input surface field metadata file name. Required if the input surface field file is in CSV format, ignored if metadata is contained in the input surface field file.",ang= "input surface field metadata file name. Required if the input surface field file is in CSV format, ignored if metadata is contained in the input surface field file.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_surf=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "pathname of the file where the output BREP surface is generated",ang= "pathname of the file where the output BREP surface is generated",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_mesh=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "pathname of the file where the output MED mesh is generated",ang= "pathname of the file where the output MED mesh is generated",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
surface_type_crack_fit=BLOC(condition="(surface_type=='crack_fit')",
input_surface_field_csv_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Not documented",ang= "Not documented",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_surface_field_csv_metadata_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "input surface field metadata file name. Required if the input surface field file is in CSV format, ignored if metadata is contained in the input surface field file.",ang= "input surface field metadata file name. Required if the input surface field file is in CSV format, ignored if metadata is contained in the input surface field file.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_surf=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "pathname of the file where the output BREP surface is generated",ang= "pathname of the file where the output BREP surface is generated",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_mesh=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "pathname of the file where the output MED mesh is generated",ang= "pathname of the file where the output MED mesh is generated",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
coeff_polyfit=SIMP(typ='TXM',fr= "tuple coerced to numpy array of shape length 2 (required only if surface_type = crack_fit)",ang= "tuple coerced to numpy array of shape length 2 (required only if surface_type = crack_fit)",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
front_shape=SIMP(typ='TXM',fr= "list of the coefficients of the 1D polynome describing the front shape<tuple coerced to numpy array of shape length 1> (required only if surface_type = crack_fit)",ang= "list of the coefficients of the 1D polynome describing the front shape<tuple coerced to numpy array of shape length 1> (required only if surface_type = crack_fit)",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_post_cobwebplot
# ======================================================================
C_POST_COBWEBPLOT_DATA=PROC(nom='C_POST_COBWEBPLOT_DATA',op=None,
UIinfo ={'groupes':('pre',)},
input_ed_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Name of the file that content the input experimental design",ang= "Name of the file that content the input experimental design",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_ed_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Name of the file that content the output experimental design",ang= "Name of the file that content the output experimental design",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
high_level=SIMP(typ='R',fr= "High quantile of output to highlight, greater than low_level",ang= "High quantile of output to highlight, greater than low_level",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=None),
low_level=SIMP(typ='R',fr= "Low quantile of output to highlight, lower than high_level",ang= "Low quantile of output to highlight, lower than high_level",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=None),
image_file_name_prefix=SIMP(typ='TXM',fr= "Prefix to ouput images file names",ang= "Prefix to ouput images file names",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut='cobWeb-'),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_polymer_kinetics_study
# ======================================================================
C_PRE_POLYMER_KINETICS_STUDY_DATA=PROC(nom='C_PRE_POLYMER_KINETICS_STUDY_DATA',op=None,
UIinfo ={'groupes':('pre',)},
model=SIMP(typ=bool,fr= "Determines if solver input will be created from a model.",ang= "Determines if solver input will be created from a model.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
applied_post=SIMP(typ=bool,fr= "Determines if a post treatement input will be created.",ang= "Determines if a post treatement input will be created.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
applied_graph=SIMP(typ=bool,fr= "Determines if a graphical treatement input will be created.",ang= "Determines if a graphical treatement input will be created.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_True_applied_post_True_applied_graph_True=BLOC(condition="(model==True and applied_post==True and applied_graph==True)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "define the output file name.",ang= "define the output file name.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
job=SIMP(typ='TXM',fr= "type of treatement",ang= "type of treatement",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
solver_input_filename=SIMP(typ='TXM',fr= "Name of the input file given to the solver.",ang= "Name of the input file given to the solver.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_stiff_ode_1d.input'),
computation_parameters=SIMP(typ='TXM',fr= "List of computation parameters.",ang= "List of computation parameters.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
computation_parameter_names=SIMP(typ='TXM',fr= "List of computation parameter names",ang= "List of computation parameter names",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coef_names=SIMP(typ='TXM',fr= "List of parameters which do not follow Arrhenius law.",ang= "List of parameters which do not follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_value_names=SIMP(typ='TXM',fr= "List of the equations unkown parameter.",ang= "List of the equations unkown parameter.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_values=SIMP(typ='TXM',fr= "List of the equations unkown initial values.",ang= "List of the equations unkown initial values.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
equation=SIMP(typ='TXM',fr= "List of equations number which is be used in the model.",ang= "List of equations number which is be used in the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_nodes=SIMP(typ='TXM',fr= "List of nodes where the boundary conditions will be applied.",ang= "List of nodes where the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_parameter=SIMP(typ='TXM',fr= "List of species to whom the boundary conditions will be applied.",ang= "List of species to whom the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_types=SIMP(typ='TXM',fr= "List of type of boundary conditions.",ang= "List of type of boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_values=SIMP(typ='TXM',fr= "List of values for the defiend boundary conditions.",ang= "List of values for the defiend boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base",ang= "Name of the data base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
post_equations=SIMP(typ='TXM',fr= "List of post treatment equations.",ang= "List of post treatment equations.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
integrate=SIMP(typ='TXM',fr= "List of boolean which define if the equation have to be intergrated.",ang= "List of boolean which define if the equation have to be intergrated.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_treatment_names=SIMP(typ='TXM',fr= "List of post treatment names.",ang= "List of post treatment names.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
constant=SIMP(typ='TXM',fr= "List of cinetic parameter names.",ang= "List of cinetic parameter names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
forced_param=SIMP(typ='TXM',fr= "List of cinetic parameter names with a different value than the one used for the solver computation.",ang= "List of cinetic parameter names with a different value than the one used for the solver computation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
prerequisite=SIMP(typ='TXM',fr= "List of parameter list which are prerequisite for the post treatement equation.",ang= "List of parameter list which are prerequisite for the post treatement equation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names_post=SIMP(typ='TXM',fr= "List of parameter names which follow Arrhenius law.",ang= "List of parameter names which follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "List of pre exponetial parameters for Arrhenius law.",ang= "List of pre exponetial parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "List of activation energy parameters for Arrhenius law.",ang= "List of activation energy parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "List of experimental data names.",ang= "List of experimental data names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "List of experimental data files.",ang= "List of experimental data files.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "List of time.",ang= "List of time.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
model_True_applied_post_True_applied_graph_False=BLOC(condition="(model==True and applied_post==True and applied_graph==False)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "define the output file name.",ang= "define the output file name.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
job=SIMP(typ='TXM',fr= "type of treatement",ang= "type of treatement",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
solver_input_filename=SIMP(typ='TXM',fr= "Name of the input file given to the solver.",ang= "Name of the input file given to the solver.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_stiff_ode_1d.input'),
computation_parameters=SIMP(typ='TXM',fr= "List of computation parameters.",ang= "List of computation parameters.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
computation_parameter_names=SIMP(typ='TXM',fr= "List of computation parameter names",ang= "List of computation parameter names",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coef_names=SIMP(typ='TXM',fr= "List of parameters which do not follow Arrhenius law.",ang= "List of parameters which do not follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_value_names=SIMP(typ='TXM',fr= "List of the equations unkown parameter.",ang= "List of the equations unkown parameter.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_values=SIMP(typ='TXM',fr= "List of the equations unkown initial values.",ang= "List of the equations unkown initial values.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
equation=SIMP(typ='TXM',fr= "List of equations number which is be used in the model.",ang= "List of equations number which is be used in the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_nodes=SIMP(typ='TXM',fr= "List of nodes where the boundary conditions will be applied.",ang= "List of nodes where the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_parameter=SIMP(typ='TXM',fr= "List of species to whom the boundary conditions will be applied.",ang= "List of species to whom the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_types=SIMP(typ='TXM',fr= "List of type of boundary conditions.",ang= "List of type of boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_values=SIMP(typ='TXM',fr= "List of values for the defiend boundary conditions.",ang= "List of values for the defiend boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base",ang= "Name of the data base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
post_equations=SIMP(typ='TXM',fr= "List of post treatment equations.",ang= "List of post treatment equations.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
integrate=SIMP(typ='TXM',fr= "List of boolean which define if the equation have to be intergrated.",ang= "List of boolean which define if the equation have to be intergrated.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_treatment_names=SIMP(typ='TXM',fr= "List of post treatment names.",ang= "List of post treatment names.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
constant=SIMP(typ='TXM',fr= "List of cinetic parameter names.",ang= "List of cinetic parameter names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
forced_param=SIMP(typ='TXM',fr= "List of cinetic parameter names with a different value than the one used for the solver computation.",ang= "List of cinetic parameter names with a different value than the one used for the solver computation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
prerequisite=SIMP(typ='TXM',fr= "List of parameter list which are prerequisite for the post treatement equation.",ang= "List of parameter list which are prerequisite for the post treatement equation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names_post=SIMP(typ='TXM',fr= "List of parameter names which follow Arrhenius law.",ang= "List of parameter names which follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "List of pre exponetial parameters for Arrhenius law.",ang= "List of pre exponetial parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "List of activation energy parameters for Arrhenius law.",ang= "List of activation energy parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
model_True_applied_post_False_applied_graph_True=BLOC(condition="(model==True and applied_post==False and applied_graph==True)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "define the output file name.",ang= "define the output file name.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
job=SIMP(typ='TXM',fr= "type of treatement",ang= "type of treatement",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
solver_input_filename=SIMP(typ='TXM',fr= "Name of the input file given to the solver.",ang= "Name of the input file given to the solver.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_stiff_ode_1d.input'),
computation_parameters=SIMP(typ='TXM',fr= "List of computation parameters.",ang= "List of computation parameters.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
computation_parameter_names=SIMP(typ='TXM',fr= "List of computation parameter names",ang= "List of computation parameter names",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coef_names=SIMP(typ='TXM',fr= "List of parameters which do not follow Arrhenius law.",ang= "List of parameters which do not follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_value_names=SIMP(typ='TXM',fr= "List of the equations unkown parameter.",ang= "List of the equations unkown parameter.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_values=SIMP(typ='TXM',fr= "List of the equations unkown initial values.",ang= "List of the equations unkown initial values.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
equation=SIMP(typ='TXM',fr= "List of equations number which is be used in the model.",ang= "List of equations number which is be used in the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_nodes=SIMP(typ='TXM',fr= "List of nodes where the boundary conditions will be applied.",ang= "List of nodes where the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_parameter=SIMP(typ='TXM',fr= "List of species to whom the boundary conditions will be applied.",ang= "List of species to whom the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_types=SIMP(typ='TXM',fr= "List of type of boundary conditions.",ang= "List of type of boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_values=SIMP(typ='TXM',fr= "List of values for the defiend boundary conditions.",ang= "List of values for the defiend boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base",ang= "Name of the data base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "List of experimental data names.",ang= "List of experimental data names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "List of experimental data files.",ang= "List of experimental data files.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "List of time.",ang= "List of time.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
model_True_applied_post_False_applied_graph_False=BLOC(condition="(model==True and applied_post==False and applied_graph==False)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "define the output file name.",ang= "define the output file name.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
job=SIMP(typ='TXM',fr= "type of treatement",ang= "type of treatement",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
solver_input_filename=SIMP(typ='TXM',fr= "Name of the input file given to the solver.",ang= "Name of the input file given to the solver.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_stiff_ode_1d.input'),
computation_parameters=SIMP(typ='TXM',fr= "List of computation parameters.",ang= "List of computation parameters.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
computation_parameter_names=SIMP(typ='TXM',fr= "List of computation parameter names",ang= "List of computation parameter names",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coef_names=SIMP(typ='TXM',fr= "List of parameters which do not follow Arrhenius law.",ang= "List of parameters which do not follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_value_names=SIMP(typ='TXM',fr= "List of the equations unkown parameter.",ang= "List of the equations unkown parameter.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_values=SIMP(typ='TXM',fr= "List of the equations unkown initial values.",ang= "List of the equations unkown initial values.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
equation=SIMP(typ='TXM',fr= "List of equations number which is be used in the model.",ang= "List of equations number which is be used in the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_nodes=SIMP(typ='TXM',fr= "List of nodes where the boundary conditions will be applied.",ang= "List of nodes where the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_parameter=SIMP(typ='TXM',fr= "List of species to whom the boundary conditions will be applied.",ang= "List of species to whom the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_types=SIMP(typ='TXM',fr= "List of type of boundary conditions.",ang= "List of type of boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_values=SIMP(typ='TXM',fr= "List of values for the defiend boundary conditions.",ang= "List of values for the defiend boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base",ang= "Name of the data base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
model_False_applied_post_True_applied_graph_True=BLOC(condition="(model==False and applied_post==True and applied_graph==True)",
post_equations=SIMP(typ='TXM',fr= "List of post treatment equations.",ang= "List of post treatment equations.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
integrate=SIMP(typ='TXM',fr= "List of boolean which define if the equation have to be intergrated.",ang= "List of boolean which define if the equation have to be intergrated.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_treatment_names=SIMP(typ='TXM',fr= "List of post treatment names.",ang= "List of post treatment names.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
constant=SIMP(typ='TXM',fr= "List of cinetic parameter names.",ang= "List of cinetic parameter names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
forced_param=SIMP(typ='TXM',fr= "List of cinetic parameter names with a different value than the one used for the solver computation.",ang= "List of cinetic parameter names with a different value than the one used for the solver computation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
prerequisite=SIMP(typ='TXM',fr= "List of parameter list which are prerequisite for the post treatement equation.",ang= "List of parameter list which are prerequisite for the post treatement equation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names_post=SIMP(typ='TXM',fr= "List of parameter names which follow Arrhenius law.",ang= "List of parameter names which follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "List of pre exponetial parameters for Arrhenius law.",ang= "List of pre exponetial parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "List of activation energy parameters for Arrhenius law.",ang= "List of activation energy parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "List of experimental data names.",ang= "List of experimental data names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "List of experimental data files.",ang= "List of experimental data files.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "List of time.",ang= "List of time.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
model_False_applied_post_True_applied_graph_False=BLOC(condition="(model==False and applied_post==True and applied_graph==False)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "define the output file name.",ang= "define the output file name.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
post_equations=SIMP(typ='TXM',fr= "List of post treatment equations.",ang= "List of post treatment equations.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
integrate=SIMP(typ='TXM',fr= "List of boolean which define if the equation have to be intergrated.",ang= "List of boolean which define if the equation have to be intergrated.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_treatment_names=SIMP(typ='TXM',fr= "List of post treatment names.",ang= "List of post treatment names.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
constant=SIMP(typ='TXM',fr= "List of cinetic parameter names.",ang= "List of cinetic parameter names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
forced_param=SIMP(typ='TXM',fr= "List of cinetic parameter names with a different value than the one used for the solver computation.",ang= "List of cinetic parameter names with a different value than the one used for the solver computation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
prerequisite=SIMP(typ='TXM',fr= "List of parameter list which are prerequisite for the post treatement equation.",ang= "List of parameter list which are prerequisite for the post treatement equation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names_post=SIMP(typ='TXM',fr= "List of parameter names which follow Arrhenius law.",ang= "List of parameter names which follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "List of pre exponetial parameters for Arrhenius law.",ang= "List of pre exponetial parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "List of activation energy parameters for Arrhenius law.",ang= "List of activation energy parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base",ang= "Name of the data base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
model_False_applied_post_False_applied_graph_True=BLOC(condition="(model==False and applied_post==False and applied_graph==True)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "List of experimental data names.",ang= "List of experimental data names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "List of experimental data files.",ang= "List of experimental data files.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "List of time.",ang= "List of time.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
model_False_applied_post_False_applied_graph_False=BLOC(condition="(model==False and applied_post==False and applied_graph==False)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "List of experimental data names.",ang= "List of experimental data names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "List of experimental data files.",ang= "List of experimental data files.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "List of time.",ang= "List of time.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_image_3d_altitude_thickness
# ======================================================================
C_IMAGE_3D_ALTITUDE_THICKNESS_DATA=PROC(nom='C_IMAGE_3D_ALTITUDE_THICKNESS_DATA',op=None,
UIinfo ={'groupes':('image',)},
calculation=SIMP(typ='TXM',fr= "The calculation type",ang= "The calculation type",docu= "",statut= "o",into=['altitude', 'thickness'],min=1,max=1,val_min='**',val_max='**',defaut='altitude'),
calculation_altitude=BLOC(condition="(calculation=='altitude')",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_grid_field_csv=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "CVS formated grid",ang= "CVS formated grid",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_grid_field_csv_metadata=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "CVS formated grid metadata",ang= "CVS formated grid metadata",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_grid_field_pgm=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "PGM file containing the 3d image",ang= "PGM file containing the 3d image",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness=BLOC(condition="(calculation=='thickness')",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_grid_field_csv=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "CVS formated grid",ang= "CVS formated grid",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_grid_field_csv_metadata=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "CVS formated grid metadata",ang= "CVS formated grid metadata",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_grid_field_pgm=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "PGM file containing the 3d image",ang= "PGM file containing the 3d image",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_image_2d_inclusion_statistics
# ======================================================================
C_IMAGE_2D_INCLUSION_STATISTICS_DATA=PROC(nom='C_IMAGE_2D_INCLUSION_STATISTICS_DATA',op=None,
UIinfo ={'groupes':('image',)},
image_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "pathname of the file of input image",ang= "pathname of the file of input image",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
border_inclusion_option=SIMP(typ='I',fr= "0 : border inclusion area is doubled and their center of mass is set at the boundary, 1 : no special treatment for border inclusion, 2 : border inclusions are discarded",ang= "0 : border inclusion area is doubled and their center of mass is set at the boundary, 1 : no special treatment for border inclusion, 2 : border inclusions are discarded",docu= "",statut= "f",into=[0, 1, 2],min=1,max=1,val_min='**',val_max='**',defaut=0),
output_prefix=SIMP(typ='TXM',fr= "Prefix appended before the output file name",ang= "Prefix appended before the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_suffix=SIMP(typ='TXM',fr= "Suffix appended after the output file name",ang= "Suffix appended after the output file name",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
output_directory=SIMP(typ='Repertoire',fr= "path where each output file is written",ang= "path where each output file is written",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut='refs'),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_polymer_data_management
# ======================================================================
C_PRE_POLYMER_DATA_MANAGEMENT_DATA=PROC(nom='C_PRE_POLYMER_DATA_MANAGEMENT_DATA',op=None,
UIinfo ={'groupes':('pre',)},
gui=SIMP(typ=bool,fr= "Determines if component dedicated GUI is launched.",ang= "Determines if component dedicated GUI is launched.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
folder_output=SIMP(typ='TXM',fr= "Determines the name of the output folder",ang= "Determines the name of the output folder",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model=SIMP(typ=bool,fr= "Determines if model if modified.",ang= "Determines if model if modified.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Determines the study name.",ang= "Determines the study name.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
job=SIMP(typ='TXM',fr= "Name of the study ?",ang= "Name of the study ?",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base ?",ang= "Name of the data base ?",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
comments=SIMP(typ='TXM',fr= "Comments to precise the nature of the study",ang= "Comments to precise the nature of the study",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
comment=SIMP(typ='TXM',fr= "Comments to precise the nature of the study",ang= "Comments to precise the nature of the study",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_name=SIMP(typ='TXM',fr= "Model name.",ang= "Model name.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
solver_input_filename=SIMP(typ='TXM',fr= "Name of the input file given to the solver.",ang= "Name of the input file given to the solver.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_stiff_ode_1d.input'),
applied_post=SIMP(typ=bool,fr= "Determines if a post treatement input will be created.",ang= "Determines if a post treatement input will be created.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_num=SIMP(typ='TXM',fr= "Reference number of the post treatement model in data-base.",ang= "Reference number of the post treatement model in data-base.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
doc=SIMP(typ='TXM',fr= "reference document name.",ang= "reference document name.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
post_treatement=SIMP(typ=bool,fr= "Determines if post treatement will be ask.",ang= "Determines if post treatement will be ask.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
chemical_reaction_representation=SIMP(typ='TXM',fr= "Textual representation of chemical reaction.",ang= "Textual representation of chemical reaction.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
backup=SIMP(typ=bool,fr= "Set True if you want to edit data-base into an ASCII text file.",ang= "Set True if you want to edit data-base into an ASCII text file.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
equation_add=SIMP(typ='TXM',fr= "List of equations number which will be add in the model.",ang= "List of equations number which will be add in the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
equation_removed=SIMP(typ='TXM',fr= "List of equations number which will be removed from the model.",ang= "List of equations number which will be removed from the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
diffusion=SIMP(typ='TXM',fr= "Determines if the diffusion is taken into account by the model.",ang= "Determines if the diffusion is taken into account by the model.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
diffusion_removed=SIMP(typ='TXM',fr= "List of the equations unkown parameter name from which the diffusion ability has been removed form the inital model.",ang= "List of the equations unkown parameter name from which the diffusion ability has been removed form the inital model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
material_name=SIMP(typ='TXM',fr= "Material simulated by the model.",ang= "Material simulated by the model.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
ageing_type=SIMP(typ='TXM',fr= "Aging type simulated by the model.",ang= "Aging type simulated by the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
technical_use=SIMP(typ='TXM',fr= "Determines the technical use for which the model has been developped.",ang= "Determines the technical use for which the model has been developped.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
EDF=SIMP(typ='TXM',fr= "Determines if the model has been developped for EDF.",ang= "Determines if the model has been developped for EDF.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
modification_representation=SIMP(typ='TXM',fr= "Modifed textual representation of chemical reaction.",ang= "Modifed textual representation of chemical reaction.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
reaction_type=SIMP(typ='TXM',fr= "List of reaction type which use this chemical reaction.",ang= "List of reaction type which use this chemical reaction.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
aging_type=SIMP(typ='TXM',fr= "List of aging type which use this chemical reaction.",ang= "List of aging type which use this chemical reaction.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
reactants=SIMP(typ='TXM',fr= "List of chemical reactants used in this chemical reaction.",ang= "List of chemical reactants used in this chemical reaction.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
reactants_add=SIMP(typ='TXM',fr= "List of chemical reactants added in this chemical reaction.",ang= "List of chemical reactants added in this chemical reaction.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
reactants_removed=SIMP(typ='TXM',fr= "List of chemical reactants removed in this chemical reaction.",ang= "List of chemical reactants removed in this chemical reaction.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
solubility_name=SIMP(typ='TXM',fr= "List of the equations unkown parameter name for which the solubility parameter have to be calculated from the aging parameter.",ang= "List of the equations unkown parameter name for which the solubility parameter have to be calculated from the aging parameter.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
solubility=SIMP(typ='TXM',fr= "List of solubility parameter.",ang= "List of solubility parameter.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
evaporation=SIMP(typ='TXM',fr= "Determines if the evaporation is taken into account by the model.",ang= "Determines if the evaporation is taken into account by the model.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
constant_names=SIMP(typ='TXM',fr= "List of cinetic parameter names.",ang= "List of cinetic parameter names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
constant_names_add=SIMP(typ='TXM',fr= "List of cinetic parameter names which will be add.",ang= "List of cinetic parameter names which will be add.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
constant_names_removed=SIMP(typ='TXM',fr= "List of cinetic parameter names which has been removed.",ang= "List of cinetic parameter names which has been removed.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius=SIMP(typ='TXM',fr= "Determines if the cinetic parameter follows Arrhenius law.",ang= "Determines if the cinetic parameter follows Arrhenius law.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
Arrhenius_add=SIMP(typ='TXM',fr= "List of cinetic parameter names which follows the Arrhenius law.",ang= "List of cinetic parameter names which follows the Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
stabilizer=SIMP(typ='TXM',fr= "Determines if the stabilisation is taken into account by the model.",ang= "Determines if the stabilisation is taken into account by the model.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
arrhenius=SIMP(typ='TXM',fr= "Determines if the cinetic parameter follows Arrhenius law.",ang= "Determines if the cinetic parameter follows Arrhenius law.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
non_Arrhenius_coef_names=SIMP(typ='TXM',fr= "List of cinetic parameter names which will be add.",ang= "List of cinetic parameter names which will be add.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coefs=SIMP(typ='TXM',fr= "List of cinetic parameter which will be add.",ang= "List of cinetic parameter which will be add.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names=SIMP(typ='TXM',fr= "Determines if the cinetic parameter follows Arrhenius law.",ang= "Determines if the cinetic parameter follows Arrhenius law.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "Determines if pre exponantial factor.",ang= "Determines if pre exponantial factor.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "Determines if activation energy factor.",ang= "Determines if activation energy factor.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
equation_addition=SIMP(typ='TXM',fr= "new eqaution.",ang= "new eqaution.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
add_equation=SIMP(typ='TXM',fr= "new eqaution.",ang= "new eqaution.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
constituant=SIMP(typ='TXM',fr= "List of post treatment equations parameters names.",ang= "List of post treatment equations parameters names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
name=SIMP(typ='TXM',fr= "post treatment name.",ang= "post treatment name.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
post_equation=SIMP(typ='TXM',fr= "List of post treatment equations.",ang= "List of post treatment equations.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
calculation_results=SIMP(typ='TXM',fr= "List of post treatment equations symbol.",ang= "List of post treatment equations symbol.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
results_units=SIMP(typ='TXM',fr= "List of post treatment equations units.",ang= "List of post treatment equations units.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
remove_equations=SIMP(typ='TXM',fr= "List of post treatment equations which has been removed.",ang= "List of post treatment equations which has been removed.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
remove_calculation_results=SIMP(typ='TXM',fr= "List of post treatment equations symbol which has been removed.",ang= "List of post treatment equations symbol which has been removed.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
remove_results_units=SIMP(typ='TXM',fr= "List of post treatment equations units which has been removed.",ang= "List of post treatment equations units which has been removed.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
integrate=SIMP(typ='TXM',fr= "List of boolean which define if the equation have to be intergrated.",ang= "List of boolean which define if the equation have to be intergrated.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_treatment_names=SIMP(typ='TXM',fr= "List of post treatment names.",ang= "List of post treatment names.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
constant=SIMP(typ='TXM',fr= "List of cinetic parameter names.",ang= "List of cinetic parameter names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
forced_param=SIMP(typ='TXM',fr= "List of cinetic parameter names with a different value than the one used for the solver computation.",ang= "List of cinetic parameter names with a different value than the one used for the solver computation.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
prerequisite=SIMP(typ='TXM',fr= "List of parameter list which are prerequisite for the post treatement equation.",ang= "List of parameter list which are prerequisite for the post treatement equation.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
remove_prerequisite=SIMP(typ='TXM',fr= "List of parameter list which are prerequisite for the post treatement equation has been removed.",ang= "List of parameter list which are prerequisite for the post treatement equation has been removed.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
type=SIMP(typ='TXM',fr= "List of type post treatement types.",ang= "List of type post treatement types.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
remove_constituant=SIMP(typ='TXM',fr= "List of post treatment equations parameters names which has been removed.",ang= "List of post treatment equations parameters names which has been removed.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names_post=SIMP(typ='TXM',fr= "List of parameter names which follow Arrhenius law.",ang= "List of parameter names which follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
const_cine_nom=SIMP(typ='TXM',fr= "List of parameter names which not follow Arrhenius law.",ang= "List of parameter names which not follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
remove_arrhenius=SIMP(typ='TXM',fr= "List of parameter names which follow Arrhenius law which has been removed.",ang= "List of parameter names which follow Arrhenius law which has been removed.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
remove_const_cine_nom=SIMP(typ='TXM',fr= "List of parameter names which not follow Arrhenius law which has been removed.",ang= "List of parameter names which not follow Arrhenius law which has been removed.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_equations=SIMP(typ='TXM',fr= "List of post treatment equations.",ang= "List of post treatment equations.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_post_distribution_properties
# ======================================================================
C_POST_DISTRIBUTION_PROPERTIES_DATA=PROC(nom='C_POST_DISTRIBUTION_PROPERTIES_DATA',op=None,
UIinfo ={'groupes':('post',)},
post=SIMP(typ='TXM',fr= "the value must be included into the following list: CDF (Cumulative Density Function), PDF (Probability Density Function), dgb (distance to grain boundary graph : needs a distance_grain_boundary column in the data file), quantification (computes the optimised distribution in a family of distributions and estimates its parameter)",ang= "the value must be included into the following list: CDF (Cumulative Density Function), PDF (Probability Density Function), dgb (distance to grain boundary graph : needs a distance_grain_boundary column in the data file), quantification (computes the optimised distribution in a family of distributions and estimates its parameter)",docu= "",statut= "o",into=['CDF', 'PDF', 'dgb', 'quantification'],min=1,max=1,val_min='**',val_max='**',defaut='PDF'),
post_CDF=BLOC(condition="(post=='CDF')",
variable_name=SIMP(typ='TXM',fr= "must be the name of one of the columns of the csv file whose name is given by input_grid_field_csv_name",ang= "must be the name of one of the columns of the csv file whose name is given by input_grid_field_csv_name",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
interactive=SIMP(typ=bool,fr= "True -> an interactive window appears when graphs are created.False -> no window.name of the output file of the component",ang= "True -> an interactive window appears when graphs are created.False -> no window.name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
input_grid_field_csv_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the csv format input file (grid_field data read by the component)",ang= "name of the csv format input file (grid_field data read by the component)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_csv_metadata_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the metadata format input file (grid_field data read by the component)",ang= "name of the metadata format input file (grid_field data read by the component)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_distribution_properties_text_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives the name of the output file of the component",ang= "gives the name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_post_distribution_properties.output.csv'),
output_distribution_properties_png_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives the name of the output file of the component",ang= "gives the name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_post_distribution_properties.output.png'),
),
post_PDF=BLOC(condition="(post=='PDF')",
variable_name=SIMP(typ='TXM',fr= "must be the name of one of the columns of the csv file whose name is given by input_grid_field_csv_name",ang= "must be the name of one of the columns of the csv file whose name is given by input_grid_field_csv_name",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
interactive=SIMP(typ=bool,fr= "True -> an interactive window appears when graphs are created.False -> no window.name of the output file of the component",ang= "True -> an interactive window appears when graphs are created.False -> no window.name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
input_grid_field_csv_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the csv format input file (grid_field data read by the component)",ang= "name of the csv format input file (grid_field data read by the component)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_csv_metadata_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the metadata format input file (grid_field data read by the component)",ang= "name of the metadata format input file (grid_field data read by the component)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_distribution_properties_text_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives the name of the output file of the component",ang= "gives the name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_post_distribution_properties.output.csv'),
output_distribution_properties_png_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives the name of the output file of the component",ang= "gives the name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_post_distribution_properties.output.png'),
),
post_dgb=BLOC(condition="(post=='dgb')",
variable_name=SIMP(typ='TXM',fr= "must be the name of one of the columns of the csv file whose name is given by input_grid_field_csv_name",ang= "must be the name of one of the columns of the csv file whose name is given by input_grid_field_csv_name",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
interactive=SIMP(typ=bool,fr= "True -> an interactive window appears when graphs are created.False -> no window.name of the output file of the component",ang= "True -> an interactive window appears when graphs are created.False -> no window.name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
input_grid_field_csv_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the csv format input file (grid_field data read by the component)",ang= "name of the csv format input file (grid_field data read by the component)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_csv_metadata_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the metadata format input file (grid_field data read by the component)",ang= "name of the metadata format input file (grid_field data read by the component)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_distribution_properties_text_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives the name of the output file of the component",ang= "gives the name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_post_distribution_properties.output.csv'),
output_distribution_properties_png_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives the name of the output file of the component",ang= "gives the name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_post_distribution_properties.output.png'),
),
post_quantification=BLOC(condition="(post=='quantification')",
variable_name=SIMP(typ='TXM',fr= "must be the name of one of the columns of the csv file whose name is given by input_grid_field_csv_name",ang= "must be the name of one of the columns of the csv file whose name is given by input_grid_field_csv_name",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
interactive=SIMP(typ=bool,fr= "True -> an interactive window appears when graphs are created.False -> no window.name of the output file of the component",ang= "True -> an interactive window appears when graphs are created.False -> no window.name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
input_grid_field_csv_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the csv format input file (grid_field data read by the component)",ang= "name of the csv format input file (grid_field data read by the component)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_csv_metadata_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the metadata format input file (grid_field data read by the component)",ang= "name of the metadata format input file (grid_field data read by the component)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_distribution_properties_text_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives the name of the output file of the component",ang= "gives the name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_post_distribution_properties.output.csv'),
output_distribution_properties_png_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives the name of the output file of the component",ang= "gives the name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_post_distribution_properties.output.png'),
quantification_options=SIMP(typ='TXM',fr= "this parameter is optional, it is only read in the case where post=quantification. This parameter is given as an enumeration of strings included into the following enumeration : Normal, Weibull, Lognormal, Gamma, Beta, Exponential, Gumbel, Truncatednormal. If the parameter is missing or empty then it is set by default as: Normal, Weibull, Gamma, Beta.",ang= "this parameter is optional, it is only read in the case where post=quantification. This parameter is given as an enumeration of strings included into the following enumeration : Normal, Weibull, Lognormal, Gamma, Beta, Exponential, Gumbel, Truncatednormal. If the parameter is missing or empty then it is set by default as: Normal, Weibull, Gamma, Beta.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_post_poly_chaos
# ======================================================================
C_POST_POLY_CHAOS_DATA=PROC(nom='C_POST_POLY_CHAOS_DATA',op=None,
UIinfo ={'groupes':('post',)},
random_seed=SIMP(typ='I',fr= "Random seed",ang= "Random seed",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_sample=SIMP(typ=('Fichier', 'All Files (*)'),fr= "csv or xml input filename",ang= "csv or xml input filename",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_sample=SIMP(typ=('Fichier', 'All Files (*)'),fr= "csv or xml output filename",ang= "csv or xml output filename",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
distributions=SIMP(typ='TXM',fr= "Distribution of each input parameter",ang= "Distribution of each input parameter",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
polynomial_degree=SIMP(typ='I',fr= "Polynomial degree for PCE",ang= "Polynomial degree for PCE",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
truncature_method=SIMP(typ='R',fr= "Degree of quasi-norm used to retain PCE coefs",ang= "Degree of quasi-norm used to retain PCE coefs",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max=1,defaut=1),
coefficient_computation_method=SIMP(typ='TXM',fr= "Coefficient computation method",ang= "Coefficient computation method",docu= "",statut= "f",into=['LAR', 'OLS'],min=1,max=1,val_min='**',val_max='**',defaut='LAR'),
validation_percentage=SIMP(typ='R',fr= "Input sample percentage used for validation",ang= "Input sample percentage used for validation",docu= "",statut= "o",into=None,min=1,max=1,val_min=5,val_max=50,defaut=None),
validation_graphic=SIMP(typ=bool,fr= "Validation graphics printing",ang= "Validation graphics printing",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
metamodel_sample_size=SIMP(typ='I',fr= "Sample size for metamodel",ang= "Sample size for metamodel",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
csv_metamodel_sample_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "csv metamodel output sample filename",ang= "csv metamodel output sample filename",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
xml_metamodel_sample_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "xml metamodel output sample filename",ang= "xml metamodel output sample filename",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
covariance_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "text file containing covariances",ang= "text file containing covariances",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
pce_validation_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "name of the validation output file",ang= "name of the validation output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
pce_post_pro_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "name of the postprocessing file",ang= "name of the postprocessing file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
xml_pc_result=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "xml file containing input distributions, experimental design         and PC result",ang= "xml file containing input distributions, experimental design         and PC result",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_transverse_empty_c
# ======================================================================
C_TRANSVERSE_EMPTY_C_DATA=PROC(nom='C_TRANSVERSE_EMPTY_C_DATA',op=None,
UIinfo ={'groupes':('transverse',)},
a_string=SIMP(typ='TXM',fr= "simply print in verbose mode",ang= "simply print in verbose mode",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='Hello world of MAP'),
an_integer=SIMP(typ='I',fr= "number of lines in the output file",ang= "number of lines in the output file",docu= "",statut= "o",into=None,min=1,max=1,val_min=1,val_max=100,defaut=4),
fibo_nb_elements=SIMP(typ='I',fr= "number of values to compute in Fibonnacci sequence",ang= "number of values to compute in Fibonnacci sequence",docu= "",statut= "o",into=None,min=1,max=1,val_min=3,val_max=90,sug=20),
a_float=SIMP(typ='R',fr= "simply print in verbose mode",ang= "simply print in verbose mode",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=5.3),
file_output=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives the name of the output file of the component",ang= "gives the name of the output file of the component",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_transverse_empty_c.output'),
)
# ======================================================================
# Catalog entry for the MAP function : c_post_table_fft
# ======================================================================
C_POST_TABLE_FFT_DATA=PROC(nom='C_POST_TABLE_FFT_DATA',op=None,
UIinfo ={'groupes':('post',)},
input_surface_grid_field_csv_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of a file describing the grid surface with coordinates x,y,z in CSV format.",ang= "name of a file describing the grid surface with coordinates x,y,z in CSV format.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_surface_grid_field_csv_metadata_file_name=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the metadata file for input_csv_file_name",ang= "name of the metadata file for input_csv_file_name",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
show_image=SIMP(typ=bool,fr= "if True : an isocontour heights graph of the analyzed surface is produced.",ang= "if True : an isocontour heights graph of the analyzed surface is produced.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
show_spectr=SIMP(typ=bool,fr= "if True : a spectral density graph of the analyzed surface is produced",ang= "if True : a spectral density graph of the analyzed surface is produced",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
interactive=SIMP(typ=bool,fr= "if True, an interactive window appears when graphs are created.",ang= "if True, an interactive window appears when graphs are created.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
output_spectr_x_png_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "spectral density graph of the analyzed surface along x",ang= "spectral density graph of the analyzed surface along x",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_spectr_y_png_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "spectral density graph of the analyzed surface along y",ang= "spectral density graph of the analyzed surface along y",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_surface_grid_field_png_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Isocontour heights graph of the analyzed surface",ang= "Isocontour heights graph of the analyzed surface",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_surface_properties_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "file containing calculated properties of the input surface",ang= "file containing calculated properties of the input surface",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_solver_computation_unit
# ======================================================================
C_SOLVER_COMPUTATION_UNIT_DATA=PROC(nom='C_SOLVER_COMPUTATION_UNIT_DATA',op=None,
UIinfo ={'groupes':('solver',)},
computation_script=SIMP(typ=('Fichier', 'All Files (*)'),fr= "A Python script to be run",ang= "A Python script to be run",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_input_data_filename=SIMP(typ=('Fichier', 'All Files (*)'),fr= "A CSV file that contains NxP values",ang= "A CSV file that contains NxP values",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_data_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "A CSV file that contains NxS values",ang= "A CSV file that contains NxS values",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_morphology_synthesis_spheres
# ======================================================================
C_PRE_MORPHOLOGY_SYNTHESIS_SPHERES_DATA=PROC(nom='C_PRE_MORPHOLOGY_SYNTHESIS_SPHERES_DATA',op=None,
UIinfo ={'groupes':('pre',)},
rve_size=SIMP(typ='R',fr= "size of the RVE.",ang= "size of the RVE.",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
sieve_curve_in=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the input sieve curve. This sieve curve is the ideal distribution of inclusions you want to build your volume.",ang= "name of the input sieve curve. This sieve curve is the ideal distribution of inclusions you want to build your volume.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
sieve_curve_out=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "name of the output sieve curve. This output gives an idea of the way the code has been able to respect the wanted sieve curve.",ang= "name of the output sieve curve. This output gives an idea of the way the code has been able to respect the wanted sieve curve.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
repulsion_distance=SIMP(typ='R',fr= "Minimum distance between two inclusions.",ang= "Minimum distance between two inclusions.",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
file_result_inclusions=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "name of the inclusion list output file",ang= "name of the inclusion list output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
result_log_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "gives some more details on the result of the process : rve_size, volume fraction.",ang= "gives some more details on the result of the process : rve_size, volume fraction.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_solver_diffusion_fdvgrid
# ======================================================================
C_SOLVER_DIFFUSION_FDVGRID_DATA=PROC(nom='C_SOLVER_DIFFUSION_FDVGRID_DATA',op=None,
UIinfo ={'groupes':('solver',)},
type_source=SIMP(typ='TXM',fr= "format of input image describing local volumic ratio of inclusion per voxel (3d image)",ang= "format of input image describing local volumic ratio of inclusion per voxel (3d image)",docu= "",statut= "o",into=('DAT', 'RAW'),min=1,max=1,val_min='**',val_max='**',defaut=None),
lambda_inclusion=SIMP(typ='R',fr= "conductivity in inclusions",ang= "conductivity in inclusions",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
lambda_matrice=SIMP(typ='R',fr= "conductivity in the matrix",ang= "conductivity in the matrix",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
number_pixel_row_cube=SIMP(typ='I',fr= "number of voxel in a row, all produced images will be NxNxN large",ang= "number of voxel in a row, all produced images will be NxNxN large",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
easy_solve=SIMP(typ='TXM',fr= "Choose the solver !",ang= "Choose the solver !",docu= "",statut= "o",into=('LOW_RAM', 'MATRIX_FREE', 'LOW_CPU', 'MULTIGRID', 'NONE'),min=1,max=1,val_min='**',val_max='**',defaut=None),
input_path=SIMP(typ='Repertoire',fr= "path to the input directory (ex : input/)",ang= "path to the input directory (ex : input/)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_path=SIMP(typ='Repertoire',fr= "path to the output directory",ang= "path to the output directory",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
ratio_filename_dat=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the input file describing the local volumic ratio of inclusion (3d image), ex micro_dis.dat",ang= "name of the input file describing the local volumic ratio of inclusion (3d image), ex micro_dis.dat",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
number_proc_micro=SIMP(typ='I',fr= "number of processus used for computing the 3d image of conductivity starting from the 3d image of local volumic ratio of inclusion in each voxel.",ang= "number of processus used for computing the 3d image of conductivity starting from the 3d image of local volumic ratio of inclusion in each voxel.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
number_proc_solver=SIMP(typ='I',fr= "number of processus used for solving the diffusion problem",ang= "number of processus used for solving the diffusion problem",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
number_proc_post=SIMP(typ='I',fr= "number of processus used for post porcessing",ang= "number of processus used for post porcessing",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=1),
configuration_file=SIMP(typ='TXM',fr= "path and name of the configuration file than the python interface will produce for the various .exe",ang= "path and name of the configuration file than the python interface will produce for the various .exe",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_diffusion_fdvgrid.ini'),
kind_of_run=SIMP(typ='TXM',fr= "this component is runable sequential, parallel or as a PBS_job",ang= "this component is runable sequential, parallel or as a PBS_job",docu= "",statut= "f",into=('sequential', 'parallel', 'PBS_job'),min=1,max=1,val_min='**',val_max='**',defaut='sequential'),
start_run=SIMP(typ=bool,fr= "if yes, the conponent will run. It will only produce a batch script otherwise",ang= "if yes, the conponent will run. It will only produce a batch script otherwise",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
exp_id=SIMP(typ='I',fr= "this will be printed in the name of every produced image",ang= "this will be printed in the name of every produced image",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
petsc_option=SIMP(typ='TXM',fr= "add options for PETSC here",ang= "add options for PETSC here",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=''),
all_stdout_in_file=SIMP(typ=bool,fr= "if yes, all logs, profiling issues and errors will be redirected to a file",ang= "if yes, all logs, profiling issues and errors will be redirected to a file",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
VTK=SIMP(typ=bool,fr= "if yes, some VTK files( 3d images) will be printed",ang= "if yes, some VTK files( 3d images) will be printed",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
number_nodes=SIMP(typ='I',fr= "number of nodes used (cluster)",ang= "number of nodes used (cluster)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
number_proc_per_node=SIMP(typ='I',fr= "number of processors used per node (cluster)",ang= "number of processors used per node (cluster)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
walltime=SIMP(typ='TXM',fr= "if the job did not end by this time, it will be killed by job manager (format 10:00:00 (hms))",ang= "if the job did not end by this time, it will be killed by job manager (format 10:00:00 (hms))",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
memory=SIMP(typ='TXM',fr= "the memory given here must be larger than the needed one (format 32gb",ang= "the memory given here must be larger than the needed one (format 32gb",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
source_environement=SIMP(typ='TXM',fr= "command to load environnement at start of job (ex: source /logiciels/openmpi/profile",ang= "command to load environnement at start of job (ex: source /logiciels/openmpi/profile",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
periodic_X=SIMP(typ=bool,fr= "if yes, periodic boundary conditions will be applied on corresponding x faces",ang= "if yes, periodic boundary conditions will be applied on corresponding x faces",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
periodic_Y=SIMP(typ=bool,fr= "if yes, periodic boundary conditions will be applied on corresponding y faces",ang= "if yes, periodic boundary conditions will be applied on corresponding y faces",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
periodic_Z=SIMP(typ=bool,fr= "if yes, periodic boundary conditions will be applied on corresponding z faces",ang= "if yes, periodic boundary conditions will be applied on corresponding z faces",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
boundary_condition_x_delta_T=SIMP(typ='R',fr= "gap of temperature between corresponding points of faces x_plus and x_minus (periodic BC)",ang= "gap of temperature between corresponding points of faces x_plus and x_minus (periodic BC)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_delta_T=SIMP(typ='R',fr= "gap of temperature between corresponding points of faces y_plus and y_minus (periodic BC)",ang= "gap of temperature between corresponding points of faces y_plus and y_minus (periodic BC)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_delta_T=SIMP(typ='R',fr= "gap of temperature between corresponding points of faces z_plus and z_minus (periodic BC)",ang= "gap of temperature between corresponding points of faces z_plus and z_minus (periodic BC)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the x plus face",ang= "kind of bondary conditions on the x plus face",docu= "",statut= "f",into=('DIRICHLET', 'NEUMANN', 'NEWTON'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_T_center_face=SIMP(typ='R',fr= "temperature at the center of the face",ang= "temperature at the center of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_gTy=SIMP(typ='R',fr= "frac(dT)(dy) of the face",ang= "frac(dT)(dy) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_gTz=SIMP(typ='R',fr= "frac(dT)(dz) of the face",ang= "frac(dT)(dz) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_F=SIMP(typ='R',fr= "thermic flux going through this face",ang= "thermic flux going through this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_h=SIMP(typ='R',fr= "heat transfert coefficient",ang= "heat transfert coefficient",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_plus_Text=SIMP(typ='R',fr= "external temperature",ang= "external temperature",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the y minus face",ang= "kind of bondary conditions on the y minus face",docu= "",statut= "f",into=('DIRICHLET', 'NEUMANN', 'NEWTON'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_T_center_face=SIMP(typ='R',fr= "temperature at the center of the face",ang= "temperature at the center of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_gTy=SIMP(typ='R',fr= "frac(dT)(dy) of the face",ang= "frac(dT)(dy) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_gTz=SIMP(typ='R',fr= "frac(dT)(dz) of the face",ang= "frac(dT)(dz) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_F=SIMP(typ='R',fr= "thermic flux going through this face",ang= "thermic flux going through this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_h=SIMP(typ='R',fr= "heat transfert coefficient",ang= "heat transfert coefficient",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_x_minus_Text=SIMP(typ='R',fr= "external temperature",ang= "external temperature",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the y plus face",ang= "kind of bondary conditions on the y plus face",docu= "",statut= "f",into=('DIRICHLET', 'NEUMANN', 'NEWTON'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_T_center_face=SIMP(typ='R',fr= "temperature at the center of the face",ang= "temperature at the center of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_gTx=SIMP(typ='R',fr= "frac(dT)(dx) of the face",ang= "frac(dT)(dx) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_gTz=SIMP(typ='R',fr= "frac(dT)(dz) of the face",ang= "frac(dT)(dz) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_F=SIMP(typ='R',fr= "thermic flux going through this face",ang= "thermic flux going through this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_h=SIMP(typ='R',fr= "heat transfert coefficient",ang= "heat transfert coefficient",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_plus_Text=SIMP(typ='R',fr= "external temperature",ang= "external temperature",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the y minus face",ang= "kind of bondary conditions on the y minus face",docu= "",statut= "f",into=('DIRICHLET', 'NEUMANN', 'NEWTON'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_T_center_face=SIMP(typ='R',fr= "temperature at the center of the face",ang= "temperature at the center of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_gTx=SIMP(typ='R',fr= "frac(dT)(dx) of the face",ang= "frac(dT)(dx) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_gTz=SIMP(typ='R',fr= "frac(dT)(dz) of the face",ang= "frac(dT)(dz) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_F=SIMP(typ='R',fr= "thermic flux going through this face",ang= "thermic flux going through this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_h=SIMP(typ='R',fr= "heat transfert coefficient",ang= "heat transfert coefficient",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_y_minus_Text=SIMP(typ='R',fr= "external temperature",ang= "external temperature",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the z plus face",ang= "kind of bondary conditions on the z plus face",docu= "",statut= "f",into=('DIRICHLET', 'NEUMANN', 'NEWTON'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_T_center_face=SIMP(typ='R',fr= "temperature at the center of the face",ang= "temperature at the center of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_gTx=SIMP(typ='R',fr= "frac(dT)(dx) of the face",ang= "frac(dT)(dx) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_gTy=SIMP(typ='R',fr= "frac(dT)(dy) of the face",ang= "frac(dT)(dy) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_F=SIMP(typ='R',fr= "thermic flux going through this face",ang= "thermic flux going through this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_h=SIMP(typ='R',fr= "heat transfert coefficient",ang= "heat transfert coefficient",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_plus_Text=SIMP(typ='R',fr= "external temperature",ang= "external temperature",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_type=SIMP(typ='TXM',fr= "kind of bondary conditions on the z minus face",ang= "kind of bondary conditions on the z minus face",docu= "",statut= "f",into=('DIRICHLET', 'NEUMANN', 'NEWTON'),min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_T_center_face=SIMP(typ='R',fr= "temperature at the center of the face",ang= "temperature at the center of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_gTx=SIMP(typ='R',fr= "frac(dT)(dx) of the face",ang= "frac(dT)(dx) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_gTy=SIMP(typ='R',fr= "frac(dT)(dy) of the face",ang= "frac(dT)(dy) of the face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_F=SIMP(typ='R',fr= "thermic flux going through this face",ang= "thermic flux going through this face",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_h=SIMP(typ='R',fr= "heat transfert coefficient",ang= "heat transfert coefficient",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
boundary_condition_z_minus_Text=SIMP(typ='R',fr= "external temperature",ang= "external temperature",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
norm_2_RHS_per_sqrt_pixel=SIMP(typ='R',fr= "norm_2_RHS_per_sqrt(pixel) at start",ang= "norm_2_RHS_per_sqrt(pixel) at start",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
MAP_c_solver_diffusion_fdvgrid_successful=SIMP(typ=bool,fr= "MAP_c_solver_diffusion_fdvgrid_successful",ang= "MAP_c_solver_diffusion_fdvgrid_successful",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
norm_2_residual_per_sqrt_pixel=SIMP(typ='R',fr= "norm_2_residual_per_sqrt(pixel) last",ang= "norm_2_residual_per_sqrt(pixel) last",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
ratio_is=SIMP(typ='R',fr= "ratio between residual and RHS",ang= "ratio between residual and RHS",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
number_of_iteration=SIMP(typ='I',fr= "number_of_iteration",ang= "number_of_iteration",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
time_solver_s=SIMP(typ='R',fr= "time_solver (seconds)",ang= "time_solver (seconds)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
GTx=SIMP(typ='R',fr= "Average of GTx",ang= "Average of GTx",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
GTy=SIMP(typ='R',fr= "Average of GTy",ang= "Average of GTy",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
GTz=SIMP(typ='R',fr= "Average of GTz",ang= "Average of GTz",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
flux_x=SIMP(typ='R',fr= "Average of flux_x",ang= "Average of flux_x",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
flux_y=SIMP(typ='R',fr= "Average of flux_y",ang= "Average of flux_y",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
flux_z=SIMP(typ='R',fr= "Average of flux_z",ang= "Average of flux_z",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
minux_int_TxF=SIMP(typ='R',fr= "Average of minux_int_TxF",ang= "Average of minux_int_TxF",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=0),
)
# ======================================================================
# Catalog entry for the MAP function : c_solver_homogenisation_mechanics
# ======================================================================
C_SOLVER_HOMOGENISATION_MECHANICS_DATA=PROC(nom='C_SOLVER_HOMOGENISATION_MECHANICS_DATA',op=None,
UIinfo ={'groupes':('solver',)},
microstructure_composition_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "microstructure's description",ang= "microstructure's description",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
phase_input_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "phases description",ang= "phases description",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
homogenisation_scheme=SIMP(typ='TXM',fr= "homogenisation scheme",ang= "homogenisation scheme",docu= "",statut= "o",into=['Voigt', 'Reuss', 'Self-Consistent', 'Hashin-Shtrikman'],min=1,max=1,val_min='**',val_max='**',defaut=None),
reference_phase_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "reference phase description",ang= "reference phase description",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
effective_properties_text_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "computed effective properties",ang= "computed effective properties",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
effective_properties_visualisation_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "visualisation of effective properties",ang= "visualisation of effective properties",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_pre_morphology_grid_projection
# ======================================================================
C_PRE_MORPHOLOGY_GRID_PROJECTION_DATA=PROC(nom='C_PRE_MORPHOLOGY_GRID_PROJECTION_DATA',op=None,
UIinfo ={'groupes':('pre',)},
phase_scan=SIMP(typ=bool,fr= "switch to scan phase at midpoints of cells edges (for FD codes) [default is to evaluate volume fraction in cells (for FEM, FV, FFT codes)]",ang= "switch to scan phase at midpoints of cells edges (for FD codes) [default is to evaluate volume fraction in cells (for FEM, FV, FFT codes)]",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
radius_first=SIMP(typ=bool,fr= "switch to indicate that in f_micro, radius is on the first column [default: radius is on the last column]",ang= "switch to indicate that in f_micro, radius is on the first column [default: radius is on the last column]",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
n_samples=SIMP(typ='TXM',fr= "number of sample points over cell edges (no space around commas) [default: 8,8[,8]]",ang= "number of sample points over cell edges (no space around commas) [default: 8,8[,8]]",docu= "",statut= "n",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
n_cells=SIMP(typ='TXM',fr= "number of cells along each axis of the RVE (no space around commas), example: 64,64,64",ang= "number of cells along each axis of the RVE (no space around commas), example: 64,64,64",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
f_micro=SIMP(typ=('Fichier', 'All Files (*)'),fr= "file describing microstructure (RVE+inclusions)",ang= "file describing microstructure (RVE+inclusions)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
f_output=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "file to store volume fraction of inclusions for every cell or microstructure phase found at midpoints of cell edges",ang= "file to store volume fraction of inclusions for every cell or microstructure phase found at midpoints of cell edges",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
f_image=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "file to store a (raw) image of the discretized microstructure",ang= "file to store a (raw) image of the discretized microstructure",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : c_solver_crystal_alloy_behaviour
# ======================================================================
C_SOLVER_CRYSTAL_ALLOY_BEHAVIOUR_DATA=PROC(nom='C_SOLVER_CRYSTAL_ALLOY_BEHAVIOUR_DATA',op=None,
UIinfo ={'groupes':('solver',)},
loading_type=SIMP(typ='TXM',fr= "Determines the type of loading",ang= "Determines the type of loading",docu= "",statut= "o",into=['tension', 'creep', 'none'],min=1,max=1,val_min='**',val_max='**',defaut='tension'),
loading_type_tension=BLOC(condition="(loading_type=='tension')",
loading_direction=SIMP(typ='TXM',fr= "Determines the direction of loading",ang= "Determines the direction of loading",docu= "",statut= "o",into=['sensT', 'sensL'],min=1,max=1,val_min='**',val_max='**',defaut='sensT'),
temperature=SIMP(typ='R',fr= "Set experimental temperature",ang= "Set experimental temperature",docu= "",statut= "o",into=None,min=1,max=1,val_min=273.0,val_max=873.0,defaut=673.0),
RX_RV=SIMP(typ='I',fr= "Active or not microstructure evolution",ang= "Active or not microstructure evolution",docu= "",statut= "o",into=[0, 1],min=1,max=1,val_min='**',val_max='**',defaut=0),
recristalisation_fraction=SIMP(typ='R',fr= "Set recristallisation fraction",ang= "Set recristallisation fraction",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=1.0),
D0=SIMP(typ='R',fr= "Set grain size",ang= "Set grain size",docu= "",statut= "o",into=None,min=1,max=1,val_min=1e-06,val_max=2e-05,defaut=5e-06),
omega=SIMP(typ='R',fr= "Set distance effect of dialocation to grain boundary",ang= "Set distance effect of dialocation to grain boundary",docu= "",statut= "o",into=None,min=1,max=1,val_min=1e-06,val_max=2e-05,defaut=1e-06),
nsg=SIMP(typ='I',fr= "Number of active gliding system",ang= "Number of active gliding system",docu= "",statut= "o",into=None,min=1,max=1,val_min=1,val_max=21,defaut=21),
ngr=SIMP(typ='I',fr= "Number of macro-grain",ang= "Number of macro-grain",docu= "",statut= "o",into=None,min=1,max=1,val_min=1,val_max='**',defaut=4),
mechanical_behaviour_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Name of input file for mechanical parameters",ang= "Name of input file for mechanical parameters",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='mechanical_behaviour.dat'),
SR0=SIMP(typ='R',fr= "Set applied strain rate number 0",ang= "Set applied strain rate number 0",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
SR1=SIMP(typ='R',fr= "Set applied strain rate number 1",ang= "Set applied strain rate number 1",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.002),
SR2=SIMP(typ='R',fr= "Set applied strain rate number 2",ang= "Set applied strain rate number 2",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=2e-05),
SR3=SIMP(typ='R',fr= "Set applied strain rate number 3",ang= "Set applied strain rate number 3",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.002),
SR4=SIMP(typ='R',fr= "Set applied strain rate number 4",ang= "Set applied strain rate number 4",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
SR5=SIMP(typ='R',fr= "Set applied strain rate number 5",ang= "Set applied strain rate number 5",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=2e-05),
SR6=SIMP(typ='R',fr= "Set applied strain rate number 6",ang= "Set applied strain rate number 6",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
SR7=SIMP(typ='R',fr= "Set applied strain rate number 7",ang= "Set applied strain rate number 7",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.002),
SR8=SIMP(typ='R',fr= "Set applied strain rate number 8",ang= "Set applied strain rate number 8",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
e_saut_1=SIMP(typ='R',fr= "strain jump number 1",ang= "strain jump number 1",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0244),
e_saut_2=SIMP(typ='R',fr= "strain jump number 2",ang= "strain jump number 2",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0293),
e_saut_3=SIMP(typ='R',fr= "strain jump number 3",ang= "strain jump number 3",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0336),
e_saut_4=SIMP(typ='R',fr= "strain jump number 4",ang= "strain jump number 4",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0384),
e_saut_5=SIMP(typ='R',fr= "strain jump number 5",ang= "strain jump number 5",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.043),
e_saut_6=SIMP(typ='R',fr= "strain jump number 6",ang= "strain jump number 6",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.047),
e_saut_7=SIMP(typ='R',fr= "strain jump number 7",ang= "strain jump number 7",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0522),
e_saut_8=SIMP(typ='R',fr= "strain jump number 8",ang= "strain jump number 8",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0566),
strain_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Name of output file",ang= "Name of output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='test_400detT.txt'),
fraction_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Name of microstructural output file",ang= "Name of microstructural output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='Rx_RV.txt'),
jump=SIMP(typ='I',fr= "tensile test test with or without strain rate jumps",ang= "tensile test test with or without strain rate jumps",docu= "",statut= "o",into=[0, 1],min=1,max=1,val_min='**',val_max='**',defaut=0),
),
loading_type_creep=BLOC(condition="(loading_type=='creep')",
loading_direction=SIMP(typ='TXM',fr= "Determines the direction of loading",ang= "Determines the direction of loading",docu= "",statut= "o",into=['sensT', 'sensL'],min=1,max=1,val_min='**',val_max='**',defaut='sensT'),
temperature=SIMP(typ='R',fr= "Set experimental temperature",ang= "Set experimental temperature",docu= "",statut= "o",into=None,min=1,max=1,val_min=273.0,val_max=873.0,defaut=673.0),
RX_RV=SIMP(typ='I',fr= "Active or not microstructure evolution",ang= "Active or not microstructure evolution",docu= "",statut= "o",into=[0, 1],min=1,max=1,val_min='**',val_max='**',defaut=0),
recristalisation_fraction=SIMP(typ='R',fr= "Set recristallisation fraction",ang= "Set recristallisation fraction",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=1.0),
D0=SIMP(typ='R',fr= "Set grain size",ang= "Set grain size",docu= "",statut= "o",into=None,min=1,max=1,val_min=1e-06,val_max=2e-05,defaut=5e-06),
omega=SIMP(typ='R',fr= "Set distance effect of dialocation to grain boundary",ang= "Set distance effect of dialocation to grain boundary",docu= "",statut= "o",into=None,min=1,max=1,val_min=1e-06,val_max=2e-05,defaut=1e-06),
nsg=SIMP(typ='I',fr= "Number of active gliding system",ang= "Number of active gliding system",docu= "",statut= "o",into=None,min=1,max=1,val_min=1,val_max=21,defaut=21),
ngr=SIMP(typ='I',fr= "Number of macro-grain",ang= "Number of macro-grain",docu= "",statut= "o",into=None,min=1,max=1,val_min=1,val_max='**',defaut=4),
mechanical_behaviour_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Name of input file for mechanical parameters",ang= "Name of input file for mechanical parameters",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='mechanical_behaviour.dat'),
SR0=SIMP(typ='R',fr= "Set applied strain rate number 0",ang= "Set applied strain rate number 0",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
SR1=SIMP(typ='R',fr= "Set applied strain rate number 1",ang= "Set applied strain rate number 1",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.002),
SR2=SIMP(typ='R',fr= "Set applied strain rate number 2",ang= "Set applied strain rate number 2",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=2e-05),
SR3=SIMP(typ='R',fr= "Set applied strain rate number 3",ang= "Set applied strain rate number 3",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.002),
SR4=SIMP(typ='R',fr= "Set applied strain rate number 4",ang= "Set applied strain rate number 4",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
SR5=SIMP(typ='R',fr= "Set applied strain rate number 5",ang= "Set applied strain rate number 5",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=2e-05),
SR6=SIMP(typ='R',fr= "Set applied strain rate number 6",ang= "Set applied strain rate number 6",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
SR7=SIMP(typ='R',fr= "Set applied strain rate number 7",ang= "Set applied strain rate number 7",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.002),
SR8=SIMP(typ='R',fr= "Set applied strain rate number 8",ang= "Set applied strain rate number 8",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
e_saut_1=SIMP(typ='R',fr= "strain jump number 1",ang= "strain jump number 1",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0244),
e_saut_2=SIMP(typ='R',fr= "strain jump number 2",ang= "strain jump number 2",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0293),
e_saut_3=SIMP(typ='R',fr= "strain jump number 3",ang= "strain jump number 3",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0336),
e_saut_4=SIMP(typ='R',fr= "strain jump number 4",ang= "strain jump number 4",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0384),
e_saut_5=SIMP(typ='R',fr= "strain jump number 5",ang= "strain jump number 5",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.043),
e_saut_6=SIMP(typ='R',fr= "strain jump number 6",ang= "strain jump number 6",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.047),
e_saut_7=SIMP(typ='R',fr= "strain jump number 7",ang= "strain jump number 7",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0522),
e_saut_8=SIMP(typ='R',fr= "strain jump number 8",ang= "strain jump number 8",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0566),
strain_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Name of output file",ang= "Name of output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='test_400detT.txt'),
fraction_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Name of microstructural output file",ang= "Name of microstructural output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='Rx_RV.txt'),
applied_stress=SIMP(typ='R',fr= "Set applied stress",ang= "Set applied stress",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=250.0,defaut=80.0),
),
loading_type_none=BLOC(condition="(loading_type=='none')",
loading_direction=SIMP(typ='TXM',fr= "Determines the direction of loading",ang= "Determines the direction of loading",docu= "",statut= "o",into=['sensT', 'sensL'],min=1,max=1,val_min='**',val_max='**',defaut='sensT'),
temperature=SIMP(typ='R',fr= "Set experimental temperature",ang= "Set experimental temperature",docu= "",statut= "o",into=None,min=1,max=1,val_min=273.0,val_max=873.0,defaut=673.0),
RX_RV=SIMP(typ='I',fr= "Active or not microstructure evolution",ang= "Active or not microstructure evolution",docu= "",statut= "o",into=[0, 1],min=1,max=1,val_min='**',val_max='**',defaut=0),
recristalisation_fraction=SIMP(typ='R',fr= "Set recristallisation fraction",ang= "Set recristallisation fraction",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max=1.0,defaut=1.0),
D0=SIMP(typ='R',fr= "Set grain size",ang= "Set grain size",docu= "",statut= "o",into=None,min=1,max=1,val_min=1e-06,val_max=2e-05,defaut=5e-06),
omega=SIMP(typ='R',fr= "Set distance effect of dialocation to grain boundary",ang= "Set distance effect of dialocation to grain boundary",docu= "",statut= "o",into=None,min=1,max=1,val_min=1e-06,val_max=2e-05,defaut=1e-06),
nsg=SIMP(typ='I',fr= "Number of active gliding system",ang= "Number of active gliding system",docu= "",statut= "o",into=None,min=1,max=1,val_min=1,val_max=21,defaut=21),
ngr=SIMP(typ='I',fr= "Number of macro-grain",ang= "Number of macro-grain",docu= "",statut= "o",into=None,min=1,max=1,val_min=1,val_max='**',defaut=4),
mechanical_behaviour_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Name of input file for mechanical parameters",ang= "Name of input file for mechanical parameters",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='mechanical_behaviour.dat'),
SR0=SIMP(typ='R',fr= "Set applied strain rate number 0",ang= "Set applied strain rate number 0",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
SR1=SIMP(typ='R',fr= "Set applied strain rate number 1",ang= "Set applied strain rate number 1",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.002),
SR2=SIMP(typ='R',fr= "Set applied strain rate number 2",ang= "Set applied strain rate number 2",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=2e-05),
SR3=SIMP(typ='R',fr= "Set applied strain rate number 3",ang= "Set applied strain rate number 3",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.002),
SR4=SIMP(typ='R',fr= "Set applied strain rate number 4",ang= "Set applied strain rate number 4",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
SR5=SIMP(typ='R',fr= "Set applied strain rate number 5",ang= "Set applied strain rate number 5",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=2e-05),
SR6=SIMP(typ='R',fr= "Set applied strain rate number 6",ang= "Set applied strain rate number 6",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
SR7=SIMP(typ='R',fr= "Set applied strain rate number 7",ang= "Set applied strain rate number 7",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.002),
SR8=SIMP(typ='R',fr= "Set applied strain rate number 8",ang= "Set applied strain rate number 8",docu= "",statut= "o",into=None,min=1,max=1,val_min=2e-06,val_max=0.002,defaut=0.0002),
e_saut_1=SIMP(typ='R',fr= "strain jump number 1",ang= "strain jump number 1",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0244),
e_saut_2=SIMP(typ='R',fr= "strain jump number 2",ang= "strain jump number 2",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0293),
e_saut_3=SIMP(typ='R',fr= "strain jump number 3",ang= "strain jump number 3",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0336),
e_saut_4=SIMP(typ='R',fr= "strain jump number 4",ang= "strain jump number 4",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0384),
e_saut_5=SIMP(typ='R',fr= "strain jump number 5",ang= "strain jump number 5",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.043),
e_saut_6=SIMP(typ='R',fr= "strain jump number 6",ang= "strain jump number 6",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.047),
e_saut_7=SIMP(typ='R',fr= "strain jump number 7",ang= "strain jump number 7",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0522),
e_saut_8=SIMP(typ='R',fr= "strain jump number 8",ang= "strain jump number 8",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=0.0566),
strain_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Name of output file",ang= "Name of output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='test_400detT.txt'),
fraction_output_file=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "Name of microstructural output file",ang= "Name of microstructural output file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='Rx_RV.txt'),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_transverse_cadeex2map
# ======================================================================
C_TRANSVERSE_CADEEX2MAP_DATA=PROC(nom='C_TRANSVERSE_CADEEX2MAP_DATA',op=None,
UIinfo ={'groupes':('transverse',)},
function=SIMP(typ='TXM',fr= "determines the CADEEX function used, the value is a string that must belong to the following list [connection_test, material] - connection_test : test the connection to CADEEX server - material : get data corresponding to a given material reference",ang= "determines the CADEEX function used, the value is a string that must belong to the following list [connection_test, material] - connection_test : test the connection to CADEEX server - material : get data corresponding to a given material reference",docu= "",statut= "o",into=['connection_test', 'material'],min=1,max=1,val_min='**',val_max='**',defaut=None),
function_connection_test=BLOC(condition="(function=='connection_test')",
CADEEX_machine=SIMP(typ='TXM',fr= "IP adress or name ot the machine where CADEEX server is installed.",ang= "IP adress or name ot the machine where CADEEX server is installed.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut='cadeex.der.edf.fr'),
CADEEX_user=SIMP(typ='TXM',fr= "id in CADEEX data-base (NNI for EDF users). If you don't mention the id, it is automatically computed from your CALIBRE $USER environnement variable.",ang= "id in CADEEX data-base (NNI for EDF users). If you don't mention the id, it is automatically computed from your CALIBRE $USER environnement variable.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "the file path of the result",ang= "the file path of the result",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
function_material=BLOC(condition="(function=='material')",
CADEEX_machine=SIMP(typ='TXM',fr= "IP adress or name ot the machine where CADEEX server is installed.",ang= "IP adress or name ot the machine where CADEEX server is installed.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut='cadeex.der.edf.fr'),
CADEEX_user=SIMP(typ='TXM',fr= "id in CADEEX data-base (NNI for EDF users). If you don't mention the id, it is automatically computed from your CALIBRE $USER environnement variable.",ang= "id in CADEEX data-base (NNI for EDF users). If you don't mention the id, it is automatically computed from your CALIBRE $USER environnement variable.",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
output_file_name=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "the file path of the result",ang= "the file path of the result",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
reference=SIMP(typ='TXM',fr= "reference name of material in CADEEX",ang= "reference name of material in CADEEX",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
simple=SIMP(typ=bool,fr= "determines in output is simple (i.e. short) or no",ang= "determines in output is simple (i.e. short) or no",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
),
)
# ======================================================================
# Catalog entry for the MAP function : c_solver_concrete_asr
# ======================================================================
C_SOLVER_CONCRETE_ASR_DATA=PROC(nom='C_SOLVER_CONCRETE_ASR_DATA',op=None,
UIinfo ={'groupes':('solver',)},
sieve_curve_input_file=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the sieve curve file decribing aggregate classes",ang= "name of the sieve curve file decribing aggregate classes",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "name of the csv file containing mechanical results",ang= "name of the csv file containing mechanical results",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
matlab_filename=SIMP(typ=('Fichier', 'All Files (*)'),fr= "name of the file with matlab thesis code result for a sake of comparison",ang= "name of the file with matlab thesis code result for a sake of comparison",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
plot_curves=SIMP(typ=bool,fr= "plot detailed evolution of variables with respect to attack depth",ang= "plot detailed evolution of variables with respect to attack depth",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
trace_study=SIMP(typ=bool,fr= "plot detailed evolution of variables with respect to time",ang= "plot detailed evolution of variables with respect to time",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=False),
time_scale=SIMP(typ='R',fr= "conversion from attack depth to time with a square root law",ang= "conversion from attack depth to time with a square root law",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
number_of_time_steps=SIMP(typ='I',fr= "number of numerical time steps:  is used to compute the size of the first time step, but then time step adaptation guides the actual number of time steps",ang= "number of numerical time steps:  is used to compute the size of the first time step, but then time step adaptation guides the actual number of time steps",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
minimum_step_size=SIMP(typ='R',fr= "minimum step size for the attack depth, as fraction of the smallest aggregate size",ang= "minimum step size for the attack depth, as fraction of the smallest aggregate size",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
initial_attacked_fraction_of_biggest_grain=SIMP(typ='R',fr= "initial fraction of the biggest grains attacked",ang= "initial fraction of the biggest grains attacked",docu= "",statut= "o",into=None,min=1,max=1,val_min=1e-08,val_max='**',defaut=None),
final_attacked_fraction_of_biggest_grain=SIMP(typ='R',fr= "final fraction of biggest grains attacked",ang= "final fraction of biggest grains attacked",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max=1,defaut=None),
ring_young_modulus=SIMP(typ='R',fr= "Young modulus of ring",ang= "Young modulus of ring",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
ring_poisson=SIMP(typ='R',fr= "Poisson ratio of ring",ang= "Poisson ratio of ring",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
sample_radius=SIMP(typ='R',fr= "radius of the sample",ang= "radius of the sample",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
ring_thickness=SIMP(typ='R',fr= "thickness of the ring",ang= "thickness of the ring",docu= "",statut= "o",into=None,min=1,max=1,val_min=1e-20,val_max='**',defaut=None),
imposed_strain=SIMP(typ='TXM',fr= "imposed strain (must be given as a list of float, ex. [0 0 0 0 0 0])",ang= "imposed strain (must be given as a list of float, ex. [0 0 0 0 0 0])",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
imposed_stress=SIMP(typ='TXM',fr= "imposed stress (must be given as a list of float, ex. [0 0 0 0 0 0])",ang= "imposed stress (must be given as a list of float, ex. [0 0 0 0 0 0])",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
directions_of_imposed_stress=SIMP(typ='TXM',fr= "directions of imposed stress (list of 0 and 1, ex. [0 0 0 0 0 0], 0 means this component of the stress is not imposed, 1 means it is.)",ang= "directions of imposed stress (list of 0 and 1, ex. [0 0 0 0 0 0], 0 means this component of the stress is not imposed, 1 means it is.)",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
directions_of_rings=SIMP(typ='TXM',fr= "directions of strain imposed by the ring (must be given as a list of loat, ex. [0 0 0 0 0 0], 0 means there is no ring in this direction, 1 means there is. )",ang= "directions of strain imposed by the ring (must be given as a list of loat, ex. [0 0 0 0 0 0], 0 means there is no ring in this direction, 1 means there is. )",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
symmetry_of_solution=SIMP(typ='I',fr= "imposes the symmetry of the solution : -1 means no symmetry assumed, 0 means all 3 directions behave identically, 1 means axial symmetry around axis 1",ang= "imposes the symmetry of the solution : -1 means no symmetry assumed, 0 means all 3 directions behave identically, 1 means axial symmetry around axis 1",docu= "",statut= "o",into=None,min=1,max=1,val_min=-1,val_max='**',defaut=None),
aggregate_young_modulus=SIMP(typ='R',fr= "Young modulus of aggregates",ang= "Young modulus of aggregates",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
aggregate_poisson=SIMP(typ='R',fr= "Poisson ratio of aggregates",ang= "Poisson ratio of aggregates",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
cement_paste_young_modulus=SIMP(typ='R',fr= "Young modulus of cement paste ",ang= "Young modulus of cement paste ",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
cement_paste_poisson=SIMP(typ='R',fr= "Poisson ratio of cement paste",ang= "Poisson ratio of cement paste",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
itz_porosity=SIMP(typ='R',fr= "porosity of cement paste/aggregate interface",ang= "porosity of cement paste/aggregate interface",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
itz_thickness=SIMP(typ='R',fr= "thickness of cement paste/aggregate interface",ang= "thickness of cement paste/aggregate interface",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
gel_bulk_modulus=SIMP(typ='R',fr= "bulk modulus of asr gel",ang= "bulk modulus of asr gel",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
gel_expansion_factor=SIMP(typ='R',fr= "expansion factor of asr gel",ang= "expansion factor of asr gel",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
decohesion_energy=SIMP(typ='R',fr= "value of the decohesion energy between paste and aggregate",ang= "value of the decohesion energy between paste and aggregate",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
fracture_energy=SIMP(typ='R',fr= "value of the fracture energy in cracks",ang= "value of the fracture energy in cracks",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
crack_aspect_ratio=SIMP(typ='R',fr= "aspect ratio of cracks",ang= "aspect ratio of cracks",docu= "",statut= "o",into=None,min=1,max=1,val_min=0.0,val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : s_probabilistic_study
# ======================================================================
S_PROBABILISTIC_STUDY_DATA=PROC(nom='S_PROBABILISTIC_STUDY_DATA',op=None,
UIinfo ={'groupes':('concrete',)},
random_seed=SIMP(typ='I',fr= "Random seed",ang= "Random seed",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
distributions=SIMP(typ='TXM',fr= "Distribution of each parameter",ang= "Distribution of each parameter",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
dependancy_relationship=SIMP(typ='TXM',fr= "Dependancy relationship for input random parameters",ang= "Dependancy relationship for input random parameters",docu= "",statut= "f",into=['Independent', 'Normal'],min=1,max=1,val_min='**',val_max='**',defaut='Independent'),
corr_matrix_filename=SIMP(typ=('Fichier', 'All Files (*)'),fr= "Correlation matrix filename",ang= "Correlation matrix filename",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
size=SIMP(typ='I',fr= "Size of the experimental design",ang= "Size of the experimental design",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
design_type=SIMP(typ='TXM',fr= "Design type",ang= "Design type",docu= "",statut= "o",into=['MC', 'LHS', 'QMC_Sobol', 'QMC_Halton'],min=1,max=1,val_min='**',val_max='**',defaut=None),
template_file=SIMP(typ='TXM',fr= "Template filename (an empty string means no template)",ang= "Template filename (an empty string means no template)",docu= "",statut= "f",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "csv_output_filename readable with a text editor",ang= "csv_output_filename readable with a text editor",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
xml_output_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "xml_output_filename  readable by OpenTURNS with input distribution information",ang= "xml_output_filename  readable by OpenTURNS with input distribution information",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
computation_script=SIMP(typ=('Fichier', 'All Files (*)'),fr= "A Python script to be run",ang= "A Python script to be run",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_data_filename=SIMP(typ=('Fichier', 'All Files ()', 'Sauvegarde'),fr= "A CSV file that contains NxS values",ang= "A CSV file that contains NxS values",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
)
# ======================================================================
# Catalog entry for the MAP function : s_polymers_study
# ======================================================================
S_POLYMERS_STUDY_DATA=PROC(nom='S_POLYMERS_STUDY_DATA',op=None,
UIinfo ={'groupes':('polymers',)},
model=SIMP(typ=bool,fr= "Determines if solver input will be created from a model.",ang= "Determines if solver input will be created from a model.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
applied_post=SIMP(typ=bool,fr= "Determines if a post treatement input will be created.",ang= "Determines if a post treatement input will be created.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
applied_graph=SIMP(typ=bool,fr= "Determines if a graphical treatement input will be created.",ang= "Determines if a graphical treatement input will be created.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_True_applied_post_True_applied_graph_True=BLOC(condition="(model==True and applied_post==True and applied_graph==True)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "define the output file name.",ang= "define the output file name.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
job=SIMP(typ='TXM',fr= "type of treatement",ang= "type of treatement",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
solver_input_filename=SIMP(typ='TXM',fr= "Name of the input file given to the solver.",ang= "Name of the input file given to the solver.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_stiff_ode_1d.input'),
computation_parameters=SIMP(typ='TXM',fr= "List of computation parameters.",ang= "List of computation parameters.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
computation_parameter_names=SIMP(typ='TXM',fr= "List of computation parameter names",ang= "List of computation parameter names",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coef_names=SIMP(typ='TXM',fr= "List of parameters which do not follow Arrhenius law.",ang= "List of parameters which do not follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_value_names=SIMP(typ='TXM',fr= "List of the equations unkown parameter.",ang= "List of the equations unkown parameter.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_values=SIMP(typ='TXM',fr= "List of the equations unkown initial values.",ang= "List of the equations unkown initial values.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
equation=SIMP(typ='TXM',fr= "List of equations number which is be used in the model.",ang= "List of equations number which is be used in the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_nodes=SIMP(typ='TXM',fr= "List of nodes where the boundary conditions will be applied.",ang= "List of nodes where the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_parameter=SIMP(typ='TXM',fr= "List of species to whom the boundary conditions will be applied.",ang= "List of species to whom the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_types=SIMP(typ='TXM',fr= "List of type of boundary conditions.",ang= "List of type of boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_values=SIMP(typ='TXM',fr= "List of values for the defiend boundary conditions.",ang= "List of values for the defiend boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base",ang= "Name of the data base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
post_equations=SIMP(typ='TXM',fr= "List of post treatment equations.",ang= "List of post treatment equations.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
integrate=SIMP(typ='TXM',fr= "List of boolean which define if the equation have to be intergrated.",ang= "List of boolean which define if the equation have to be intergrated.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_treatment_names=SIMP(typ='TXM',fr= "List of post treatment names.",ang= "List of post treatment names.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
constant=SIMP(typ='TXM',fr= "List of cinetic parameter names.",ang= "List of cinetic parameter names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
forced_param=SIMP(typ='TXM',fr= "List of cinetic parameter names with a different value than the one used for the solver computation.",ang= "List of cinetic parameter names with a different value than the one used for the solver computation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
prerequisite=SIMP(typ='TXM',fr= "List of parameter list which are prerequisite for the post treatement equation.",ang= "List of parameter list which are prerequisite for the post treatement equation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names_post=SIMP(typ='TXM',fr= "List of parameter names which follow Arrhenius law.",ang= "List of parameter names which follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "List of pre exponetial parameters for Arrhenius law.",ang= "List of pre exponetial parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "List of activation energy parameters for Arrhenius law.",ang= "List of activation energy parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "List of experimental data names.",ang= "List of experimental data names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "List of experimental data files.",ang= "List of experimental data files.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "List of time.",ang= "List of time.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
model_True_applied_post_True_applied_graph_False=BLOC(condition="(model==True and applied_post==True and applied_graph==False)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "define the output file name.",ang= "define the output file name.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
job=SIMP(typ='TXM',fr= "type of treatement",ang= "type of treatement",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
solver_input_filename=SIMP(typ='TXM',fr= "Name of the input file given to the solver.",ang= "Name of the input file given to the solver.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_stiff_ode_1d.input'),
computation_parameters=SIMP(typ='TXM',fr= "List of computation parameters.",ang= "List of computation parameters.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
computation_parameter_names=SIMP(typ='TXM',fr= "List of computation parameter names",ang= "List of computation parameter names",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coef_names=SIMP(typ='TXM',fr= "List of parameters which do not follow Arrhenius law.",ang= "List of parameters which do not follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_value_names=SIMP(typ='TXM',fr= "List of the equations unkown parameter.",ang= "List of the equations unkown parameter.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_values=SIMP(typ='TXM',fr= "List of the equations unkown initial values.",ang= "List of the equations unkown initial values.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
equation=SIMP(typ='TXM',fr= "List of equations number which is be used in the model.",ang= "List of equations number which is be used in the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_nodes=SIMP(typ='TXM',fr= "List of nodes where the boundary conditions will be applied.",ang= "List of nodes where the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_parameter=SIMP(typ='TXM',fr= "List of species to whom the boundary conditions will be applied.",ang= "List of species to whom the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_types=SIMP(typ='TXM',fr= "List of type of boundary conditions.",ang= "List of type of boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_values=SIMP(typ='TXM',fr= "List of values for the defiend boundary conditions.",ang= "List of values for the defiend boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base",ang= "Name of the data base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
post_equations=SIMP(typ='TXM',fr= "List of post treatment equations.",ang= "List of post treatment equations.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
integrate=SIMP(typ='TXM',fr= "List of boolean which define if the equation have to be intergrated.",ang= "List of boolean which define if the equation have to be intergrated.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_treatment_names=SIMP(typ='TXM',fr= "List of post treatment names.",ang= "List of post treatment names.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
constant=SIMP(typ='TXM',fr= "List of cinetic parameter names.",ang= "List of cinetic parameter names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
forced_param=SIMP(typ='TXM',fr= "List of cinetic parameter names with a different value than the one used for the solver computation.",ang= "List of cinetic parameter names with a different value than the one used for the solver computation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
prerequisite=SIMP(typ='TXM',fr= "List of parameter list which are prerequisite for the post treatement equation.",ang= "List of parameter list which are prerequisite for the post treatement equation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names_post=SIMP(typ='TXM',fr= "List of parameter names which follow Arrhenius law.",ang= "List of parameter names which follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "List of pre exponetial parameters for Arrhenius law.",ang= "List of pre exponetial parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "List of activation energy parameters for Arrhenius law.",ang= "List of activation energy parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
model_True_applied_post_False_applied_graph_True=BLOC(condition="(model==True and applied_post==False and applied_graph==True)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "define the output file name.",ang= "define the output file name.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
job=SIMP(typ='TXM',fr= "type of treatement",ang= "type of treatement",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
solver_input_filename=SIMP(typ='TXM',fr= "Name of the input file given to the solver.",ang= "Name of the input file given to the solver.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_stiff_ode_1d.input'),
computation_parameters=SIMP(typ='TXM',fr= "List of computation parameters.",ang= "List of computation parameters.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
computation_parameter_names=SIMP(typ='TXM',fr= "List of computation parameter names",ang= "List of computation parameter names",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coef_names=SIMP(typ='TXM',fr= "List of parameters which do not follow Arrhenius law.",ang= "List of parameters which do not follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_value_names=SIMP(typ='TXM',fr= "List of the equations unkown parameter.",ang= "List of the equations unkown parameter.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_values=SIMP(typ='TXM',fr= "List of the equations unkown initial values.",ang= "List of the equations unkown initial values.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
equation=SIMP(typ='TXM',fr= "List of equations number which is be used in the model.",ang= "List of equations number which is be used in the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_nodes=SIMP(typ='TXM',fr= "List of nodes where the boundary conditions will be applied.",ang= "List of nodes where the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_parameter=SIMP(typ='TXM',fr= "List of species to whom the boundary conditions will be applied.",ang= "List of species to whom the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_types=SIMP(typ='TXM',fr= "List of type of boundary conditions.",ang= "List of type of boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_values=SIMP(typ='TXM',fr= "List of values for the defiend boundary conditions.",ang= "List of values for the defiend boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base",ang= "Name of the data base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "List of experimental data names.",ang= "List of experimental data names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "List of experimental data files.",ang= "List of experimental data files.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "List of time.",ang= "List of time.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
model_True_applied_post_False_applied_graph_False=BLOC(condition="(model==True and applied_post==False and applied_graph==False)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "define the output file name.",ang= "define the output file name.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
job=SIMP(typ='TXM',fr= "type of treatement",ang= "type of treatement",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
solver_input_filename=SIMP(typ='TXM',fr= "Name of the input file given to the solver.",ang= "Name of the input file given to the solver.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut='c_solver_stiff_ode_1d.input'),
computation_parameters=SIMP(typ='TXM',fr= "List of computation parameters.",ang= "List of computation parameters.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
computation_parameter_names=SIMP(typ='TXM',fr= "List of computation parameter names",ang= "List of computation parameter names",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
non_Arrhenius_coef_names=SIMP(typ='TXM',fr= "List of parameters which do not follow Arrhenius law.",ang= "List of parameters which do not follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_value_names=SIMP(typ='TXM',fr= "List of the equations unkown parameter.",ang= "List of the equations unkown parameter.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
initial_values=SIMP(typ='TXM',fr= "List of the equations unkown initial values.",ang= "List of the equations unkown initial values.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
equation=SIMP(typ='TXM',fr= "List of equations number which is be used in the model.",ang= "List of equations number which is be used in the model.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_nodes=SIMP(typ='TXM',fr= "List of nodes where the boundary conditions will be applied.",ang= "List of nodes where the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_parameter=SIMP(typ='TXM',fr= "List of species to whom the boundary conditions will be applied.",ang= "List of species to whom the boundary conditions will be applied.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_types=SIMP(typ='TXM',fr= "List of type of boundary conditions.",ang= "List of type of boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
boundary_condition_values=SIMP(typ='TXM',fr= "List of values for the defiend boundary conditions.",ang= "List of values for the defiend boundary conditions.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base",ang= "Name of the data base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
model_False_applied_post_True_applied_graph_True=BLOC(condition="(model==False and applied_post==True and applied_graph==True)",
post_equations=SIMP(typ='TXM',fr= "List of post treatment equations.",ang= "List of post treatment equations.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
integrate=SIMP(typ='TXM',fr= "List of boolean which define if the equation have to be intergrated.",ang= "List of boolean which define if the equation have to be intergrated.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_treatment_names=SIMP(typ='TXM',fr= "List of post treatment names.",ang= "List of post treatment names.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
constant=SIMP(typ='TXM',fr= "List of cinetic parameter names.",ang= "List of cinetic parameter names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
forced_param=SIMP(typ='TXM',fr= "List of cinetic parameter names with a different value than the one used for the solver computation.",ang= "List of cinetic parameter names with a different value than the one used for the solver computation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
prerequisite=SIMP(typ='TXM',fr= "List of parameter list which are prerequisite for the post treatement equation.",ang= "List of parameter list which are prerequisite for the post treatement equation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names_post=SIMP(typ='TXM',fr= "List of parameter names which follow Arrhenius law.",ang= "List of parameter names which follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "List of pre exponetial parameters for Arrhenius law.",ang= "List of pre exponetial parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "List of activation energy parameters for Arrhenius law.",ang= "List of activation energy parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "List of experimental data names.",ang= "List of experimental data names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "List of experimental data files.",ang= "List of experimental data files.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "List of time.",ang= "List of time.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
model_False_applied_post_True_applied_graph_False=BLOC(condition="(model==False and applied_post==True and applied_graph==False)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
model_reference_number=SIMP(typ='I',fr= "Reference number of the model in data-base",ang= "Reference number of the model in data-base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
csv_output_file_name=SIMP(typ='TXM',fr= "define the output file name.",ang= "define the output file name.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
post_equations=SIMP(typ='TXM',fr= "List of post treatment equations.",ang= "List of post treatment equations.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
integrate=SIMP(typ='TXM',fr= "List of boolean which define if the equation have to be intergrated.",ang= "List of boolean which define if the equation have to be intergrated.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
post_treatment_names=SIMP(typ='TXM',fr= "List of post treatment names.",ang= "List of post treatment names.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
constant=SIMP(typ='TXM',fr= "List of cinetic parameter names.",ang= "List of cinetic parameter names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
forced_param=SIMP(typ='TXM',fr= "List of cinetic parameter names with a different value than the one used for the solver computation.",ang= "List of cinetic parameter names with a different value than the one used for the solver computation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
prerequisite=SIMP(typ='TXM',fr= "List of parameter list which are prerequisite for the post treatement equation.",ang= "List of parameter list which are prerequisite for the post treatement equation.",docu= "",statut= "o",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_names_post=SIMP(typ='TXM',fr= "List of parameter names which follow Arrhenius law.",ang= "List of parameter names which follow Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_A=SIMP(typ='TXM',fr= "List of pre exponetial parameters for Arrhenius law.",ang= "List of pre exponetial parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
Arrhenius_Ea=SIMP(typ='TXM',fr= "List of activation energy parameters for Arrhenius law.",ang= "List of activation energy parameters for Arrhenius law.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
data_base=SIMP(typ='TXM',fr= "Name of the data base",ang= "Name of the data base",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
model_False_applied_post_False_applied_graph_True=BLOC(condition="(model==False and applied_post==False and applied_graph==True)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "List of experimental data names.",ang= "List of experimental data names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "List of experimental data files.",ang= "List of experimental data files.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "List of time.",ang= "List of time.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
model_False_applied_post_False_applied_graph_False=BLOC(condition="(model==False and applied_post==False and applied_graph==False)",
folder_output=SIMP(typ='TXM',fr= "Name of the forder where output is written.",ang= "Name of the forder where output is written.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
study_name=SIMP(typ='TXM',fr= "Name of the computation.",ang= "Name of the computation.",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
graphic_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_graphic_name=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_name=SIMP(typ='TXM',fr= "List of experimental data names.",ang= "List of experimental data names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
experimental_file=SIMP(typ='TXM',fr= "List of experimental data files.",ang= "List of experimental data files.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_names=SIMP(typ='TXM',fr= "List of graphic names.",ang= "List of graphic names.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_nodes=SIMP(typ='TXM',fr= "List of nodes.",ang= "List of nodes.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_times=SIMP(typ='TXM',fr= "List of time.",ang= "List of time.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
graphic_space_log=SIMP(typ='TXM',fr= "List of boolean.",ang= "List of boolean.",docu= "",statut= "f",into=None,min=1,max='**',val_min='**',val_max='**',defaut=None),
),
)
# ======================================================================
# Catalog entry for the MAP function : s_scc_3d_analysis
# ======================================================================
S_SCC_3D_ANALYSIS_DATA=PROC(nom='S_SCC_3D_ANALYSIS_DATA',op=None,
UIinfo ={'groupes':('scc',)},
calculation=SIMP(typ='TXM',fr= "The calculation type",ang= "The calculation type",docu= "",statut= "o",into=['altitude', 'thickness'],min=1,max=1,val_min='**',val_max='**',defaut='altitude'),
surface_type=SIMP(typ='TXM',fr= "nature of the input surface, select how it is interpreted by the component",ang= "nature of the input surface, select how it is interpreted by the component",docu= "",statut= "o",into=['rectangle_grid', 'crack_fit'],min=1,max=1,val_min='**',val_max='**',defaut='rectangle_grid'),
post=SIMP(typ='TXM',fr= "the value must be included into the following list: CDF (Cumulative Density Function), PDF (Probability Density Function), dgb (distance to grain boundary graph : needs a distance_grain_boundary column in the data file), quantification (computes the optimised distribution in a family of distributions and estimates its parameter)",ang= "the value must be included into the following list: CDF (Cumulative Density Function), PDF (Probability Density Function), dgb (distance to grain boundary graph : needs a distance_grain_boundary column in the data file), quantification (computes the optimised distribution in a family of distributions and estimates its parameter)",docu= "",statut= "o",into=['CDF', 'PDF', 'dgb', 'quantification'],min=1,max=1,val_min='**',val_max='**',defaut='PDF'),
statistics=SIMP(typ=bool,fr= "Not documented",ang= "Not documented",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
spectrum_analysis=SIMP(typ=bool,fr= "Not documented",ang= "Not documented",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=True),
calculation_altitude_surface_type_rectangle_grid_post_CDF_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='CDF' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_CDF_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='CDF' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_CDF_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='CDF' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_CDF_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='CDF' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_PDF_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='PDF' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_PDF_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='PDF' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_PDF_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='PDF' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_PDF_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='PDF' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_dgb_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='dgb' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_dgb_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='dgb' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_dgb_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='dgb' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_dgb_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='dgb' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_quantification_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='quantification' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_quantification_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='quantification' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_quantification_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='quantification' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_rectangle_grid_post_quantification_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='rectangle_grid' and post=='quantification' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_CDF_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='CDF' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_CDF_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='CDF' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_CDF_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='CDF' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_CDF_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='CDF' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_PDF_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='PDF' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_PDF_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='PDF' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_PDF_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='PDF' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_PDF_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='PDF' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_dgb_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='dgb' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_dgb_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='dgb' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_dgb_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='dgb' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_dgb_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='dgb' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_quantification_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='quantification' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_quantification_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='quantification' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_quantification_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='quantification' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_altitude_surface_type_crack_fit_post_quantification_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='altitude' and surface_type=='crack_fit' and post=='quantification' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_CDF_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='CDF' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_CDF_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='CDF' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_CDF_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='CDF' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_CDF_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='CDF' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_PDF_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='PDF' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_PDF_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='PDF' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_PDF_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='PDF' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_PDF_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='PDF' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_dgb_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='dgb' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_dgb_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='dgb' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_dgb_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='dgb' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_dgb_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='dgb' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_quantification_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='quantification' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_quantification_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='quantification' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_quantification_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='quantification' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_rectangle_grid_post_quantification_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='rectangle_grid' and post=='quantification' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_CDF_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='CDF' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_CDF_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='CDF' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_CDF_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='CDF' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_CDF_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='CDF' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_PDF_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='PDF' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_PDF_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='PDF' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_PDF_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='PDF' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_PDF_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='PDF' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_dgb_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='dgb' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_dgb_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='dgb' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_dgb_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='dgb' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_dgb_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='dgb' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_quantification_statistics_True_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='quantification' and statistics==True and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_quantification_statistics_True_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='quantification' and statistics==True and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_quantification_statistics_False_spectrum_analysis_True=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='quantification' and statistics==False and spectrum_analysis==True)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
calculation_thickness_surface_type_crack_fit_post_quantification_statistics_False_spectrum_analysis_False=BLOC(condition="(calculation=='thickness' and surface_type=='crack_fit' and post=='quantification' and statistics==False and spectrum_analysis==False)",
direction=SIMP(typ='I',fr= "The direction type",ang= "The direction type",docu= "",statut= "o",into=[1, -1, 2, -2, 3, -3],min=1,max=1,val_min='**',val_max='**',defaut=1),
alt_min=SIMP(typ='I',fr= "The minimum altitude",ang= "The minimum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
alt_max=SIMP(typ='I',fr= "The maximum altitude",ang= "The maximum altitude",docu= "",statut= "f",into=None,min=1,max=1,val_min=0,val_max='**',defaut=None),
input_grid_field_raw=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field data file",ang= "field data file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
input_grid_field_raw_metadata=SIMP(typ=('Fichier', 'All Files (*)'),fr= "field metadata file",ang= "field metadata file",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
nb_segments=SIMP(typ='I',fr= "number of 1D segments for each elementary face of the surface in the resulting mesh",ang= "number of 1D segments for each elementary face of the surface in the resulting mesh",docu= "",statut= "o",into=None,min=1,max=1,val_min='**',val_max='**',defaut=None),
),
)

# This text should be dump into a file named 'map_cata.py' to be
# copied in the eficas directory $EFICAS_ROOT/MAP/.
# Then run 'qtEficas_map.py -s maquettemap'. The key name
# maquettemap is the name defined in prefs_MAP.py
