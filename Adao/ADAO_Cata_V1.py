# -*- coding: utf-8 -*-

# --------------------------------------------------------
# generated by AdaoCatalogGenerator at 2012-09-17 13:34:55
# --------------------------------------------------------

import Accas
from Accas import *
version_cata="V1"

JdC = JDC_CATA (code = 'ADAO',
                execmodul = None,
                regles = ( AU_MOINS_UN ('ASSIMILATION_STUDY','CHECKING_STUDY'), AU_PLUS_UN ('ASSIMILATION_STUDY','CHECKING_STUDY')),
               )

def F_VectorSerie(statut) : return FACT(statut = statut,
                                         FROM = SIMP(statut = "o", typ = "TXM", into=("String", "Script", ), defaut="Script"),
                                         SCRIPT_DATA = BLOC ( condition = " FROM in ( 'Script', ) ",

                                                      SCRIPT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                         STRING_DATA = BLOC ( condition = " FROM in ( 'String', ) ",

                                                      STRING = SIMP(statut = "o", typ = "TXM"),
                                                     ),
                                         FUNCTIONDICT_DATA = BLOC ( condition = " FROM in ( 'FunctionDict', ) ",

                                                      FUNCTIONDICT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                    )

def F_Function(statut) : return FACT(statut = statut,
                                         FROM = SIMP(statut = "o", typ = "TXM", into=("ScriptWithFunctions", "ScriptWithSwitch", "FunctionDict", ), defaut="ScriptWithFunctions"),
                                         SCRIPT_DATA = BLOC ( condition = " FROM in ( 'Script', ) ",

                                                      SCRIPT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                         STRING_DATA = BLOC ( condition = " FROM in ( 'String', ) ",

                                                      STRING = SIMP(statut = "o", typ = "TXM"),
                                                     ),
                                         SCRIPTWITHFUNCTIONS_DATA = BLOC ( condition = " FROM in ( 'ScriptWithFunctions', ) ",

                                                      FROM = SIMP(statut = "o", typ = "TXM", into=("Direct","DirectTangentAdjoint", ), defaut="Direct"),
                                                      FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                         SCRIPTWITHSWITCH_DATA = BLOC ( condition = " FROM in ( 'ScriptWithSwitch', ) ",

                                                      FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
#                                          FUNCTIONDICT_DATA = BLOC ( condition = " FROM in ( 'FunctionDict', ) ",
# 
#                                                       FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
#                                                      ),
                                    )

def F_Vector(statut) : return FACT(statut = statut,
                                         FROM = SIMP(statut = "o", typ = "TXM", into=("String", "Script", ), defaut="Script"),
                                         SCRIPT_DATA = BLOC ( condition = " FROM in ( 'Script', ) ",

                                                      SCRIPT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                         STRING_DATA = BLOC ( condition = " FROM in ( 'String', ) ",

                                                      STRING = SIMP(statut = "o", typ = "TXM", fr="En attente d'une chaine de caractères entre guillements, qui soit valide pour construire un vecteur : une suite de nombres, utilisant un espace ou une virgule pour séparer deux éléments et un point-virgule pour séparer deux lignes", ang="Waiting for a string in quotes, valid to build a vector: a floats serie, using a space or comma to separate two elements in a line, a semi-colon to separate rows"),
                                                     ),
                                         FUNCTIONDICT_DATA = BLOC ( condition = " FROM in ( 'FunctionDict', ) ",

                                                      FUNCTIONDICT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                    )

def F_Dict(statut) : return FACT(statut = statut,
                                         FROM = SIMP(statut = "o", typ = "TXM", into=("Script", ), defaut="Script"),
                                         SCRIPT_DATA = BLOC ( condition = " FROM in ( 'Script', ) ",

                                                      SCRIPT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                         STRING_DATA = BLOC ( condition = " FROM in ( 'String', ) ",

                                                      STRING = SIMP(statut = "o", typ = "TXM"),
                                                     ),
                                         FUNCTIONDICT_DATA = BLOC ( condition = " FROM in ( 'FunctionDict', ) ",

                                                      FUNCTIONDICT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                    )

def F_Matrix(statut) : return FACT(statut = statut,
                                         FROM = SIMP(statut = "o", typ = "TXM", into=("String", "Script", ), defaut="Script"),
                                         SCRIPT_DATA = BLOC ( condition = " FROM in ( 'Script', ) ",

                                                      SCRIPT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                         STRING_DATA = BLOC ( condition = " FROM in ( 'String', ) ",

                                                      STRING = SIMP(statut = "o", typ = "TXM"),
                                                     ),
                                         FUNCTIONDICT_DATA = BLOC ( condition = " FROM in ( 'FunctionDict', ) ",

                                                      FUNCTIONDICT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                    )

def F_ObservationError(statut) : return FACT(statut=statut,
                                          Stored = SIMP(statut="o", typ = "I", into=(0, 1), defaut=0),
                                          INPUT_TYPE = SIMP(statut="o", typ = "TXM", into=("Matrix", ), defaut="Matrix"),

                                                 Matrix = BLOC ( condition = " INPUT_TYPE in ( 'Matrix', ) ",
                                                 data = F_Matrix("o"),
                                                 ),

                                                )

def F_Observation(statut) : return FACT(statut=statut,
                                          Stored = SIMP(statut="o", typ = "I", into=(0, 1), defaut=0),
                                          INPUT_TYPE = SIMP(statut="o", typ = "TXM", into=("Vector", "VectorSerie", ), defaut="Vector"),

                                                 Vector = BLOC ( condition = " INPUT_TYPE in ( 'Vector', ) ",
                                                 data = F_Vector("o"),
                                                 ),

                                                 VectorSerie = BLOC ( condition = " INPUT_TYPE in ( 'VectorSerie', ) ",
                                                 data = F_VectorSerie("o"),
                                                 ),

                                                )

def F_BackgroundError(statut) : return FACT(statut=statut,
                                          Stored = SIMP(statut="o", typ = "I", into=(0, 1), defaut=0),
                                          INPUT_TYPE = SIMP(statut="o", typ = "TXM", into=("Matrix", ), defaut="Matrix"),

                                                 Matrix = BLOC ( condition = " INPUT_TYPE in ( 'Matrix', ) ",
                                                 data = F_Matrix("o"),
                                                 ),

                                                )

def F_ObservationOperator(statut) : return FACT(statut=statut,
                                          Stored = SIMP(statut="o", typ = "I", into=(0, 1), defaut=0),
                                          INPUT_TYPE = SIMP(statut="o", typ = "TXM", into=("Matrix", "Function", ), defaut="Function"),

                                                 Matrix = BLOC ( condition = " INPUT_TYPE in ( 'Matrix', ) ",
                                                 data = F_Matrix("o"),
                                                 ),

                                                 Function = BLOC ( condition = " INPUT_TYPE in ( 'Function', ) ",
                                                 data = F_Function("o"),
                                                 ),

                                                )

def F_CheckingPoint(statut) : return FACT(statut=statut,
                                          Stored = SIMP(statut="o", typ = "I", into=(0, 1), defaut=0),
                                          INPUT_TYPE = SIMP(statut="o", typ = "TXM", into=("Vector", ), defaut="Vector"),

                                                 Vector = BLOC ( condition = " INPUT_TYPE in ( 'Vector', ) ",
                                                 data = F_Vector("o"),
                                                 ),

                                                )

def F_Background(statut) : return FACT(statut=statut,
                                          Stored = SIMP(statut="o", typ = "I", into=(0, 1), defaut=0),
                                          INPUT_TYPE = SIMP(statut="o", typ = "TXM", into=("Vector", ), defaut="Vector"),

                                                 Vector = BLOC ( condition = " INPUT_TYPE in ( 'Vector', ) ",
                                                 data = F_Vector("o"),
                                                 ),

                                                )

def F_AlgorithmParameters(statut) : return FACT(statut=statut,

                                          INPUT_TYPE = SIMP(statut="o", typ = "TXM", into=("Dict", ), defaut="Dict"),

                                                 Dict = BLOC ( condition = " INPUT_TYPE in ( 'Dict', ) ",
                                                 data = F_Dict("o"),
                                                 ),

                                                )

def F_EvolutionError(statut) : return FACT(statut=statut,
                                          Stored = SIMP(statut="o", typ = "I", into=(0, 1), defaut=0),
                                          INPUT_TYPE = SIMP(statut="o", typ = "TXM", into=("Matrix", ), defaut="Matrix"),

                                                 Matrix = BLOC ( condition = " INPUT_TYPE in ( 'Matrix', ) ",
                                                 data = F_Matrix("o"),
                                                 ),

                                                )

def F_UserDataInit(statut) : return FACT(statut=statut,

                                          INPUT_TYPE = SIMP(statut="o", typ = "TXM", into=("Dict", ), defaut="Dict"),

                                                 Dict = BLOC ( condition = " INPUT_TYPE in ( 'Dict', ) ",
                                                 data = F_Dict("o"),
                                                 ),

                                                )

def F_EvolutionModel(statut) : return FACT(statut=statut,
                                          Stored = SIMP(statut="o", typ = "I", into=(0, 1), defaut=0),
                                          INPUT_TYPE = SIMP(statut="o", typ = "TXM", into=("Matrix", "Function", ), defaut="Function"),

                                                 Matrix = BLOC ( condition = " INPUT_TYPE in ( 'Matrix', ) ",
                                                 data = F_Matrix("o"),
                                                 ),

                                                 Function = BLOC ( condition = " INPUT_TYPE in ( 'Function', ) ",
                                                 data = F_Function("o"),
                                                 ),

                                                )

def F_UserPostAnalysis(statut) : return FACT(statut = statut,
                                         FROM = SIMP(statut = "o", typ = "TXM", into=("String", "Script", ), defaut="Script"),
                                         SCRIPT_DATA = BLOC ( condition = " FROM in ( 'Script', ) ",

                                                      SCRIPT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                         STRING_DATA = BLOC ( condition = " FROM in ( 'String', ) ",

                                                      STRING = SIMP(statut = "o", typ = "TXM"),
                                                     ),
                                         FUNCTIONDICT_DATA = BLOC ( condition = " FROM in ( 'FunctionDict', ) ",

                                                      FUNCTIONDICT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                                     ),
                                    )

def F_InitChoice() : return  ("Background",
                              "BackgroundError",
                              "Observation",
                              "ObservationError",
                              "ObservationOperator",
                              "EvolutionModel",
                              "EvolutionError",
                              "AlgorithmParameters",
                              "UserPostAnalysis",
                             )

def F_Init(statut) : return FACT(statut = statut,
                                 INIT_FILE = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr())),
                                 TARGET_LIST = SIMP(statut = "o", typ = "TXM", min=1, max="**", into=F_InitChoice(),  validators=(VerifExiste(2))),
                                )

def F_Observers(statut) : return FACT(statut=statut,
                                      SELECTION = SIMP(statut="o", defaut=[], typ="TXM", min=0, max="**", validators=NoRepeat(), into=(['Analysis', 'CurrentState', 'Innovation', 'OMA', 'OMB', 'BMA', 'CostFunctionJ', 'CostFunctionJb', 'CostFunctionJo', 'GradientOfCostFunctionJ', 'GradientOfCostFunctionJb', 'GradientOfCostFunctionJo', 'SigmaObs2', 'SigmaBck2', 'APosterioriCovariance'])),

                                       Analysis = BLOC (condition=" 'Analysis' in set(SELECTION) ",
                                                  Analysis_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       CurrentState = BLOC (condition=" 'CurrentState' in set(SELECTION) ",
                                                  CurrentState_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       Innovation = BLOC (condition=" 'Innovation' in set(SELECTION) ",
                                                  Innovation_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       OMA = BLOC (condition=" 'OMA' in set(SELECTION) ",
                                                  OMA_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       OMB = BLOC (condition=" 'OMB' in set(SELECTION) ",
                                                  OMB_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       BMA = BLOC (condition=" 'BMA' in set(SELECTION) ",
                                                  BMA_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       CostFunctionJ = BLOC (condition=" 'CostFunctionJ' in set(SELECTION) ",
                                                  CostFunctionJ_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       CostFunctionJb = BLOC (condition=" 'CostFunctionJb' in set(SELECTION) ",
                                                  CostFunctionJb_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       CostFunctionJo = BLOC (condition=" 'CostFunctionJo' in set(SELECTION) ",
                                                  CostFunctionJo_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       GradientOfCostFunctionJ = BLOC (condition=" 'GradientOfCostFunctionJ' in set(SELECTION) ",
                                                  GradientOfCostFunctionJ_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       GradientOfCostFunctionJb = BLOC (condition=" 'GradientOfCostFunctionJb' in set(SELECTION) ",
                                                  GradientOfCostFunctionJb_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       GradientOfCostFunctionJo = BLOC (condition=" 'GradientOfCostFunctionJo' in set(SELECTION) ",
                                                  GradientOfCostFunctionJo_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       SigmaObs2 = BLOC (condition=" 'SigmaObs2' in set(SELECTION) ",
                                                  SigmaObs2_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       SigmaBck2 = BLOC (condition=" 'SigmaBck2' in set(SELECTION) ",
                                                  SigmaBck2_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                       APosterioriCovariance = BLOC (condition=" 'APosterioriCovariance' in set(SELECTION) ",
                                                  APosterioriCovariance_data = FACT(statut = "o",
                                                             Scheduler = SIMP(statut = "f", typ = "TXM"),
                                                             Info      = SIMP(statut = "f", typ = "TXM"),
                                                             NodeType  = SIMP(statut = "o", typ = "TXM", min=1, max=1, defaut = "", into=("String", "Script")),
                                                             PythonScript = BLOC (condition = " NodeType == 'String' ",
                                                                                  Value = SIMP(statut = "o", typ = "TXM")
                                                                                 ),
                                                             UserFile = BLOC (condition = " NodeType == 'Script' ",
                                                                              Value = SIMP(statut = "o", typ = "FichierNoAbs", validators=(OnlyStr()))
                                                                             )
                                                                      ),
                                                          ),

                                     )


def F_variables(statut) : return FACT(statut=statut,
                                      regles = ( MEME_NOMBRE ('NAMES', 'SIZES')),
                                      NAMES = SIMP(statut="o", typ="TXM", max="**", validators=NoRepeat()),
                                      SIZES = SIMP(statut="o", typ="I", val_min=1, max="**")
                                      )

ASSIMILATION_STUDY = PROC(nom="ASSIMILATION_STUDY",
                          op=None,
                          repetable           = "n",
                          Study_name          = SIMP(statut="o", typ = "TXM"),
                          Study_repertory     = SIMP(statut="f", typ = "TXM"),
                          Debug               = SIMP(statut="o", typ = "I", into=(0, 1), defaut=0),
                          Algorithm           = SIMP(statut="o", typ = "TXM", into=("3DVAR", "Blue", "EnsembleBlue", "KalmanFilter", "LinearLeastSquares", "NonLinearLeastSquares", "ParticleSwarmOptimization", "QuantileRegression", )),
                          Background          = F_Background("o"),
                          BackgroundError     = F_BackgroundError("o"),
                          Observation         = F_Observation("o"),
                          ObservationError    = F_ObservationError("o"),
                          ObservationOperator = F_ObservationOperator("o"),
                          EvolutionModel      = F_EvolutionModel("f"),
                          EvolutionError      = F_EvolutionError("f"),
                          AlgorithmParameters = F_AlgorithmParameters("f"),
                          UserDataInit        = F_Init("f"),
                          UserPostAnalysis    = F_UserPostAnalysis("f"),
                          InputVariables      = F_variables("f"),
                          OutputVariables     = F_variables("f"),
                          Observers           = F_Observers("f")
                         )

CHECKING_STUDY = PROC(nom="CHECKING_STUDY",
                          op=None,
                          repetable           = "n",
                          Study_name          = SIMP(statut="o", typ = "TXM"),
                          Study_repertory     = SIMP(statut="f", typ = "TXM"),
                          Debug               = SIMP(statut="o", typ = "I", into=(0, 1), defaut=0),
                          Algorithm           = SIMP(statut="o", typ = "TXM", into=("AdjointTest", "GradientTest", )),
                          CheckingPoint       = F_CheckingPoint("o"),
                          ObservationOperator = F_ObservationOperator("o"),
                          AlgorithmParameters = F_AlgorithmParameters("f"),
                          UserDataInit        = F_Init("f"),
                         )

