# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'myMain.ui'
#
# Created by: PyQt5 UI code generator 5.5.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Eficas(object):
    def setupUi(self, Eficas):
        Eficas.setObjectName("Eficas")
        Eficas.resize(1676, 811)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Eficas.sizePolicy().hasHeightForWidth())
        Eficas.setSizePolicy(sizePolicy)
        Eficas.setStyleSheet("/* QMenuBar {\n"
"     background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,\n"
"                                       stop:0 rgb(226,255,253), stop:1 rgb(191,237,255));\n"
" }*/\n"
"\n"
"QMenuBar {\n"
"     background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,\n"
"                                       stop:0 rgb(164,165,178), stop:1 rgb(55,66,126));\n"
" }\n"
" QMenuBar::item {\n"
"     spacing: 3px; /* spacing between menu bar items */\n"
"     color: white;\n"
"     padding: 1px 4px;\n"
"     background: transparent;\n"
"     border-radius: 4px;\n"
" }\n"
"\n"
" QMenuBar::item:selected { /* when selected using mouse or keyboard */\n"
"     background: #a8a8a8;\n"
" }\n"
"\n"
" QMenuBar::item:pressed {\n"
"     background: #888888;\n"
" }\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"")
        self.centralwidget = QtWidgets.QWidget(Eficas)
        self.centralwidget.setStyleSheet("QComboBox{combobox-popup:0;}")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frameEntete = QtWidgets.QFrame(self.centralwidget)
        self.frameEntete.setMinimumSize(QtCore.QSize(0, 61))
        self.frameEntete.setMaximumSize(QtCore.QSize(16777215, 61))
        self.frameEntete.setStyleSheet("/*background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,\n"
"                                stop:0 rgb(218,229,248), stop:1 rgb(9,86,109));*/\n"
"/*background-color:rgb(208,225,238)*/")
        self.frameEntete.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frameEntete.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameEntete.setLineWidth(2)
        self.frameEntete.setObjectName("frameEntete")
        self.verticalLayout.addWidget(self.frameEntete)
        self.myQtab = QtWidgets.QTabWidget(self.centralwidget)
        self.myQtab.setStyleSheet("background-color:rgb(224,223,222)")
        self.myQtab.setTabPosition(QtWidgets.QTabWidget.North)
        self.myQtab.setTabsClosable(True)
        self.myQtab.setObjectName("myQtab")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.myQtab.addTab(self.tab_3, "")
        self.verticalLayout.addWidget(self.myQtab)
        Eficas.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Eficas)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1676, 30))
        self.menubar.setObjectName("menubar")
        self.menuFichier = QtWidgets.QMenu(self.menubar)
        self.menuFichier.setObjectName("menuFichier")
        self.menuEdition = QtWidgets.QMenu(self.menubar)
        self.menuEdition.setObjectName("menuEdition")
        self.menuJdC = QtWidgets.QMenu(self.menubar)
        self.menuJdC.setObjectName("menuJdC")
        self.menuAide = QtWidgets.QMenu(self.menubar)
        self.menuAide.setObjectName("menuAide")
        Eficas.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Eficas)
        self.statusbar.setObjectName("statusbar")
        Eficas.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(Eficas)
        self.toolBar.setIconSize(QtCore.QSize(36, 36))
        self.toolBar.setObjectName("toolBar")
        Eficas.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.action_Nouveau = QtWidgets.QAction(Eficas)
        icon = QtGui.QIcon.fromTheme("document-new")
        self.action_Nouveau.setIcon(icon)
        self.action_Nouveau.setObjectName("action_Nouveau")
        self.actionNouvel_Include = QtWidgets.QAction(Eficas)
        self.actionNouvel_Include.setObjectName("actionNouvel_Include")
        self.actionARemplacer = QtWidgets.QAction(Eficas)
        self.actionARemplacer.setObjectName("actionARemplacer")
        self.actionOuvrir = QtWidgets.QAction(Eficas)
        icon = QtGui.QIcon.fromTheme("document-open")
        self.actionOuvrir.setIcon(icon)
        self.actionOuvrir.setObjectName("actionOuvrir")
        self.actionEnregistrer = QtWidgets.QAction(Eficas)
        icon = QtGui.QIcon.fromTheme("document-save")
        self.actionEnregistrer.setIcon(icon)
        self.actionEnregistrer.setObjectName("actionEnregistrer")
        self.actionParametres_Eficas = QtWidgets.QAction(Eficas)
        self.actionParametres_Eficas.setObjectName("actionParametres_Eficas")
        self.actionEnregistrer_sous = QtWidgets.QAction(Eficas)
        icon = QtGui.QIcon.fromTheme("document-save-as")
        self.actionEnregistrer_sous.setIcon(icon)
        self.actionEnregistrer_sous.setObjectName("actionEnregistrer_sous")
        self.actionFermer = QtWidgets.QAction(Eficas)
        self.actionFermer.setObjectName("actionFermer")
        self.actionFermer_tout = QtWidgets.QAction(Eficas)
        self.actionFermer_tout.setObjectName("actionFermer_tout")
        self.actionCouper = QtWidgets.QAction(Eficas)
        icon = QtGui.QIcon.fromTheme("edit-cut")
        self.actionCouper.setIcon(icon)
        self.actionCouper.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionCouper.setObjectName("actionCouper")
        self.actionCopier = QtWidgets.QAction(Eficas)
        icon = QtGui.QIcon.fromTheme("edit-copy")
        self.actionCopier.setIcon(icon)
        self.actionCopier.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionCopier.setObjectName("actionCopier")
        self.actionColler = QtWidgets.QAction(Eficas)
        icon = QtGui.QIcon.fromTheme("edit-paste")
        self.actionColler.setIcon(icon)
        self.actionColler.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionColler.setObjectName("actionColler")
        self.actionQuitter = QtWidgets.QAction(Eficas)
        self.actionQuitter.setObjectName("actionQuitter")
        self.actionRapport_de_Validation = QtWidgets.QAction(Eficas)
        self.actionRapport_de_Validation.setAutoRepeat(False)
        self.actionRapport_de_Validation.setObjectName("actionRapport_de_Validation")
        self.actionFichier_Source = QtWidgets.QAction(Eficas)
        self.actionFichier_Source.setObjectName("actionFichier_Source")
        self.actionFichier_Resultat = QtWidgets.QAction(Eficas)
        self.actionFichier_Resultat.setObjectName("actionFichier_Resultat")
        self.actionLecteur_Pdf = QtWidgets.QAction(Eficas)
        self.actionLecteur_Pdf.setObjectName("actionLecteur_Pdf")
        self.actionEficas = QtWidgets.QAction(Eficas)
        self.actionEficas.setObjectName("actionEficas")
        self.actionVersion = QtWidgets.QAction(Eficas)
        self.actionVersion.setObjectName("actionVersion")
        self.actionSupprimer = QtWidgets.QAction(Eficas)
        icon = QtGui.QIcon.fromTheme("edit-delete")
        self.actionSupprimer.setIcon(icon)
        self.actionSupprimer.setObjectName("actionSupprimer")
        self.actionRechercherDsCatalogue = QtWidgets.QAction(Eficas)
        self.actionRechercherDsCatalogue.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionRechercherDsCatalogue.setObjectName("actionRechercherDsCatalogue")
        self.actionRechercher = QtWidgets.QAction(Eficas)
        icon = QtGui.QIcon.fromTheme("edit-find")
        self.actionRechercher.setIcon(icon)
        self.actionRechercher.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionRechercher.setObjectName("actionRechercher")
        self.actionDeplier_replier = QtWidgets.QAction(Eficas)
        self.actionDeplier_replier.setObjectName("actionDeplier_replier")
        self.actionCommentaire = QtWidgets.QAction(Eficas)
        self.actionCommentaire.setObjectName("actionCommentaire")
        self.actionParametres = QtWidgets.QAction(Eficas)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Editeur/icons/parametres.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionParametres.setIcon(icon)
        self.actionParametres.setObjectName("actionParametres")
        self.actionParametre_Eficas = QtWidgets.QAction(Eficas)
        self.actionParametre_Eficas.setObjectName("actionParametre_Eficas")
        self.actionRegles_du_JdC = QtWidgets.QAction(Eficas)
        self.actionRegles_du_JdC.setObjectName("actionRegles_du_JdC")
        self.menuFichier.addAction(self.action_Nouveau)
        self.menuFichier.addAction(self.actionNouvel_Include)
        self.menuFichier.addAction(self.actionOuvrir)
        self.menuFichier.addAction(self.actionARemplacer)
        self.menuFichier.addSeparator()
        self.menuFichier.addAction(self.actionEnregistrer)
        self.menuFichier.addAction(self.actionEnregistrer_sous)
        self.menuFichier.addAction(self.actionFermer)
        self.menuFichier.addAction(self.actionFermer_tout)
        self.menuFichier.addSeparator()
        self.menuFichier.addAction(self.actionQuitter)
        self.menuEdition.addAction(self.actionCouper)
        self.menuEdition.addAction(self.actionCopier)
        self.menuEdition.addAction(self.actionColler)
        self.menuEdition.addAction(self.actionSupprimer)
        self.menuEdition.addSeparator()
        self.menuEdition.addAction(self.actionRechercher)
        self.menuEdition.addAction(self.actionRechercherDsCatalogue)
        self.menuEdition.addAction(self.actionDeplier_replier)
        self.menuJdC.addAction(self.actionRapport_de_Validation)
        self.menuJdC.addAction(self.actionRegles_du_JdC)
        self.menuJdC.addAction(self.actionFichier_Source)
        self.menuJdC.addAction(self.actionFichier_Resultat)
        self.menuJdC.addSeparator()
        self.menuJdC.addAction(self.actionCommentaire)
        self.menuJdC.addAction(self.actionParametres)
        self.menuAide.addAction(self.actionEficas)
        self.menuAide.addAction(self.actionParametres_Eficas)
        self.menuAide.addAction(self.actionVersion)
        self.menubar.addAction(self.menuFichier.menuAction())
        self.menubar.addAction(self.menuEdition.menuAction())
        self.menubar.addAction(self.menuJdC.menuAction())
        self.menubar.addAction(self.menuAide.menuAction())
        self.toolBar.addAction(self.action_Nouveau)
        self.toolBar.addAction(self.actionOuvrir)
        self.toolBar.addAction(self.actionEnregistrer)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionCopier)
        self.toolBar.addAction(self.actionColler)
        self.toolBar.addAction(self.actionSupprimer)
        self.toolBar.addAction(self.actionCouper)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionParametres)

        self.retranslateUi(Eficas)
        self.myQtab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Eficas)

    def retranslateUi(self, Eficas):
        _translate = QtCore.QCoreApplication.translate
        Eficas.setWindowTitle(_translate("Eficas", "MainWindow"))
        self.myQtab.setTabText(self.myQtab.indexOf(self.tab_3), _translate("Eficas", "Tab 1"))
        self.menuFichier.setTitle(_translate("Eficas", "&Fichier"))
        self.menuEdition.setTitle(_translate("Eficas", "&Edition"))
        self.menuJdC.setTitle(_translate("Eficas", "&JeuDeDonnées"))
        self.menuAide.setTitle(_translate("Eficas", "&Aide"))
        self.toolBar.setWindowTitle(_translate("Eficas", "toolBar"))
        self.action_Nouveau.setText(_translate("Eficas", "&Nouveau"))
        self.action_Nouveau.setShortcut(_translate("Eficas", "Ctrl+N"))
        self.actionNouvel_Include.setText(_translate("Eficas", "Nouvel Include"))
        self.actionNouvel_Include.setShortcut(_translate("Eficas", "Shift+I"))
        self.actionARemplacer.setText(_translate("Eficas", "&bad"))
        self.actionOuvrir.setText(_translate("Eficas", "&Ouvrir"))
        self.actionOuvrir.setShortcut(_translate("Eficas", "Ctrl+O"))
        self.actionEnregistrer.setText(_translate("Eficas", "Enregistrer"))
        self.actionEnregistrer.setShortcut(_translate("Eficas", "Ctrl+S"))
        self.actionParametres_Eficas.setText(_translate("Eficas", "Parametres Eficas"))
        self.actionEnregistrer_sous.setText(_translate("Eficas", "Enregistrer sous"))
        self.actionEnregistrer_sous.setShortcut(_translate("Eficas", "Ctrl+Shift+S"))
        self.actionFermer.setText(_translate("Eficas", "Fermer "))
        self.actionFermer.setShortcut(_translate("Eficas", "Ctrl+W"))
        self.actionFermer_tout.setText(_translate("Eficas", "Fermer tout"))
        self.actionCouper.setText(_translate("Eficas", "Couper"))
        self.actionCouper.setShortcut(_translate("Eficas", "Ctrl+X"))
        self.actionCopier.setText(_translate("Eficas", "Copier"))
        self.actionCopier.setShortcut(_translate("Eficas", "Ctrl+C"))
        self.actionColler.setText(_translate("Eficas", "Coller"))
        self.actionColler.setShortcut(_translate("Eficas", "Ctrl+V"))
        self.actionQuitter.setText(_translate("Eficas", "Quitter"))
        self.actionQuitter.setShortcut(_translate("Eficas", "Ctrl+Q"))
        self.actionRapport_de_Validation.setText(_translate("Eficas", "Rapport de Validation"))
        self.actionRapport_de_Validation.setShortcut(_translate("Eficas", "Shift+V"))
        self.actionFichier_Source.setText(_translate("Eficas", "Fichier Source"))
        self.actionFichier_Resultat.setText(_translate("Eficas", "Fichier Résultat"))
        self.actionLecteur_Pdf.setText(_translate("Eficas", "Lecteur documentation"))
        self.actionEficas.setText(_translate("Eficas", "Eficas"))
        self.actionVersion.setText(_translate("Eficas", "Version"))
        self.actionSupprimer.setText(_translate("Eficas", "Supprimer"))
        self.actionRechercherDsCatalogue.setText(_translate("Eficas", "Chercher Mot-Clef"))
        self.actionRechercherDsCatalogue.setToolTip(_translate("Eficas", " Rechercher dans le catalogue"))
        self.actionRechercherDsCatalogue.setShortcut(_translate("Eficas", "Shift+F"))
        self.actionRechercher.setText(_translate("Eficas", "Rechercher"))
        self.actionRechercher.setToolTip(_translate("Eficas", " Rechercher dans l\'arbre d\'etude"))
        self.actionRechercher.setShortcut(_translate("Eficas", "Ctrl+F"))
        self.actionDeplier_replier.setText(_translate("Eficas", "Replier/Deplier"))
        self.actionDeplier_replier.setShortcut(_translate("Eficas", "Shift+D"))
        self.actionCommentaire.setText(_translate("Eficas", "Commentaire"))
        self.actionCommentaire.setShortcut(_translate("Eficas", "Shift+C"))
        self.actionParametres.setText(_translate("Eficas", "Paramètres"))
        self.actionParametres.setToolTip(_translate("Eficas", "Gestion des paramètres"))
        self.actionParametres.setShortcut(_translate("Eficas", "Shift+P"))
        self.actionParametre_Eficas.setText(_translate("Eficas", "Parametre Eficas"))
        self.actionRegles_du_JdC.setText(_translate("Eficas", "Régles du JdC"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Eficas = QtWidgets.QMainWindow()
    ui = Ui_Eficas()
    ui.setupUi(Eficas)
    Eficas.show()
    sys.exit(app.exec_())

